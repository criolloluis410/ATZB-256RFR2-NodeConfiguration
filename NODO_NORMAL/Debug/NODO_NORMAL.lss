
NODO_NORMAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00003bba  00003c4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003bba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a3  00800204  00800204  00003c52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003c52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000780  00000000  00000000  00003cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000adfb  00000000  00000000  00004444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000042e7  00000000  00000000  0000f23f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000e05a  00000000  00000000  00013526  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001908  00000000  00000000  00021580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001f966  00000000  00000000  00022e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006a37  00000000  00000000  000427ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e8  00000000  00000000  00049225  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b729  00000000  00000000  0004990d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	18 c1       	rjmp	.+560    	; 0x236 <__bad_interrupt>
       6:	00 00       	nop
       8:	16 c1       	rjmp	.+556    	; 0x236 <__bad_interrupt>
       a:	00 00       	nop
       c:	14 c1       	rjmp	.+552    	; 0x236 <__bad_interrupt>
       e:	00 00       	nop
      10:	12 c1       	rjmp	.+548    	; 0x236 <__bad_interrupt>
      12:	00 00       	nop
      14:	10 c1       	rjmp	.+544    	; 0x236 <__bad_interrupt>
      16:	00 00       	nop
      18:	0e c1       	rjmp	.+540    	; 0x236 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c c1       	rjmp	.+536    	; 0x236 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0a c1       	rjmp	.+532    	; 0x236 <__bad_interrupt>
      22:	00 00       	nop
      24:	08 c1       	rjmp	.+528    	; 0x236 <__bad_interrupt>
      26:	00 00       	nop
      28:	06 c1       	rjmp	.+524    	; 0x236 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	04 c1       	rjmp	.+520    	; 0x236 <__bad_interrupt>
      2e:	00 00       	nop
      30:	02 c1       	rjmp	.+516    	; 0x236 <__bad_interrupt>
      32:	00 00       	nop
      34:	00 c1       	rjmp	.+512    	; 0x236 <__bad_interrupt>
      36:	00 00       	nop
      38:	fe c0       	rjmp	.+508    	; 0x236 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fc c0       	rjmp	.+504    	; 0x236 <__bad_interrupt>
      3e:	00 00       	nop
      40:	fa c0       	rjmp	.+500    	; 0x236 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__vector_17>
      48:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__vector_18>
      4c:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__vector_19>
      50:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__vector_20>
      54:	f0 c0       	rjmp	.+480    	; 0x236 <__bad_interrupt>
      56:	00 00       	nop
      58:	ee c0       	rjmp	.+476    	; 0x236 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ec c0       	rjmp	.+472    	; 0x236 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ea c0       	rjmp	.+468    	; 0x236 <__bad_interrupt>
      62:	00 00       	nop
      64:	e8 c0       	rjmp	.+464    	; 0x236 <__bad_interrupt>
      66:	00 00       	nop
      68:	e6 c0       	rjmp	.+460    	; 0x236 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e4 c0       	rjmp	.+456    	; 0x236 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e2 c0       	rjmp	.+452    	; 0x236 <__bad_interrupt>
      72:	00 00       	nop
      74:	e0 c0       	rjmp	.+448    	; 0x236 <__bad_interrupt>
      76:	00 00       	nop
      78:	de c0       	rjmp	.+444    	; 0x236 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	dc c0       	rjmp	.+440    	; 0x236 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__vector_32>
      84:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__vector_33>
      88:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__vector_34>
      8c:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__vector_35>
      90:	d2 c0       	rjmp	.+420    	; 0x236 <__bad_interrupt>
      92:	00 00       	nop
      94:	d0 c0       	rjmp	.+416    	; 0x236 <__bad_interrupt>
      96:	00 00       	nop
      98:	ce c0       	rjmp	.+412    	; 0x236 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c0       	rjmp	.+408    	; 0x236 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ca c0       	rjmp	.+404    	; 0x236 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c8 c0       	rjmp	.+400    	; 0x236 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 f3 16 	jmp	0x2de6	; 0x2de6 <__vector_42>
      ac:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__vector_43>
      b0:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <__vector_44>
      b4:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__vector_45>
      b8:	be c0       	rjmp	.+380    	; 0x236 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__vector_47>
      c0:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__vector_48>
      c4:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__vector_49>
      c8:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__vector_50>
      cc:	b4 c0       	rjmp	.+360    	; 0x236 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b2 c0       	rjmp	.+356    	; 0x236 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b0 c0       	rjmp	.+352    	; 0x236 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ae c0       	rjmp	.+348    	; 0x236 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ac c0       	rjmp	.+344    	; 0x236 <__bad_interrupt>
      de:	00 00       	nop
      e0:	aa c0       	rjmp	.+340    	; 0x236 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__vector_57>
      e8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__vector_58>
      ec:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__vector_59>
      f0:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__vector_60>
      f4:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <__vector_61>
      f8:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__vector_62>
      fc:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__vector_63>
     100:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__vector_64>
     104:	98 c0       	rjmp	.+304    	; 0x236 <__bad_interrupt>
     106:	00 00       	nop
     108:	96 c0       	rjmp	.+300    	; 0x236 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	94 c0       	rjmp	.+296    	; 0x236 <__bad_interrupt>
     10e:	00 00       	nop
     110:	92 c0       	rjmp	.+292    	; 0x236 <__bad_interrupt>
     112:	00 00       	nop
     114:	90 c0       	rjmp	.+288    	; 0x236 <__bad_interrupt>
     116:	00 00       	nop
     118:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <__vector_70>
     11c:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__vector_71>
     120:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__vector_72>
     124:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__vector_73>
     128:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__vector_74>
     12c:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__vector_75>
     130:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__vector_76>
     134:	3a 0c       	add	r3, r10
     136:	61 0c       	add	r6, r1
     138:	55 0c       	add	r5, r5
     13a:	6e 0c       	add	r6, r14
     13c:	55 0c       	add	r5, r5
     13e:	2d 0c       	add	r2, r13
     140:	47 0c       	add	r4, r7
     142:	55 0c       	add	r5, r5
     144:	55 0c       	add	r5, r5
     146:	55 0c       	add	r5, r5
     148:	55 0c       	add	r5, r5
     14a:	55 0c       	add	r5, r5
     14c:	01 0c       	add	r0, r1
     14e:	55 0c       	add	r5, r5
     150:	55 0c       	add	r5, r5
     152:	55 0c       	add	r5, r5
     154:	55 0c       	add	r5, r5
     156:	55 0c       	add	r5, r5
     158:	55 0c       	add	r5, r5
     15a:	8d 0c       	add	r8, r13
     15c:	55 0c       	add	r5, r5
     15e:	55 0c       	add	r5, r5
     160:	c6 0c       	add	r12, r6
     162:	07 63       	ori	r16, 0x37	; 55
     164:	42 36       	cpi	r20, 0x62	; 98
     166:	b7 9b       	sbis	0x16, 7	; 22
     168:	d8 a7       	std	Y+40, r29	; 0x28
     16a:	1a 39       	cpi	r17, 0x9A	; 154
     16c:	68 56       	subi	r22, 0x68	; 104
     16e:	18 ae       	std	Y+56, r1	; 0x38
     170:	ba ab       	std	Y+50, r27	; 0x32
     172:	55 8c       	ldd	r5, Z+29	; 0x1d
     174:	1d 3c       	cpi	r17, 0xCD	; 205
     176:	b7 cc       	rjmp	.-1682   	; 0xfffffae6 <__eeprom_end+0xff7efae6>
     178:	57 63       	ori	r21, 0x37	; 55
     17a:	bd 6d       	ori	r27, 0xDD	; 221
     17c:	ed fd       	.word	0xfded	; ????
     17e:	75 3e       	cpi	r23, 0xE5	; 229
     180:	f6 17       	cp	r31, r22
     182:	72 31       	cpi	r23, 0x12	; 18
     184:	bf 00       	.word	0x00bf	; ????
     186:	00 00       	nop
     188:	80 3f       	cpi	r24, 0xF0	; 240
     18a:	08 00       	.word	0x0008	; ????
     18c:	00 00       	nop
     18e:	be 92       	st	-X, r11
     190:	24 49       	sbci	r18, 0x94	; 148
     192:	12 3e       	cpi	r17, 0xE2	; 226
     194:	ab aa       	std	Y+51, r10	; 0x33
     196:	aa 2a       	or	r10, r26
     198:	be cd       	rjmp	.-1156   	; 0xfffffd16 <__eeprom_end+0xff7efd16>
     19a:	cc cc       	rjmp	.-1640   	; 0xfffffb34 <__eeprom_end+0xff7efb34>
     19c:	4c 3e       	cpi	r20, 0xEC	; 236
     19e:	00 00       	nop
     1a0:	00 80       	ld	r0, Z
     1a2:	be ab       	std	Y+54, r27	; 0x36
     1a4:	aa aa       	std	Y+50, r10	; 0x32
     1a6:	aa 3e       	cpi	r26, 0xEA	; 234
     1a8:	00 00       	nop
     1aa:	00 00       	nop
     1ac:	bf 00       	.word	0x00bf	; ????
     1ae:	00 00       	nop
     1b0:	80 3f       	cpi	r24, 0xF0	; 240
     1b2:	00 00       	nop
     1b4:	00 00       	nop
     1b6:	00 08       	sbc	r0, r0
     1b8:	41 78       	andi	r20, 0x81	; 129
     1ba:	d3 bb       	out	0x13, r29	; 19
     1bc:	43 87       	std	Z+11, r20	; 0x0b
     1be:	d1 13       	cpse	r29, r17
     1c0:	3d 19       	sub	r19, r13
     1c2:	0e 3c       	cpi	r16, 0xCE	; 206
     1c4:	c3 bd       	out	0x23, r28	; 35
     1c6:	42 82       	std	Z+2, r4	; 0x02
     1c8:	ad 2b       	or	r26, r29
     1ca:	3e 68       	ori	r19, 0x8E	; 142
     1cc:	ec 82       	std	Y+4, r14	; 0x04
     1ce:	76 be       	out	0x36, r7	; 54
     1d0:	d9 8f       	std	Y+25, r29	; 0x19
     1d2:	e1 a9       	ldd	r30, Z+49	; 0x31
     1d4:	3e 4c       	sbci	r19, 0xCE	; 206
     1d6:	80 ef       	ldi	r24, 0xF0	; 240
     1d8:	ff be       	out	0x3f, r15	; 63
     1da:	01 c4       	rjmp	.+2050   	; 0x9de <usr_wireless_app_task+0x21c>
     1dc:	ff 7f       	andi	r31, 0xFF	; 255
     1de:	3f 00       	.word	0x003f	; ????
     1e0:	00 00       	nop
	...

000001e4 <__trampolines_end>:
     1e4:	04 03       	mulsu	r16, r20
     1e6:	03 02       	muls	r16, r19
     1e8:	02 01       	movw	r0, r4
     1ea:	00 ff       	sbrs	r16, 0
     1ec:	fe fd       	.word	0xfdfe	; ????
     1ee:	fc fb       	.word	0xfbfc	; ????
     1f0:	f9 f7       	brne	.-2      	; 0x1f0 <__trampolines_end+0xc>
     1f2:	f4 ef       	ldi	r31, 0xF4	; 244

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	d1 e8       	ldi	r29, 0x81	; 129
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	cd bf       	out	0x3d, r28	; 61
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60

00000204 <__do_copy_data>:
     204:	12 e0       	ldi	r17, 0x02	; 2
     206:	a0 e0       	ldi	r26, 0x00	; 0
     208:	b2 e0       	ldi	r27, 0x02	; 2
     20a:	ea eb       	ldi	r30, 0xBA	; 186
     20c:	fb e3       	ldi	r31, 0x3B	; 59
     20e:	00 e0       	ldi	r16, 0x00	; 0
     210:	0b bf       	out	0x3b, r16	; 59
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x14>
     214:	07 90       	elpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a4 30       	cpi	r26, 0x04	; 4
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0x10>

0000021e <__do_clear_bss>:
     21e:	25 e0       	ldi	r18, 0x05	; 5
     220:	a4 e0       	ldi	r26, 0x04	; 4
     222:	b2 e0       	ldi	r27, 0x02	; 2
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a7 3a       	cpi	r26, 0xA7	; 167
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <main>
     232:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <_exit>

00000236 <__bad_interrupt>:
     236:	e4 ce       	rjmp	.-568    	; 0x0 <__vectors>

00000238 <common_tc_read_count>:
     238:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <tmr_read_count>
     23c:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <timer_mul_var>
     240:	22 23       	and	r18, r18
     242:	d9 f0       	breq	.+54     	; 0x27a <common_tc_read_count+0x42>
     244:	40 91 a6 05 	lds	r20, 0x05A6	; 0x8005a6 <timer_multiplier>
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <timer_mul_var>
     24e:	64 2f       	mov	r22, r20
     250:	73 2f       	mov	r23, r19
     252:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__udivmodhi4>
     256:	fb 01       	movw	r30, r22
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	9f ef       	ldi	r25, 0xFF	; 255
     25c:	64 2f       	mov	r22, r20
     25e:	73 2f       	mov	r23, r19
     260:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__udivmodhi4>
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	62 9f       	mul	r22, r18
     268:	c0 01       	movw	r24, r0
     26a:	63 9f       	mul	r22, r19
     26c:	90 0d       	add	r25, r0
     26e:	72 9f       	mul	r23, r18
     270:	90 0d       	add	r25, r0
     272:	11 24       	eor	r1, r1
     274:	8e 0f       	add	r24, r30
     276:	9f 1f       	adc	r25, r31
     278:	08 95       	ret
     27a:	60 91 a6 05 	lds	r22, 0x05A6	; 0x8005a6 <timer_multiplier>
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__udivmodhi4>
     284:	cb 01       	movw	r24, r22
     286:	08 95       	ret

00000288 <common_tc_compare_stop>:
     288:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <tmr_disable_cc_interrupt>
     28c:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <save_cpu_interrupt>
     290:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
     294:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__data_end+0x1>
     298:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end+0x2>
     29c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x3>
     2a0:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <compare_value+0x1>
     2a4:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <compare_value>
     2a8:	0c 94 3c 15 	jmp	0x2a78	; 0x2a78 <restore_cpu_interrupt>

000002ac <common_tc_overflow_stop>:
     2ac:	0e 94 19 15 	call	0x2a32	; 0x2a32 <tmr_disable_ovf_interrupt>
     2b0:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <timer_mul_var>
     2b4:	08 95       	ret

000002b6 <common_tc_stop>:
     2b6:	e8 df       	rcall	.-48     	; 0x288 <common_tc_compare_stop>
     2b8:	f9 df       	rcall	.-14     	; 0x2ac <common_tc_overflow_stop>
     2ba:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <tmr_stop>

000002be <common_tc_delay>:
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	ec 01       	movw	r28, r24
     2c8:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <tmr_read_count>
     2cc:	8c 01       	movw	r16, r24
     2ce:	be 01       	movw	r22, r28
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <timer_multiplier>
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	0e 94 ca 1c 	call	0x3994	; 0x3994 <__mulsi3>
     2e2:	dc 01       	movw	r26, r24
     2e4:	cb 01       	movw	r24, r22
     2e6:	a8 01       	movw	r20, r16
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	48 0f       	add	r20, r24
     2ee:	59 1f       	adc	r21, r25
     2f0:	6a 1f       	adc	r22, r26
     2f2:	7b 1f       	adc	r23, r27
     2f4:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <__data_end>
     2f8:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <__data_end+0x1>
     2fc:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <__data_end+0x2>
     300:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <__data_end+0x3>
     304:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__data_end>
     308:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__data_end+0x1>
     30c:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__data_end+0x2>
     310:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__data_end+0x3>
     314:	ab 01       	movw	r20, r22
     316:	66 27       	eor	r22, r22
     318:	77 27       	eor	r23, r23
     31a:	40 93 04 02 	sts	0x0204, r20	; 0x800204 <__data_end>
     31e:	50 93 05 02 	sts	0x0205, r21	; 0x800205 <__data_end+0x1>
     322:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <__data_end+0x2>
     326:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <__data_end+0x3>
     32a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__data_end>
     32e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__data_end+0x1>
     332:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__data_end+0x2>
     336:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__data_end+0x3>
     33a:	41 15       	cp	r20, r1
     33c:	51 05       	cpc	r21, r1
     33e:	61 05       	cpc	r22, r1
     340:	71 05       	cpc	r23, r1
     342:	91 f0       	breq	.+36     	; 0x368 <common_tc_delay+0xaa>
     344:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__data_end>
     348:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__data_end+0x1>
     34c:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <__data_end+0x2>
     350:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <__data_end+0x3>
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	08 0f       	add	r16, r24
     358:	19 1f       	adc	r17, r25
     35a:	10 93 0a 02 	sts	0x020A, r17	; 0x80020a <compare_value+0x1>
     35e:	00 93 09 02 	sts	0x0209, r16	; 0x800209 <compare_value>
     362:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <tmr_disable_cc_interrupt>
     366:	08 c0       	rjmp	.+16     	; 0x378 <common_tc_delay+0xba>
     368:	08 0f       	add	r16, r24
     36a:	19 1f       	adc	r17, r25
     36c:	10 93 0a 02 	sts	0x020A, r17	; 0x80020a <compare_value+0x1>
     370:	00 93 09 02 	sts	0x0209, r16	; 0x800209 <compare_value>
     374:	0e 94 12 15 	call	0x2a24	; 0x2a24 <tmr_enable_cc_interrupt>
     378:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <compare_value>
     37c:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <compare_value+0x1>
     380:	84 36       	cpi	r24, 0x64	; 100
     382:	91 05       	cpc	r25, r1
     384:	30 f4       	brcc	.+12     	; 0x392 <common_tc_delay+0xd4>
     386:	8c 59       	subi	r24, 0x9C	; 156
     388:	9f 4f       	sbci	r25, 0xFF	; 255
     38a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <compare_value+0x1>
     38e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <compare_value>
     392:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <compare_value>
     396:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <compare_value+0x1>
     39a:	0e 94 24 15 	call	0x2a48	; 0x2a48 <tmr_write_cmpreg>
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	08 95       	ret

000003a8 <common_tc_init>:
     3a8:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <timer_mul_var>
     3ac:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <tmr_init>
     3b0:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <timer_multiplier>
     3b4:	08 95       	ret

000003b6 <tmr_ovf_callback>:
     3b6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     3ba:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     3be:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <__data_end+0x2>
     3c2:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <__data_end+0x3>
     3c6:	00 97       	sbiw	r24, 0x00	; 0
     3c8:	a1 05       	cpc	r26, r1
     3ca:	b1 05       	cpc	r27, r1
     3cc:	c9 f0       	breq	.+50     	; 0x400 <__LOCK_REGION_LENGTH__>
     3ce:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
     3d2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
     3d6:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <__data_end+0x2>
     3da:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <__data_end+0x3>
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	a1 09       	sbc	r26, r1
     3e2:	b1 09       	sbc	r27, r1
     3e4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
     3e8:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__data_end+0x1>
     3ec:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <__data_end+0x2>
     3f0:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <__data_end+0x3>
     3f4:	00 97       	sbiw	r24, 0x00	; 0
     3f6:	a1 05       	cpc	r26, r1
     3f8:	b1 05       	cpc	r27, r1
     3fa:	11 f4       	brne	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	0e 94 12 15 	call	0x2a24	; 0x2a24 <tmr_enable_cc_interrupt>
     400:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <timer_mul_var>
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <timer_mul_var>
     40a:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <timer_multiplier>
     40e:	89 17       	cp	r24, r25
     410:	48 f0       	brcs	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     412:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <timer_mul_var>
     416:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <common_tc_ovf_callback>
     41a:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <common_tc_ovf_callback+0x1>
     41e:	30 97       	sbiw	r30, 0x00	; 0
     420:	09 f0       	breq	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	19 95       	eicall
     424:	08 95       	ret

00000426 <tmr_cca_callback>:
     426:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <tmr_disable_cc_interrupt>
     42a:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <common_tc_cca_callback>
     42e:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <common_tc_cca_callback+0x1>
     432:	30 97       	sbiw	r30, 0x00	; 0
     434:	09 f0       	breq	.+2      	; 0x438 <tmr_cca_callback+0x12>
     436:	19 95       	eicall
     438:	08 95       	ret

0000043a <set_common_tc_overflow_callback>:
     43a:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <common_tc_ovf_callback+0x1>
     43e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <common_tc_ovf_callback>
     442:	08 95       	ret

00000444 <set_common_tc_expiry_callback>:
     444:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <common_tc_cca_callback+0x1>
     448:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <common_tc_cca_callback>
     44c:	08 95       	ret

0000044e <usr_app_timer_cb>:
 * \brief Callback function when the timer expires,Perform tasks required to be done after particular timeouts,
* the Timer can be started again in this function to have timeouts periodically
*/
void usr_app_timer_cb(void *parameter)
{
	TimerFinaliza=1;
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <TimerFinaliza+0x1>
     456:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <TimerFinaliza>
     45a:	08 95       	ret

0000045c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     45c:	04 c0       	rjmp	.+8      	; 0x466 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     45e:	61 50       	subi	r22, 0x01	; 1
     460:	71 09       	sbc	r23, r1
     462:	81 09       	sbc	r24, r1
     464:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     466:	61 15       	cp	r22, r1
     468:	71 05       	cpc	r23, r1
     46a:	81 05       	cpc	r24, r1
     46c:	91 05       	cpc	r25, r1
     46e:	b9 f7       	brne	.-18     	; 0x45e <__portable_avr_delay_cycles+0x2>
     470:	08 95       	ret

00000472 <usr_frame_received_cb>:

	delay_ms(10);
}

void usr_frame_received_cb(frame_info_t *frame)
{		
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	ec 01       	movw	r28, r24
		memset(&trama_recibida,0,sizeof(trama_recibida));// Elimina informacion previa de la estructura de recepcion 
     478:	85 e9       	ldi	r24, 0x95	; 149
     47a:	94 e0       	ldi	r25, 0x04	; 4
     47c:	21 e7       	ldi	r18, 0x71	; 113
     47e:	fc 01       	movw	r30, r24
     480:	11 92       	st	Z+, r1
     482:	2a 95       	dec	r18
     484:	e9 f7       	brne	.-6      	; 0x480 <usr_frame_received_cb+0xe>
		memcpy(&trama_recibida,frame->mpdu,sizeof(trama_recibida));// copia la informacion de la memoria fuente(buffer) al detino
     486:	ef 81       	ldd	r30, Y+7	; 0x07
     488:	f8 85       	ldd	r31, Y+8	; 0x08
     48a:	21 e7       	ldi	r18, 0x71	; 113
     48c:	dc 01       	movw	r26, r24
     48e:	01 90       	ld	r0, Z+
     490:	0d 92       	st	X+, r0
     492:	2a 95       	dec	r18
     494:	e1 f7       	brne	.-8      	; 0x48e <usr_frame_received_cb+0x1c>
		//bmm_buffer_free(frame->buffer_header);//Elimina los datos del buffer, evita superpocicion.
			
		if (trama_recibida.d_dstn==SRC_ADDR_) // Si se cumple esta condicion la trama es de subida
     496:	fc 01       	movw	r30, r24
     498:	86 81       	ldd	r24, Z+6	; 0x06
     49a:	97 81       	ldd	r25, Z+7	; 0x07
     49c:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <SRC_ADDR_>
     4a0:	30 91 1c 05 	lds	r19, 0x051C	; 0x80051c <SRC_ADDR_+0x1>
     4a4:	82 17       	cp	r24, r18
     4a6:	93 07       	cpc	r25, r19
     4a8:	39 f5       	brne	.+78     	; 0x4f8 <usr_frame_received_cb+0x86>
		{
			// Obtencion de la longitud de la trama 
			//int longitudTramaRX=0;
			longitudTramaRX=0;  
     4aa:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <longitudTramaRX+0x1>
     4ae:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <longitudTramaRX>
     4b2:	ef e9       	ldi	r30, 0x9F	; 159
     4b4:	f4 e0       	ldi	r31, 0x04	; 4
     4b6:	21 ed       	ldi	r18, 0xD1	; 209
     4b8:	34 e0       	ldi	r19, 0x04	; 4
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	46 ef       	ldi	r20, 0xF6	; 246
     4c2:	5f ef       	ldi	r21, 0xFF	; 255
     4c4:	45 59       	subi	r20, 0x95	; 149
     4c6:	54 40       	sbci	r21, 0x04	; 4
			for (int l = 0; l < 50; l++)
			{
				uint8_t ultimoCH=trama_recibida.CargaUtil_802_15_4[l];
				if (ultimoCH==0xFE)
     4c8:	a1 e0       	ldi	r26, 0x01	; 1
			// Obtencion de la longitud de la trama 
			//int longitudTramaRX=0;
			longitudTramaRX=0;  
			for (int l = 0; l < 50; l++)
			{
				uint8_t ultimoCH=trama_recibida.CargaUtil_802_15_4[l];
     4ca:	81 91       	ld	r24, Z+
				if (ultimoCH==0xFE)
     4cc:	8e 3f       	cpi	r24, 0xFE	; 254
     4ce:	21 f4       	brne	.+8      	; 0x4d8 <usr_frame_received_cb+0x66>
     4d0:	ba 01       	movw	r22, r20
     4d2:	6e 0f       	add	r22, r30
     4d4:	7f 1f       	adc	r23, r31
     4d6:	9a 2f       	mov	r25, r26
		if (trama_recibida.d_dstn==SRC_ADDR_) // Si se cumple esta condicion la trama es de subida
		{
			// Obtencion de la longitud de la trama 
			//int longitudTramaRX=0;
			longitudTramaRX=0;  
			for (int l = 0; l < 50; l++)
     4d8:	e2 17       	cp	r30, r18
     4da:	f3 07       	cpc	r31, r19
     4dc:	b1 f7       	brne	.-20     	; 0x4ca <usr_frame_received_cb+0x58>
     4de:	99 23       	and	r25, r25
     4e0:	21 f0       	breq	.+8      	; 0x4ea <usr_frame_received_cb+0x78>
     4e2:	70 93 1c 02 	sts	0x021C, r23	; 0x80021c <longitudTramaRX+0x1>
     4e6:	60 93 1b 02 	sts	0x021B, r22	; 0x80021b <longitudTramaRX>
				{
					longitudTramaRX=l+1;
				}
			}
			//Re-transmision de la trama recibida atraves de la ID_DEFAULT
			ctrReTX=1;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <ctrReTX+0x1>
     4f2:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <ctrReTX>
     4f6:	8c c0       	rjmp	.+280    	; 0x610 <usr_frame_received_cb+0x19e>
			//transmit_sample_frame(trama_recibida.CargaUtil_802_15_4, longitudTramaRX);	
		}
		else if(trama_recibida.d_dstn==0xFFFF) // Si se cumple esta condicion la trama es de bajada		
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	09 f0       	breq	.+2      	; 0x4fe <usr_frame_received_cb+0x8c>
     4fc:	89 c0       	rjmp	.+274    	; 0x610 <usr_frame_received_cb+0x19e>
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
     4fe:	80 e4       	ldi	r24, 0x40	; 64
     500:	89 b9       	out	0x09, r24	; 9
			int longitudListaNS_1=7;
			LED_Toggle(LED0);
			// Berificar que el Nivel de energia no ha sido almacenado previamente  
			for (int i=0; i<longitudListaNS_1; i++)
			{
				if (listaNS[i].ID_DIR_NS==trama_recibida.d_orgn)
     502:	40 91 9d 04 	lds	r20, 0x049D	; 0x80049d <trama_recibida+0x8>
     506:	50 91 9e 04 	lds	r21, 0x049E	; 0x80049e <trama_recibida+0x9>
     50a:	ee e1       	ldi	r30, 0x1E	; 30
     50c:	f5 e0       	ldi	r31, 0x05	; 5
     50e:	2a e3       	ldi	r18, 0x3A	; 58
     510:	35 e0       	ldi	r19, 0x05	; 5
			//transmit_sample_frame(trama_recibida.CargaUtil_802_15_4, longitudTramaRX);	
		}
		else if(trama_recibida.d_dstn==0xFFFF) // Si se cumple esta condicion la trama es de bajada		
		{	
			// Almacenar Niveles de Energia ////////////////////////////////////////////////////////////
			int coincedencia_ID_NS=0;
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	70 e0       	ldi	r23, 0x00	; 0
			for (int i=0; i<longitudListaNS_1; i++)
			{
				if (listaNS[i].ID_DIR_NS==trama_recibida.d_orgn)
				{
					//crtfor++;
					coincedencia_ID_NS=1;// Si esta condicion se cumple, el NS de la trama rx ya se enuentra en la lista de niveles de energia
     516:	b1 e0       	ldi	r27, 0x01	; 1
     518:	a0 e0       	ldi	r26, 0x00	; 0
			int longitudListaNS_1=7;
			LED_Toggle(LED0);
			// Berificar que el Nivel de energia no ha sido almacenado previamente  
			for (int i=0; i<longitudListaNS_1; i++)
			{
				if (listaNS[i].ID_DIR_NS==trama_recibida.d_orgn)
     51a:	82 81       	ldd	r24, Z+2	; 0x02
     51c:	93 81       	ldd	r25, Z+3	; 0x03
     51e:	84 17       	cp	r24, r20
     520:	95 07       	cpc	r25, r21
     522:	11 f4       	brne	.+4      	; 0x528 <usr_frame_received_cb+0xb6>
				{
					//crtfor++;
					coincedencia_ID_NS=1;// Si esta condicion se cumple, el NS de la trama rx ya se enuentra en la lista de niveles de energia
     524:	6b 2f       	mov	r22, r27
     526:	7a 2f       	mov	r23, r26
     528:	34 96       	adiw	r30, 0x04	; 4
			int coincedencia_ID_NS=0;
			//int longitudListaNS_1=sizeof(listaNS);
			int longitudListaNS_1=7;
			LED_Toggle(LED0);
			// Berificar que el Nivel de energia no ha sido almacenado previamente  
			for (int i=0; i<longitudListaNS_1; i++)
     52a:	e2 17       	cp	r30, r18
     52c:	f3 07       	cpc	r31, r19
     52e:	a9 f7       	brne	.-22     	; 0x51a <usr_frame_received_cb+0xa8>
					//crtfor++;
					coincedencia_ID_NS=1;// Si esta condicion se cumple, el NS de la trama rx ya se enuentra en la lista de niveles de energia
					//LED_Toggle(LED1);// 
				}
			}
			if (coincedencia_ID_NS==0)// Si esta condicion se cumple, el NS de la trama rx se debe extraer del buffer y almacenarlo  
     530:	67 2b       	or	r22, r23
     532:	41 f5       	brne	.+80     	; 0x584 <usr_frame_received_cb+0x112>
			{
				// Extraccion del nivel de energia
				uint8_t *payload_ptr=frame->mpdu;
     534:	ef 81       	ldd	r30, Y+7	; 0x07
     536:	f8 85       	ldd	r31, Y+8	; 0x08
				uint8_t mpdu_len =payload_ptr[0]+2;
				uint8_t potencia_trama=payload_ptr[mpdu_len];
     538:	80 81       	ld	r24, Z
     53a:	8e 5f       	subi	r24, 0xFE	; 254
     53c:	e8 0f       	add	r30, r24
     53e:	f1 1d       	adc	r31, r1
     540:	20 81       	ld	r18, Z
     542:	84 e0       	ldi	r24, 0x04	; 4
     544:	8c b9       	out	0x0c, r24	; 12
				//Agregacion de nuevos datos de NS
				LED_Toggle(LED2);
				listaNS[cont_NS].NS=potencia_trama;
     546:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <cont_NS>
     54a:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <cont_NS+0x1>
     54e:	fc 01       	movw	r30, r24
     550:	ee 0f       	add	r30, r30
     552:	ff 1f       	adc	r31, r31
     554:	ee 0f       	add	r30, r30
     556:	ff 1f       	adc	r31, r31
     558:	e2 5e       	subi	r30, 0xE2	; 226
     55a:	fa 4f       	sbci	r31, 0xFA	; 250
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	31 83       	std	Z+1, r19	; 0x01
     560:	20 83       	st	Z, r18
				listaNS[cont_NS].ID_DIR_NS=trama_recibida.d_orgn;
     562:	20 91 9d 04 	lds	r18, 0x049D	; 0x80049d <trama_recibida+0x8>
     566:	30 91 9e 04 	lds	r19, 0x049E	; 0x80049e <trama_recibida+0x9>
     56a:	33 83       	std	Z+3, r19	; 0x03
     56c:	22 83       	std	Z+2, r18	; 0x02
				cont_NS++;
     56e:	01 96       	adiw	r24, 0x01	; 1
     570:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <cont_NS+0x1>
     574:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <cont_NS>
				DatosNSIniciales=1;			
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <DatosNSIniciales+0x1>
     580:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <DatosNSIniciales>
			}
			//Extraccion de la direccion de destino final( ID_DF) de la trama de bajada
			uint8_t DF1=trama_recibida.CargaUtil_802_15_4[0];
     584:	e5 e9       	ldi	r30, 0x95	; 149
     586:	f4 e0       	ldi	r31, 0x04	; 4
			uint8_t DF2=trama_recibida.CargaUtil_802_15_4[1];
			//Combinacion de los dos primeros bytes para obtener una dirreccion 
			uint16_t ID_DF;
			ID_DF=DF1*0x100;// Se recorren 8 bits a la izquierda
     588:	82 85       	ldd	r24, Z+10	; 0x0a
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	98 2f       	mov	r25, r24
     58e:	88 27       	eor	r24, r24
			ID_DF=ID_DF+DF2; //Se completan los bits restantes
			
			if (ID_S==ID_DF) //Se comprueba que la direccion de destino final pertenece al nodo o no
     590:	23 85       	ldd	r18, Z+11	; 0x0b
     592:	82 0f       	add	r24, r18
     594:	91 1d       	adc	r25, r1
     596:	20 91 3e 05 	lds	r18, 0x053E	; 0x80053e <ID_S>
     59a:	30 91 3f 05 	lds	r19, 0x053F	; 0x80053f <ID_S+0x1>
     59e:	82 17       	cp	r24, r18
     5a0:	93 07       	cpc	r25, r19
     5a2:	59 f4       	brne	.+22     	; 0x5ba <usr_frame_received_cb+0x148>
			{				
				// Nueva Direccion por Defecto ID_DEFAULT almacenada en una trama de bajada
				uint8_t ID_DEFAULT_Rx1 = trama_recibida.CargaUtil_802_15_4[2];
				uint8_t ID_DEFAULT_Rx2 = trama_recibida.CargaUtil_802_15_4[3];	
				uint16_t ID_DEFAULT_NUEVO;// Almacena el nuevo identificador por defecto			
				ID_DEFAULT_NUEVO=ID_DEFAULT_Rx1*0x100;// Se recorren 8 bits a la izquierda
     5a4:	84 85       	ldd	r24, Z+12	; 0x0c
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	98 2f       	mov	r25, r24
     5aa:	88 27       	eor	r24, r24
				ID_DEFAULT_NUEVO=ID_DEFAULT_NUEVO+ID_DEFAULT_Rx2;// Se completan los bits restantes
				// Agregacion del nuevo identificador por defecto
				ID_DEFAULT=ID_DEFAULT_NUEVO;
     5ac:	25 85       	ldd	r18, Z+13	; 0x0d
     5ae:	82 0f       	add	r24, r18
     5b0:	91 1d       	adc	r25, r1
     5b2:	90 93 3d 05 	sts	0x053D, r25	; 0x80053d <ID_DEFAULT+0x1>
     5b6:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <ID_DEFAULT>
				//cargarDir=1;// Inavilita la asignacion de ID_DEF desde la funcion principal
			}
			// Prevencion de bucles
			int coincedencia_IDTrama=0;
			uint8_t idTramaRx=trama_recibida.CargaUtil_802_15_4[4];
     5ba:	30 91 a3 04 	lds	r19, 0x04A3	; 0x8004a3 <trama_recibida+0xe>
			for(int i=0; i<=longitud_IDTramas; i++)
     5be:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <longitud_IDTramas>
     5c2:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <longitud_IDTramas+0x1>
     5c6:	77 23       	and	r23, r23
     5c8:	9c f0       	brlt	.+38     	; 0x5f0 <usr_frame_received_cb+0x17e>
     5ca:	e7 e0       	ldi	r30, 0x07	; 7
     5cc:	f5 e0       	ldi	r31, 0x05	; 5
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	50 e0       	ldi	r21, 0x00	; 0
			{
				if (IDS_TRAMAS[i]==idTramaRx)
				{
					coincedencia_IDTrama=1;// Indica que se encontro el ID_FRAME 
     5d6:	b1 e0       	ldi	r27, 0x01	; 1
     5d8:	a0 e0       	ldi	r26, 0x00	; 0
			// Prevencion de bucles
			int coincedencia_IDTrama=0;
			uint8_t idTramaRx=trama_recibida.CargaUtil_802_15_4[4];
			for(int i=0; i<=longitud_IDTramas; i++)
			{
				if (IDS_TRAMAS[i]==idTramaRx)
     5da:	21 91       	ld	r18, Z+
     5dc:	32 13       	cpse	r19, r18
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <usr_frame_received_cb+0x172>
				{
					coincedencia_IDTrama=1;// Indica que se encontro el ID_FRAME 
     5e0:	4b 2f       	mov	r20, r27
     5e2:	5a 2f       	mov	r21, r26
				//cargarDir=1;// Inavilita la asignacion de ID_DEF desde la funcion principal
			}
			// Prevencion de bucles
			int coincedencia_IDTrama=0;
			uint8_t idTramaRx=trama_recibida.CargaUtil_802_15_4[4];
			for(int i=0; i<=longitud_IDTramas; i++)
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	68 17       	cp	r22, r24
     5e8:	79 07       	cpc	r23, r25
     5ea:	bc f7       	brge	.-18     	; 0x5da <usr_frame_received_cb+0x168>
				if (IDS_TRAMAS[i]==idTramaRx)
				{
					coincedencia_IDTrama=1;// Indica que se encontro el ID_FRAME 
				}					
			}
			if (coincedencia_IDTrama==0)
     5ec:	45 2b       	or	r20, r21
     5ee:	81 f4       	brne	.+32     	; 0x610 <usr_frame_received_cb+0x19e>
			{
				IDS_TRAMAS[longitud_IDTramas]=idTramaRx;// Se agrega un nuevo Identificador
     5f0:	fb 01       	movw	r30, r22
     5f2:	e9 5f       	subi	r30, 0xF9	; 249
     5f4:	fa 4f       	sbci	r31, 0xFA	; 250
     5f6:	30 83       	st	Z, r19
				//Re-transmision bajada
				//transmit_sample_frame(trama_recibida.CargaUtil_802_15_4, 5);	
				ctrReTX=2;
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <ctrReTX+0x1>
     600:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <ctrReTX>
				longitud_IDTramas++;
     604:	6f 5f       	subi	r22, 0xFF	; 255
     606:	7f 4f       	sbci	r23, 0xFF	; 255
     608:	70 93 1a 02 	sts	0x021A, r23	; 0x80021a <longitud_IDTramas+0x1>
     60c:	60 93 19 02 	sts	0x0219, r22	; 0x800219 <longitud_IDTramas>
			}				
		}
		delay_ms(0);
     610:	62 e0       	ldi	r22, 0x02	; 2
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	21 df       	rcall	.-446    	; 0x45c <__portable_avr_delay_cycles>
		bmm_buffer_free(frame->buffer_header);//Elimina los datos del buffer, evita superpocicion.
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	9a 81       	ldd	r25, Y+2	; 0x02
     61e:	c8 d7       	rcall	.+3984   	; 0x15b0 <bmm_buffer_free>
}
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <usr_frame_transmitted_cb>:

void usr_frame_transmitted_cb(retval_t status, frame_info_t *frame)
{
     626:	08 95       	ret

00000628 <reverse>:
}
///////////////////////////////////////////////////////////////////////////////////

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
     628:	9b 01       	movw	r18, r22
     62a:	21 50       	subi	r18, 0x01	; 1
     62c:	31 09       	sbc	r19, r1
	while (i < j) {
     62e:	12 16       	cp	r1, r18
     630:	13 06       	cpc	r1, r19
     632:	84 f4       	brge	.+32     	; 0x654 <reverse+0x2c>
     634:	fc 01       	movw	r30, r24
     636:	e6 0f       	add	r30, r22
     638:	f7 1f       	adc	r31, r23
     63a:	dc 01       	movw	r26, r24
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
		temp = str[i];
     640:	4c 91       	ld	r20, X
		str[i] = str[j];
     642:	52 91       	ld	r21, -Z
     644:	5d 93       	st	X+, r21
		str[j] = temp;
     646:	40 83       	st	Z, r20
		i++;
     648:	01 96       	adiw	r24, 0x01	; 1
		j--;
     64a:	21 50       	subi	r18, 0x01	; 1
     64c:	31 09       	sbc	r19, r1
///////////////////////////////////////////////////////////////////////////////////

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
	while (i < j) {
     64e:	82 17       	cp	r24, r18
     650:	93 07       	cpc	r25, r19
     652:	b4 f3       	brlt	.-20     	; 0x640 <reverse+0x18>
     654:	08 95       	ret

00000656 <intToStr>:
		j--;
	}
}

int intToStr(int x, char str[], int d)
{
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	6b 01       	movw	r12, r22
     668:	8a 01       	movw	r16, r20
	int i = 0;
	while (x) {
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	99 f0       	breq	.+38     	; 0x694 <intToStr+0x3e>
     66e:	eb 01       	movw	r28, r22
     670:	e0 e0       	ldi	r30, 0x00	; 0
     672:	f0 e0       	ldi	r31, 0x00	; 0
		str[i++] = (x % 10) + '0';
     674:	0f 2e       	mov	r0, r31
     676:	fa e0       	ldi	r31, 0x0A	; 10
     678:	ef 2e       	mov	r14, r31
     67a:	f1 2c       	mov	r15, r1
     67c:	f0 2d       	mov	r31, r0
     67e:	31 96       	adiw	r30, 0x01	; 1
     680:	b7 01       	movw	r22, r14
     682:	0e 94 ed 1c 	call	0x39da	; 0x39da <__divmodhi4>
     686:	80 5d       	subi	r24, 0xD0	; 208
     688:	89 93       	st	Y+, r24
		x = x / 10;
     68a:	86 2f       	mov	r24, r22
     68c:	97 2f       	mov	r25, r23
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
     68e:	00 97       	sbiw	r24, 0x00	; 0
     690:	b1 f7       	brne	.-20     	; 0x67e <intToStr+0x28>
     692:	02 c0       	rjmp	.+4      	; 0x698 <intToStr+0x42>
	}
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
     694:	e0 e0       	ldi	r30, 0x00	; 0
     696:	f0 e0       	ldi	r31, 0x00	; 0
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     698:	e0 17       	cp	r30, r16
     69a:	f1 07       	cpc	r31, r17
     69c:	5c f4       	brge	.+22     	; 0x6b4 <intToStr+0x5e>
     69e:	ec 0d       	add	r30, r12
     6a0:	fd 1d       	adc	r31, r13
     6a2:	96 01       	movw	r18, r12
     6a4:	20 0f       	add	r18, r16
     6a6:	31 1f       	adc	r19, r17
	str[i++] = '0';
     6a8:	80 e3       	ldi	r24, 0x30	; 48
     6aa:	81 93       	st	Z+, r24
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     6ac:	e2 17       	cp	r30, r18
     6ae:	f3 07       	cpc	r31, r19
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <intToStr+0x54>
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <intToStr+0x60>
     6b4:	8f 01       	movw	r16, r30
	str[i++] = '0';
	
	reverse(str, i);
     6b6:	b8 01       	movw	r22, r16
     6b8:	c6 01       	movw	r24, r12
     6ba:	b6 df       	rcall	.-148    	; 0x628 <reverse>
	str[i] = '\0';
     6bc:	e6 01       	movw	r28, r12
     6be:	c0 0f       	add	r28, r16
     6c0:	d1 1f       	adc	r29, r17
     6c2:	18 82       	st	Y, r1
	return i;
}
     6c4:	c8 01       	movw	r24, r16
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	df 90       	pop	r13
     6d4:	cf 90       	pop	r12
     6d6:	08 95       	ret

000006d8 <ftoa>:

void ftoa(float n, char* res, int afterpoint)
{
     6d8:	2f 92       	push	r2
     6da:	3f 92       	push	r3
     6dc:	4f 92       	push	r4
     6de:	5f 92       	push	r5
     6e0:	6f 92       	push	r6
     6e2:	7f 92       	push	r7
     6e4:	8f 92       	push	r8
     6e6:	9f 92       	push	r9
     6e8:	af 92       	push	r10
     6ea:	bf 92       	push	r11
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	4b 01       	movw	r8, r22
     6fe:	5c 01       	movw	r10, r24
     700:	8a 01       	movw	r16, r20
     702:	e9 01       	movw	r28, r18
	// Extract integer part
	int ipart = (int)n;
     704:	0e 94 db 19 	call	0x33b6	; 0x33b6 <__fixsfsi>
     708:	6b 01       	movw	r12, r22
     70a:	7c 01       	movw	r14, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	b8 01       	movw	r22, r16
     712:	c6 01       	movw	r24, r12
     714:	a0 df       	rcall	.-192    	; 0x656 <intToStr>
     716:	1c 01       	movw	r2, r24
	
	// check for display option after point
	if (afterpoint != 0) {
     718:	20 97       	sbiw	r28, 0x00	; 0
     71a:	91 f1       	breq	.+100    	; 0x780 <ftoa+0xa8>
		res[i] = '.'; // add dot
     71c:	f8 01       	movw	r30, r16
     71e:	e8 0f       	add	r30, r24
     720:	f9 1f       	adc	r31, r25
     722:	8e e2       	ldi	r24, 0x2E	; 46
     724:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
     726:	be 01       	movw	r22, r28
     728:	0d 2e       	mov	r0, r29
     72a:	00 0c       	add	r0, r0
     72c:	88 0b       	sbc	r24, r24
     72e:	99 0b       	sbc	r25, r25
     730:	0e 94 0e 1a 	call	0x341c	; 0x341c <__floatsisf>
     734:	9b 01       	movw	r18, r22
     736:	ac 01       	movw	r20, r24
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	80 e2       	ldi	r24, 0x20	; 32
     73e:	91 e4       	ldi	r25, 0x41	; 65
     740:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <pow>
     744:	2b 01       	movw	r4, r22
     746:	3c 01       	movw	r6, r24
{
	// Extract integer part
	int ipart = (int)n;
	
	// Extract floating part
	float fpart = n - (float)ipart;
     748:	b6 01       	movw	r22, r12
     74a:	dd 0c       	add	r13, r13
     74c:	88 0b       	sbc	r24, r24
     74e:	99 0b       	sbc	r25, r25
     750:	0e 94 0e 1a 	call	0x341c	; 0x341c <__floatsisf>
     754:	9b 01       	movw	r18, r22
     756:	ac 01       	movw	r20, r24
     758:	c5 01       	movw	r24, r10
     75a:	b4 01       	movw	r22, r8
     75c:	0e 94 76 19 	call	0x32ec	; 0x32ec <__subsf3>
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
		
		intToStr((int)fpart, res + i + 1, afterpoint);
     760:	2f ef       	ldi	r18, 0xFF	; 255
     762:	22 1a       	sub	r2, r18
     764:	32 0a       	sbc	r3, r18
     766:	02 0d       	add	r16, r2
     768:	13 1d       	adc	r17, r3
     76a:	a3 01       	movw	r20, r6
     76c:	92 01       	movw	r18, r4
     76e:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__mulsf3>
     772:	0e 94 db 19 	call	0x33b6	; 0x33b6 <__fixsfsi>
     776:	dc 01       	movw	r26, r24
     778:	cb 01       	movw	r24, r22
     77a:	ae 01       	movw	r20, r28
     77c:	b8 01       	movw	r22, r16
     77e:	6b df       	rcall	.-298    	; 0x656 <intToStr>
	}
}
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	ff 90       	pop	r15
     78a:	ef 90       	pop	r14
     78c:	df 90       	pop	r13
     78e:	cf 90       	pop	r12
     790:	bf 90       	pop	r11
     792:	af 90       	pop	r10
     794:	9f 90       	pop	r9
     796:	8f 90       	pop	r8
     798:	7f 90       	pop	r7
     79a:	6f 90       	pop	r6
     79c:	5f 90       	pop	r5
     79e:	4f 90       	pop	r4
     7a0:	3f 90       	pop	r3
     7a2:	2f 90       	pop	r2
     7a4:	08 95       	ret

000007a6 <get_bat_sensor_data>:
////////////////////////////////////////////////////////////////////////////////////7
float get_bat_sensor_data(void)
{
	float bat_voltage;
	bat_voltage = reverse_float(convert_mv_to_v(tfa_get_batmon_voltage()));
     7a6:	0e 94 71 14 	call	0x28e2	; 0x28e2 <tfa_get_batmon_voltage>
	return bat_voltage;
     7aa:	bc 01       	movw	r22, r24
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 0c 1a 	call	0x3418	; 0x3418 <__floatunsisf>
     7b4:	2f e6       	ldi	r18, 0x6F	; 111
     7b6:	32 e1       	ldi	r19, 0x12	; 18
     7b8:	43 e8       	ldi	r20, 0x83	; 131
     7ba:	5a e3       	ldi	r21, 0x3A	; 58
     7bc:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <__mulsf3>
}
     7c0:	08 95       	ret

000007c2 <usr_wireless_app_task>:
void reverse(char* str, int len);
int intToStr(int x, char str[], int d);
void ftoa(float n, char* res, int afterpoint);

void usr_wireless_app_task(void)
{
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	e2 97       	sbiw	r28, 0x32	; 50
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61

	SRC_ADDR_=0x0001;// Identificador de direccion fuente(source)
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <SRC_ADDR_+0x1>
     7de:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <SRC_ADDR_>
	SRC_ADDR_ = CCPU_ENDIAN_TO_LE16(SRC_ADDR_);
	tal_pib_set(macShortAddress, (pib_value_t *)&SRC_ADDR_);// Asignacon de direccion fuente
     7e2:	6b e1       	ldi	r22, 0x1B	; 27
     7e4:	75 e0       	ldi	r23, 0x05	; 5
     7e6:	83 e5       	ldi	r24, 0x53	; 83
     7e8:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <tal_pib_set>
	ID_S=SRC_ADDR_; // Almacenamiento de direccion fuente previamente asignada
     7ec:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <SRC_ADDR_>
     7f0:	90 91 1c 05 	lds	r25, 0x051C	; 0x80051c <SRC_ADDR_+0x1>
     7f4:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <ID_S>
     7f8:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <ID_S+0x1>
	if (cargarDir==0)
     7fc:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <cargarDir>
     800:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <cargarDir+0x1>
     804:	23 2b       	or	r18, r19
     806:	81 f4       	brne	.+32     	; 0x828 <usr_wireless_app_task+0x66>
	{
		DST_ADDR_=0x0002;// Almacenamiento del identificador para alcanzar al siguiente nodo, se ingresa un valor inicial.
     808:	22 e0       	ldi	r18, 0x02	; 2
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	30 93 3b 05 	sts	0x053B, r19	; 0x80053b <DST_ADDR_+0x1>
     810:	20 93 3a 05 	sts	0x053A, r18	; 0x80053a <DST_ADDR_>
		ID_DEFAULT=DST_ADDR_;
     814:	30 93 3d 05 	sts	0x053D, r19	; 0x80053d <ID_DEFAULT+0x1>
     818:	20 93 3c 05 	sts	0x053C, r18	; 0x80053c <ID_DEFAULT>
		cargarDir=1;
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	30 93 12 02 	sts	0x0212, r19	; 0x800212 <cargarDir+0x1>
     824:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <cargarDir>
	}
	//Datos Iniciales 
	if (DatosNSIniciales==0)
     828:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <DatosNSIniciales>
     82c:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <DatosNSIniciales+0x1>
     830:	23 2b       	or	r18, r19
     832:	31 f4       	brne	.+12     	; 0x840 <usr_wireless_app_task+0x7e>
	{
		longitudListaNS=1;	
     834:	21 e0       	ldi	r18, 0x01	; 1
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	30 93 20 02 	sts	0x0220, r19	; 0x800220 <longitudListaNS+0x1>
     83c:	20 93 1f 02 	sts	0x021F, r18	; 0x80021f <longitudListaNS>
	}

	if (!ioport_get_pin_level(GPIO_PUSH_BUTTON_0))
     840:	65 99       	sbic	0x0c, 5	; 12
     842:	27 c0       	rjmp	.+78     	; 0x892 <usr_wireless_app_task+0xd0>
	{
		delay_ms(100); //Retardo para que funcione el pulsador
     844:	66 ed       	ldi	r22, 0xD6	; 214
     846:	78 e0       	ldi	r23, 0x08	; 8
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	07 de       	rcall	.-1010   	; 0x45c <__portable_avr_delay_cycles>
     84e:	84 e0       	ldi	r24, 0x04	; 4
     850:	8c b9       	out	0x0c, r24	; 12
		LED_Toggle(LED2);
		longitudListaNS=cont_NS;//Cambia de valor cuando es deshabilitado el if anterior
     852:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <cont_NS>
     856:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <cont_NS+0x1>
     85a:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <longitudListaNS+0x1>
     85e:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <longitudListaNS>
		//longitudListaNS=7;
		iniTx=1;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <iniTx+0x1>
     86a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <iniTx>
		// Obtener nivel de Bateria ////////////////////////////////////////////////////////////
		char charBateria[20]; // Almacena el nivel de la bateria comvertido en una cadena de caracteres
		float floatBateria=get_bat_sensor_data();// Obtiene en nivel de bateria
     86e:	9b df       	rcall	.-202    	; 0x7a6 <get_bat_sensor_data>
		ftoa(floatBateria, charBateria, 4);// Combierte el nivel de bateria de float a una cadena de caracteres hexadecimales
     870:	24 e0       	ldi	r18, 0x04	; 4
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	ae 01       	movw	r20, r28
     876:	4f 5f       	subi	r20, 0xFF	; 255
     878:	5f 4f       	sbci	r21, 0xFF	; 255
     87a:	2e df       	rcall	.-420    	; 0x6d8 <ftoa>
		NB[0]=(uint8_t)charBateria[0];// almacena los cuatro primeros valores de la cadena en el vector NB
     87c:	e0 e4       	ldi	r30, 0x40	; 64
     87e:	f5 e0       	ldi	r31, 0x05	; 5
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	80 83       	st	Z, r24
		NB[1]=(uint8_t)charBateria[1];
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	81 83       	std	Z+1, r24	; 0x01
		NB[2]=(uint8_t)charBateria[2];
     888:	8b 81       	ldd	r24, Y+3	; 0x03
     88a:	82 83       	std	Z+2, r24	; 0x02
		NB[3]=(uint8_t)charBateria[3];	
     88c:	8c 81       	ldd	r24, Y+4	; 0x04
     88e:	83 83       	std	Z+3, r24	; 0x03
     890:	58 c0       	rjmp	.+176    	; 0x942 <usr_wireless_app_task+0x180>
	}
	else if (iniTx==1)
     892:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <iniTx>
     896:	30 91 16 02 	lds	r19, 0x0216	; 0x800216 <iniTx+0x1>
     89a:	21 30       	cpi	r18, 0x01	; 1
     89c:	31 05       	cpc	r19, r1
     89e:	09 f0       	breq	.+2      	; 0x8a2 <usr_wireless_app_task+0xe0>
     8a0:	50 c0       	rjmp	.+160    	; 0x942 <usr_wireless_app_task+0x180>
	{ 	/////////////////////////// Construccion de la trama de subida a ser enviada  ///////////////////////////////////////////////
		iniTx=0;
     8a2:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <iniTx+0x1>
     8a6:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <iniTx>
		//count_1=1;
		int indice=0;
		uint8_t TRAMA[50];//Trama de subida
		//-------IDENTIFICADOR FUENTE---------------------------------------//
		TRAMA[0]=(uint8_t)(ID_S >> 8);
     8aa:	99 83       	std	Y+1, r25	; 0x01
		TRAMA[1]=(uint8_t)ID_S;
     8ac:	8a 83       	std	Y+2, r24	; 0x02
		//-------NIVEL DE BATERIA-------------------------------------------//	
		TRAMA[2]=NB[0];
     8ae:	e0 e4       	ldi	r30, 0x40	; 64
     8b0:	f5 e0       	ldi	r31, 0x05	; 5
     8b2:	80 81       	ld	r24, Z
     8b4:	8b 83       	std	Y+3, r24	; 0x03
		TRAMA[3]=NB[1];
     8b6:	81 81       	ldd	r24, Z+1	; 0x01
     8b8:	8c 83       	std	Y+4, r24	; 0x04
		TRAMA[4]=NB[2];		
     8ba:	82 81       	ldd	r24, Z+2	; 0x02
     8bc:	8d 83       	std	Y+5, r24	; 0x05
		TRAMA[5]=NB[3];	
     8be:	83 81       	ldd	r24, Z+3	; 0x03
     8c0:	8e 83       	std	Y+6, r24	; 0x06
			
		for (int i=0; i<longitudListaNS; i++)
     8c2:	60 91 1f 02 	lds	r22, 0x021F	; 0x80021f <longitudListaNS>
     8c6:	70 91 20 02 	lds	r23, 0x0220	; 0x800220 <longitudListaNS+0x1>
     8ca:	16 16       	cp	r1, r22
     8cc:	17 06       	cpc	r1, r23
     8ce:	f4 f4       	brge	.+60     	; 0x90c <usr_wireless_app_task+0x14a>
     8d0:	ae e1       	ldi	r26, 0x1E	; 30
     8d2:	b5 e0       	ldi	r27, 0x05	; 5
     8d4:	fe 01       	movw	r30, r28
     8d6:	31 96       	adiw	r30, 0x01	; 1
     8d8:	9b 01       	movw	r18, r22
     8da:	22 0f       	add	r18, r18
     8dc:	33 1f       	adc	r19, r19
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	2e 0f       	add	r18, r30
     8e4:	3f 1f       	adc	r19, r31
		{	
		//-------NIVEL DE SEÑAL--------------------------------------------//
			TRAMA[indice+6]=(uint8_t)(listaNS[i].NS >> 8);
     8e6:	8c 91       	ld	r24, X
     8e8:	11 96       	adiw	r26, 0x01	; 1
     8ea:	9c 91       	ld	r25, X
     8ec:	11 97       	sbiw	r26, 0x01	; 1
     8ee:	96 83       	std	Z+6, r25	; 0x06
			TRAMA[indice+7]=(uint8_t)listaNS[i].NS;
     8f0:	87 83       	std	Z+7, r24	; 0x07
		//-------IDENTIFICADOR DEL NIVEL DE SE�AL--------------------------//
			TRAMA[indice+8]=(uint8_t)(listaNS[i].ID_DIR_NS >> 8);
     8f2:	12 96       	adiw	r26, 0x02	; 2
     8f4:	8c 91       	ld	r24, X
     8f6:	12 97       	sbiw	r26, 0x02	; 2
     8f8:	13 96       	adiw	r26, 0x03	; 3
     8fa:	9c 91       	ld	r25, X
     8fc:	13 97       	sbiw	r26, 0x03	; 3
     8fe:	90 87       	std	Z+8, r25	; 0x08
			TRAMA[indice+9]=(uint8_t)listaNS[i].ID_DIR_NS;
     900:	81 87       	std	Z+9, r24	; 0x09
     902:	14 96       	adiw	r26, 0x04	; 4
     904:	34 96       	adiw	r30, 0x04	; 4
		TRAMA[2]=NB[0];
		TRAMA[3]=NB[1];
		TRAMA[4]=NB[2];		
		TRAMA[5]=NB[3];	
			
		for (int i=0; i<longitudListaNS; i++)
     906:	e2 17       	cp	r30, r18
     908:	f3 07       	cpc	r31, r19
     90a:	69 f7       	brne	.-38     	; 0x8e6 <usr_wireless_app_task+0x124>
			TRAMA[indice+8]=(uint8_t)(listaNS[i].ID_DIR_NS >> 8);
			TRAMA[indice+9]=(uint8_t)listaNS[i].ID_DIR_NS;
			
			indice=indice+4;
		}
		TRAMA[(longitudListaNS*4)+6]=0xFE;// CH de parada
     90c:	fb 01       	movw	r30, r22
     90e:	ee 0f       	add	r30, r30
     910:	ff 1f       	adc	r31, r31
     912:	ee 0f       	add	r30, r30
     914:	ff 1f       	adc	r31, r31
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	8c 0f       	add	r24, r28
     91c:	9d 1f       	adc	r25, r29
     91e:	e8 0f       	add	r30, r24
     920:	f9 1f       	adc	r31, r25
     922:	8e ef       	ldi	r24, 0xFE	; 254
     924:	86 83       	std	Z+6, r24	; 0x06
		DST_ADDR_=ID_DEFAULT;
     926:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <ID_DEFAULT>
     92a:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <ID_DEFAULT+0x1>
     92e:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <DST_ADDR_+0x1>
     932:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <DST_ADDR_>
		transmit_sample_frame(TRAMA, (longitudListaNS*4)+7);	
     936:	66 0f       	add	r22, r22
     938:	66 0f       	add	r22, r22
     93a:	69 5f       	subi	r22, 0xF9	; 249
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	28 d1       	rcall	.+592    	; 0xb92 <transmit_sample_frame>
	
		//crtfor=0;
	}
	//////////////////////////////////////////////////////////////////////////////
	if (ctrReTX==1)
     942:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <ctrReTX>
     946:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <ctrReTX+0x1>
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	91 05       	cpc	r25, r1
     94e:	91 f4       	brne	.+36     	; 0x974 <usr_wireless_app_task+0x1b2>
	{
		DST_ADDR_=ID_DEFAULT;		
     950:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <ID_DEFAULT>
     954:	90 91 3d 05 	lds	r25, 0x053D	; 0x80053d <ID_DEFAULT+0x1>
     958:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <DST_ADDR_+0x1>
     95c:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <DST_ADDR_>
		transmit_sample_frame(trama_recibida.CargaUtil_802_15_4, longitudTramaRX);
     960:	60 91 1b 02 	lds	r22, 0x021B	; 0x80021b <longitudTramaRX>
     964:	8f e9       	ldi	r24, 0x9F	; 159
     966:	94 e0       	ldi	r25, 0x04	; 4
     968:	14 d1       	rcall	.+552    	; 0xb92 <transmit_sample_frame>
		ctrReTX=0;
     96a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <ctrReTX+0x1>
     96e:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <ctrReTX>
     972:	1c c0       	rjmp	.+56     	; 0x9ac <usr_wireless_app_task+0x1ea>
	} 
	if (ctrReTX==2)
     974:	02 97       	sbiw	r24, 0x02	; 2
     976:	d1 f4       	brne	.+52     	; 0x9ac <usr_wireless_app_task+0x1ea>
	{
		int tiempo=(int)SRC_ADDR_;
		tiempo=tiempo*1;
		tiempoDuracionTimer=tiempo;
     978:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <SRC_ADDR_>
     97c:	90 91 1c 05 	lds	r25, 0x051C	; 0x80051c <SRC_ADDR_+0x1>
     980:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <tiempoDuracionTimer+0x1>
     984:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <tiempoDuracionTimer>
		start_timer1();
     988:	3e d0       	rcall	.+124    	; 0xa06 <start_timer1>
		ctrtem=1;	
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <ctrtem+0x1>
     992:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <ctrtem>
		ctrReTX=0;
     996:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <ctrReTX+0x1>
     99a:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <ctrReTX>
	}
	if (TimerFinaliza==1 && ctrtem==1)
     99e:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <TimerFinaliza>
     9a2:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <TimerFinaliza+0x1>
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	01 f5       	brne	.+64     	; 0x9ea <usr_wireless_app_task+0x228>
     9aa:	0c c0       	rjmp	.+24     	; 0x9c4 <usr_wireless_app_task+0x202>
     9ac:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <TimerFinaliza>
     9b0:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <TimerFinaliza+0x1>
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	c9 f4       	brne	.+50     	; 0x9ea <usr_wireless_app_task+0x228>
     9b8:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <ctrtem>
     9bc:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <ctrtem+0x1>
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	99 f4       	brne	.+38     	; 0x9ea <usr_wireless_app_task+0x228>
	{
		TimerFinaliza=0;
     9c4:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <TimerFinaliza+0x1>
     9c8:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <TimerFinaliza>
		ctrtem=0;
     9cc:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <ctrtem+0x1>
     9d0:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <ctrtem>
		stop_timer1();
     9d4:	38 d0       	rcall	.+112    	; 0xa46 <stop_timer1>
		DST_ADDR_=0xFFFF;/* siguiente salto */
     9d6:	8f ef       	ldi	r24, 0xFF	; 255
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	90 93 3b 05 	sts	0x053B, r25	; 0x80053b <DST_ADDR_+0x1>
     9de:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <DST_ADDR_>
		transmit_sample_frame(trama_recibida.CargaUtil_802_15_4, 5);
     9e2:	65 e0       	ldi	r22, 0x05	; 5
     9e4:	8f e9       	ldi	r24, 0x9F	; 159
     9e6:	94 e0       	ldi	r25, 0x04	; 4
	}

	delay_ms(10);
     9e8:	d4 d0       	rcall	.+424    	; 0xb92 <transmit_sample_frame>
     9ea:	66 e1       	ldi	r22, 0x16	; 22
     9ec:	74 e3       	ldi	r23, 0x34	; 52
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	34 dd       	rcall	.-1432   	; 0x45c <__portable_avr_delay_cycles>
}
     9f4:	e2 96       	adiw	r28, 0x32	; 50
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	0f be       	out	0x3f, r0	; 63
     9fe:	cd bf       	out	0x3d, r28	; 61
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret

00000a06 <start_timer1>:
 \brief This function starts a timer T-APP_TIMER with timeout TIMER_DURATION  with callback id app_timer_cb
 * New timers can be added by defeining ex. start_timer2 by adding a new timer id T_APP_TIMER2 and a different call back name based on the requirement ,
 * max no of timers to be added is based on *the  count  TOTAL_NUMBER_OF_TIMERS in conf_common_sw_timer.h
 */
void start_timer1(void)
{
     a06:	ef 92       	push	r14
     a08:	ff 92       	push	r15
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
	sw_timer_start(T_APP_TIMER1,TIMER_DURATION,SW_TIMEOUT_RELATIVE,(FUNC_PTR)app_timer_cb,NULL)	;
     a0e:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <tiempoDuracionTimer>
     a12:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <tiempoDuracionTimer+0x1>
     a16:	20 e4       	ldi	r18, 0x40	; 64
     a18:	32 e4       	ldi	r19, 0x42	; 66
     a1a:	4f e0       	ldi	r20, 0x0F	; 15
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulshisi3>
     a22:	ab 01       	movw	r20, r22
     a24:	bc 01       	movw	r22, r24
     a26:	e1 2c       	mov	r14, r1
     a28:	f1 2c       	mov	r15, r1
     a2a:	00 e2       	ldi	r16, 0x20	; 32
     a2c:	15 e0       	ldi	r17, 0x05	; 5
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <T_APP_TIMER1>
     a34:	a7 d2       	rcall	.+1358   	; 0xf84 <sw_timer_start>
}
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	08 95       	ret

00000a40 <app_timer_cb>:
/**
 \brief Callback called once the timer expires
*/
void app_timer_cb(void *parameter)
{
	usr_app_timer_cb(parameter);
     a40:	06 dd       	rcall	.-1524   	; 0x44e <usr_app_timer_cb>

	//Re-register the timer for the next time interval
	start_timer1();
     a42:	e1 cf       	rjmp	.-62     	; 0xa06 <start_timer1>
     a44:	08 95       	ret

00000a46 <stop_timer1>:
     a46:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <T_APP_TIMER1>
 * To add stop timer functions for other timer, add defenitions stop_timer2 with sw_timer_stop(NEW ID) inside it
 */
void stop_timer1(void)
{

	sw_timer_stop(T_APP_TIMER1);
     a4a:	06 c4       	rjmp	.+2060   	; 0x1258 <sw_timer_stop>
     a4c:	08 95       	ret

00000a4e <transmit_frame>:
		uint8_t src_addr_mode,
		uint8_t msdu_handle,
		uint8_t *payload,
		uint8_t payload_length,
		bool ack_req,csma_mode_t csma_mode ,bool frame_retry)
{
     a4e:	4f 92       	push	r4
     a50:	5f 92       	push	r5
     a52:	6f 92       	push	r6
     a54:	7f 92       	push	r7
     a56:	8f 92       	push	r8
     a58:	af 92       	push	r10
     a5a:	cf 92       	push	r12
     a5c:	ef 92       	push	r14
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 

	/* Set payload pointer. */     
	frame_ptr = temp_frame_ptr = (uint8_t *)tx_frame_info +
     a6a:	a9 e8       	ldi	r26, 0x89	; 137
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	ae 19       	sub	r26, r14
     a70:	b1 09       	sbc	r27, r1
     a72:	fd 01       	movw	r30, r26
     a74:	e9 5d       	subi	r30, 0xD9	; 217
     a76:	fd 4f       	sbci	r31, 0xFD	; 253
     a78:	3f 01       	movw	r6, r30

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     a7a:	ee 20       	and	r14, r14
     a7c:	79 f0       	breq	.+30     	; 0xa9c <transmit_frame+0x4e>
     a7e:	d8 01       	movw	r26, r16
     a80:	44 24       	eor	r4, r4
     a82:	4a 94       	dec	r4
     a84:	4e 0c       	add	r4, r14
     a86:	51 2c       	mov	r5, r1
     a88:	9f ef       	ldi	r25, 0xFF	; 255
     a8a:	49 1a       	sub	r4, r25
     a8c:	59 0a       	sbc	r5, r25
     a8e:	04 0d       	add	r16, r4
     a90:	15 1d       	adc	r17, r5
	*temp_frame_ptr++ = *(payload + i);
     a92:	9d 91       	ld	r25, X+
     a94:	91 93       	st	Z+, r25

	/*
	* Payload is stored to the end of the buffer avoiding payload
	* copying by TAL.
	*/
	for (i = 0; i < payload_length; i++) {
     a96:	a0 17       	cp	r26, r16
     a98:	b1 07       	cpc	r27, r17
     a9a:	d9 f7       	brne	.-10     	; 0xa92 <transmit_frame+0x44>
	*temp_frame_ptr++ = *(payload + i);
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
     a9c:	42 30       	cpi	r20, 0x02	; 2
     a9e:	61 f4       	brne	.+24     	; 0xab8 <transmit_frame+0x6a>
	uint16_t temp_value,fcf = 0;
	/* Get length of current frame. */

	tx_frame_info = (frame_info_t *)storage_buffer;
	/* Get length of current frame. */
	frame_length = (FRAME_OVERHEAD + payload_length); 
     aa0:	3b e0       	ldi	r19, 0x0B	; 11
     aa2:	3e 0d       	add	r19, r14
	}


	/* Source address */
	if (FCF_SHORT_ADDR == src_addr_mode) {
	frame_ptr -= SHORT_ADDR_LEN;
     aa4:	d3 01       	movw	r26, r6
	convert_16_bit_to_byte_array(tal_pib.ShortAddress, frame_ptr);
     aa6:	40 91 8d 05 	lds	r20, 0x058D	; 0x80058d <tal_pib+0xc>
     aaa:	50 91 8e 05 	lds	r21, 0x058E	; 0x80058e <tal_pib+0xd>
     aae:	5e 93       	st	-X, r21
     ab0:	4e 93       	st	-X, r20

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_SHORT_ADDR);
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	50 e8       	ldi	r21, 0x80	; 128
     ab6:	26 c0       	rjmp	.+76     	; 0xb04 <transmit_frame+0xb6>
	} else {
	frame_ptr -= EXT_ADDR_LEN;
     ab8:	d3 01       	movw	r26, r6
     aba:	18 97       	sbiw	r26, 0x08	; 8
	frame_length += FCF_2_SOURCE_ADDR_OFFSET;
     abc:	31 e1       	ldi	r19, 0x11	; 17
     abe:	3e 0d       	add	r19, r14

	convert_64_bit_to_byte_array(tal_pib.IeeeAddress, frame_ptr);
     ac0:	e1 e8       	ldi	r30, 0x81	; 129
     ac2:	f5 e0       	ldi	r31, 0x05	; 5
     ac4:	90 81       	ld	r25, Z
     ac6:	9c 93       	st	X, r25
     ac8:	91 81       	ldd	r25, Z+1	; 0x01
     aca:	11 96       	adiw	r26, 0x01	; 1
     acc:	9c 93       	st	X, r25
     ace:	11 97       	sbiw	r26, 0x01	; 1
     ad0:	92 81       	ldd	r25, Z+2	; 0x02
     ad2:	12 96       	adiw	r26, 0x02	; 2
     ad4:	9c 93       	st	X, r25
     ad6:	12 97       	sbiw	r26, 0x02	; 2
     ad8:	93 81       	ldd	r25, Z+3	; 0x03
     ada:	13 96       	adiw	r26, 0x03	; 3
     adc:	9c 93       	st	X, r25
     ade:	13 97       	sbiw	r26, 0x03	; 3
     ae0:	94 81       	ldd	r25, Z+4	; 0x04
     ae2:	14 96       	adiw	r26, 0x04	; 4
     ae4:	9c 93       	st	X, r25
     ae6:	14 97       	sbiw	r26, 0x04	; 4
     ae8:	95 81       	ldd	r25, Z+5	; 0x05
     aea:	15 96       	adiw	r26, 0x05	; 5
     aec:	9c 93       	st	X, r25
     aee:	15 97       	sbiw	r26, 0x05	; 5
     af0:	96 81       	ldd	r25, Z+6	; 0x06
     af2:	16 96       	adiw	r26, 0x06	; 6
     af4:	9c 93       	st	X, r25
     af6:	16 97       	sbiw	r26, 0x06	; 6
     af8:	97 81       	ldd	r25, Z+7	; 0x07
     afa:	17 96       	adiw	r26, 0x07	; 7
     afc:	9c 93       	st	X, r25
     afe:	17 97       	sbiw	r26, 0x07	; 7

	fcf |= FCF_SET_SOURCE_ADDR_MODE(FCF_LONG_ADDR);
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	50 ec       	ldi	r21, 0xC0	; 192
		temp_value = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
		convert_16_bit_to_byte_array(temp_value, frame_ptr);
		#endif

	/* Destination address */
	if (FCF_SHORT_ADDR == dst_addr_mode) {
     b04:	82 30       	cpi	r24, 0x02	; 2
     b06:	59 f4       	brne	.+22     	; 0xb1e <transmit_frame+0xd0>
		frame_ptr -= SHORT_ADDR_LEN;
		convert_16_bit_to_byte_array(*((uint16_t *)dst_addr),
     b08:	fb 01       	movw	r30, r22
     b0a:	80 81       	ld	r24, Z
     b0c:	91 81       	ldd	r25, Z+1	; 0x01
     b0e:	fd 01       	movw	r30, r26
     b10:	92 93       	st	-Z, r25
     b12:	82 93       	st	-Z, r24
     b14:	3f 01       	movw	r6, r30
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_SHORT_ADDR);
     b16:	ca 01       	movw	r24, r20
     b18:	80 64       	ori	r24, 0x40	; 64
     b1a:	98 60       	ori	r25, 0x08	; 8
     b1c:	0f c0       	rjmp	.+30     	; 0xb3c <transmit_frame+0xee>
	} else {
		frame_ptr -= EXT_ADDR_LEN;
     b1e:	3d 01       	movw	r6, r26
     b20:	f8 e0       	ldi	r31, 0x08	; 8
     b22:	6f 1a       	sub	r6, r31
     b24:	71 08       	sbc	r7, r1
		frame_length += PL_POS_DST_ADDR_START;
     b26:	3a 5f       	subi	r19, 0xFA	; 250

		convert_64_bit_to_byte_array(*((uint64_t *)dst_addr),
     b28:	88 e0       	ldi	r24, 0x08	; 8
     b2a:	fb 01       	movw	r30, r22
     b2c:	d3 01       	movw	r26, r6
     b2e:	01 90       	ld	r0, Z+
     b30:	0d 92       	st	X+, r0
     b32:	8a 95       	dec	r24
     b34:	e1 f7       	brne	.-8      	; 0xb2e <transmit_frame+0xe0>
				frame_ptr);

		fcf |= FCF_SET_DEST_ADDR_MODE(FCF_LONG_ADDR);
     b36:	ca 01       	movw	r24, r20
     b38:	80 64       	ori	r24, 0x40	; 64
     b3a:	9c 60       	ori	r25, 0x0C	; 12


	/* Destination PAN-Id */
	temp_value = CCPU_ENDIAN_TO_LE16(DST_PAN_ID);
	frame_ptr -= PAN_ID_LEN;
	convert_16_bit_to_byte_array(temp_value, frame_ptr);
     b3c:	4e ef       	ldi	r20, 0xFE	; 254
     b3e:	5a ec       	ldi	r21, 0xCA	; 202
     b40:	f3 01       	movw	r30, r6
     b42:	32 97       	sbiw	r30, 0x02	; 2
     b44:	51 83       	std	Z+1, r21	; 0x01
     b46:	40 83       	st	Z, r20

	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	20 83       	st	Z, r18

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
	if (ack_req) {
     b4c:	c1 10       	cpse	r12, r1
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <transmit_frame+0x106>
	/* Set DSN. */
	frame_ptr--;
	*frame_ptr = msdu_handle;

	/* Set the FCF. */
	fcf |= FCF_FRAMETYPE_DATA;
     b50:	81 60       	ori	r24, 0x01	; 1
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <transmit_frame+0x108>
	if (ack_req) {
	fcf |= FCF_ACK_REQUEST;
     b54:	81 62       	ori	r24, 0x21	; 33
	}

	frame_ptr -= FCF_LEN;
	convert_16_bit_to_byte_array(CCPU_ENDIAN_TO_LE16(fcf), frame_ptr);
     b56:	f3 01       	movw	r30, r6
     b58:	35 97       	sbiw	r30, 0x05	; 5
     b5a:	91 83       	std	Z+1, r25	; 0x01
     b5c:	80 83       	st	Z, r24

	/* First element shall be length of PHY frame. */
	frame_ptr--;
	*frame_ptr = frame_length;
     b5e:	d3 01       	movw	r26, r6
     b60:	16 97       	sbiw	r26, 0x06	; 6
     b62:	3c 93       	st	X, r19

	/* Finished building of frame. */
	tx_frame_info->mpdu = frame_ptr;
     b64:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <storage_buffer+0x8>
     b68:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <storage_buffer+0x7>

	return(tal_tx_frame(tx_frame_info, csma_mode, frame_retry));
     b6c:	48 2d       	mov	r20, r8
     b6e:	6a 2d       	mov	r22, r10
     b70:	87 e2       	ldi	r24, 0x27	; 39
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	0e 94 77 13 	call	0x26ee	; 0x26ee <tal_tx_frame>
}
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ef 90       	pop	r14
     b82:	cf 90       	pop	r12
     b84:	af 90       	pop	r10
     b86:	8f 90       	pop	r8
     b88:	7f 90       	pop	r7
     b8a:	6f 90       	pop	r6
     b8c:	5f 90       	pop	r5
     b8e:	4f 90       	pop	r4
     b90:	08 95       	ret

00000b92 <transmit_sample_frame>:
 * \brief This function transmits a sample data frame 
 * \param payload address of the payload to be transmitted
 * \payload_length Length of the payload to be trasnmitted *
 */
void transmit_sample_frame(uint8_t* payload,uint8_t payload_length) 
{
     b92:	8f 92       	push	r8
     b94:	af 92       	push	r10
     b96:	cf 92       	push	r12
     b98:	ef 92       	push	r14
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	1f 92       	push	r1
     ba4:	1f 92       	push	r1
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
	static uint16_t seq_num = 0;   
	bool ack_req = ACK_REQ;
	bool frame_retry = FRAME_RETRY;
	csma_mode_t csma_mode = CSMA_MODE;
	uint16_t dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)DST_ADDR);
     baa:	20 91 3a 05 	lds	r18, 0x053A	; 0x80053a <DST_ADDR_>
     bae:	30 91 3b 05 	lds	r19, 0x053B	; 0x80053b <DST_ADDR_+0x1>
     bb2:	3a 83       	std	Y+2, r19	; 0x02
     bb4:	29 83       	std	Y+1, r18	; 0x01

	transmit_frame(
		FCF_SHORT_ADDR,
		(uint8_t*)&dst_addr,
		FCF_SHORT_ADDR,
		seq_num++,
     bb6:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <seq_num.3071>
     bba:	30 91 26 02 	lds	r19, 0x0226	; 0x800226 <seq_num.3071+0x1>
     bbe:	a9 01       	movw	r20, r18
     bc0:	4f 5f       	subi	r20, 0xFF	; 255
     bc2:	5f 4f       	sbci	r21, 0xFF	; 255
     bc4:	50 93 26 02 	sts	0x0226, r21	; 0x800226 <seq_num.3071+0x1>
     bc8:	40 93 25 02 	sts	0x0225, r20	; 0x800225 <seq_num.3071>
	bool ack_req = ACK_REQ;
	bool frame_retry = FRAME_RETRY;
	csma_mode_t csma_mode = CSMA_MODE;
	uint16_t dst_addr = CCPU_ENDIAN_TO_LE16((uint16_t)DST_ADDR);

	transmit_frame(
     bcc:	81 2c       	mov	r8, r1
     bce:	68 94       	set
     bd0:	aa 24       	eor	r10, r10
     bd2:	a1 f8       	bld	r10, 1
     bd4:	c1 2c       	mov	r12, r1
     bd6:	e6 2e       	mov	r14, r22
     bd8:	8c 01       	movw	r16, r24
     bda:	42 e0       	ldi	r20, 0x02	; 2
     bdc:	be 01       	movw	r22, r28
     bde:	6f 5f       	subi	r22, 0xFF	; 255
     be0:	7f 4f       	sbci	r23, 0xFF	; 255
     be2:	82 e0       	ldi	r24, 0x02	; 2
     be4:	34 df       	rcall	.-408    	; 0xa4e <transmit_frame>
		payload_length,
		ack_req,
		csma_mode,
		frame_retry);

}
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ef 90       	pop	r14
     bf4:	cf 90       	pop	r12
     bf6:	af 90       	pop	r10
     bf8:	8f 90       	pop	r8
     bfa:	08 95       	ret

00000bfc <init_data_reception>:
		   bool mode = true;
		   tal_rxaack_prom_mode_ctrl(true);
		   tal_pib_set(macPromiscuousMode, (pib_value_t *)&mode);
       #endif
       /*RX_AACK_ON Mode is enabled if Promiscuous Mode is not used,else RX is switched on in RX_ON Mode*/
       tal_rx_enable(PHY_RX_ON); 
     bfc:	86 e0       	ldi	r24, 0x06	; 6
     bfe:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <tal_rx_enable>
     c02:	08 95       	ret

00000c04 <wireless_init>:

/**
 * \brief This Function initializes the Wireless Module and board components i.e clock,irq etc
 */
void wireless_init(void)
{
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	00 d0       	rcall	.+0      	; 0xc0a <wireless_init+0x6>
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <wireless_init+0x8>
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
	/*Initialize IRQ*/
	irq_initialize_vectors();

  sysclk_init();
     c10:	42 d0       	rcall	.+132    	; 0xc96 <sysclk_init>

	/* Initialize the board.
	 * The board-specific conf_board.h file contains the configuration of
	 * the board initialization.
	 */
	board_init();
     c12:	34 d0       	rcall	.+104    	; 0xc7c <board_init>


	/*Initialize the Stack SW Timer*/
	sw_timer_init();
     c14:	25 d4       	rcall	.+2122   	; 0x1460 <sw_timer_init>
     c16:	f9 d7       	rcall	.+4082   	; 0x1c0a <tal_init>
	
	/*Initialize the TAL Layer*/
	if(tal_init()!= MAC_SUCCESS)
     c18:	81 11       	cpse	r24, r1
     c1a:	ff cf       	rjmp	.-2      	; 0xc1a <wireless_init+0x16>
     c1c:	78 94       	sei
     c1e:	1a 82       	std	Y+2, r1	; 0x02
	{
	//Error in Initializing the TAL Layer
	app_alert();	
	}
	cpu_irq_enable();
     c20:	19 82       	std	Y+1, r1	; 0x01
	
	uint16_t src_addr = CCPU_ENDIAN_TO_LE16(SRC_ADDR);
     c22:	8e ef       	ldi	r24, 0xFE	; 254
     c24:	9a ec       	ldi	r25, 0xCA	; 202
	uint16_t pan_id = CCPU_ENDIAN_TO_LE16(SRC_PAN_ID);
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
     c2a:	8c e0       	ldi	r24, 0x0C	; 12
     c2c:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t channel = CHANNEL_TRANSMIT_RECEIVE;
     c2e:	1e 82       	std	Y+6, r1	; 0x06
     c30:	be 01       	movw	r22, r28
	uint8_t channel_page = CHANNEL_PAGE_TRANSMIT_RECEIVE;
     c32:	6f 5f       	subi	r22, 0xFF	; 255
	
	/* Set Default address. */
	tal_pib_set(macShortAddress, (pib_value_t *)&src_addr);
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	83 e5       	ldi	r24, 0x53	; 83
     c38:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <tal_pib_set>
     c3c:	be 01       	movw	r22, r28
     c3e:	6d 5f       	subi	r22, 0xFD	; 253

	/* Set PAN ID. */
	tal_pib_set(macPANId, (pib_value_t *)&pan_id);
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
     c42:	80 e5       	ldi	r24, 0x50	; 80
     c44:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <tal_pib_set>
     c48:	be 01       	movw	r22, r28
     c4a:	6b 5f       	subi	r22, 0xFB	; 251

	/* Set channel. */ /* Channel 11  is set as default in tal_init() */
	tal_pib_set(phyCurrentChannel, (pib_value_t *)&channel);
     c4c:	7f 4f       	sbci	r23, 0xFF	; 255
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <tal_pib_set>
     c54:	be 01       	movw	r22, r28
     c56:	6a 5f       	subi	r22, 0xFA	; 250
	
	/* Set Channel Page */ /* Channel Page 0  is set as default in tal_init() */
	tal_pib_set(phyCurrentPage,(pib_value_t *)&channel_page);
     c58:	7f 4f       	sbci	r23, 0xFF	; 255
     c5a:	84 e0       	ldi	r24, 0x04	; 4
     c5c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <tal_pib_set>
     c60:	62 e0       	ldi	r22, 0x02	; 2
     c62:	80 e0       	ldi	r24, 0x00	; 0
    {
	    tal_ant_div_config(ANT_DIVERSITY_ENABLE,ANTENNA_DEFAULT);
    }
    else
    {
	    tal_ant_div_config(ANT_DIVERSITY_DISABLE,ANT_SELECT); 
     c64:	0e 94 b3 13 	call	0x2766	; 0x2766 <tal_ant_div_config>
     c68:	c9 df       	rcall	.-110    	; 0xbfc <init_data_reception>
    }
    #endif


	init_data_reception();
     c6a:	26 96       	adiw	r28, 0x06	; 6
     c6c:	0f b6       	in	r0, 0x3f	; 63

}
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <board_init>:
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     c7c:	8d b1       	in	r24, 0x0d	; 13
     c7e:	8f 7d       	andi	r24, 0xDF	; 223
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     c80:	9e b1       	in	r25, 0x0e	; 14
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     c82:	5e 9a       	sbi	0x0b, 6	; 11
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     c84:	56 9a       	sbi	0x0a, 6	; 10
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     c86:	a2 9a       	sbi	0x14, 2	; 20
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     c88:	9a 9a       	sbi	0x13, 2	; 19
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
     c8a:	94 62       	ori	r25, 0x24	; 36
     c8c:	9e b9       	out	0x0e, r25	; 14
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
     c8e:	84 60       	ori	r24, 0x04	; 4
     c90:	8d b9       	out	0x0d, r24	; 13
     c92:	08 95       	ret

00000c94 <modules_init>:
	ioport_configure_pin(LED2, IOPORT_DIR_OUTPUT | IOPORT_INIT_HIGH);
	
}

void modules_init(void)
{
     c94:	08 95       	ret

00000c96 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	1f 92       	push	r1
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7c0064>
     ca6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7c0065>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     caa:	8f b7       	in	r24, 0x3f	; 63
     cac:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     cae:	f8 94       	cli
	return flags;
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     cb2:	5f 93       	push	r21
     cb4:	50 e8       	ldi	r21, 0x80	; 128
     cb6:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
     cc0:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cc2:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     cc4:	0f 90       	pop	r0
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	1f 92       	push	r1
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cd6:	9f b7       	in	r25, 0x3f	; 63
     cd8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     cda:	f8 94       	cli
	return flags;
     cdc:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     cde:	82 30       	cpi	r24, 0x02	; 2
     ce0:	40 f4       	brcc	.+16     	; 0xcf2 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     ce2:	e8 2f       	mov	r30, r24
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	ec 59       	subi	r30, 0x9C	; 156
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	60 95       	com	r22
     cec:	80 81       	ld	r24, Z
     cee:	68 23       	and	r22, r24
     cf0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cf2:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     cf4:	0f 90       	pop	r0
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret

00000cfc <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	1f 92       	push	r1
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d06:	9f b7       	in	r25, 0x3f	; 63
     d08:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     d0a:	f8 94       	cli
	return flags;
     d0c:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     d0e:	82 30       	cpi	r24, 0x02	; 2
     d10:	38 f4       	brcc	.+14     	; 0xd20 <sysclk_disable_module+0x24>
		*(reg + port) |= id;
     d12:	e8 2f       	mov	r30, r24
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	ec 59       	subi	r30, 0x9C	; 156
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	80 81       	ld	r24, Z
     d1c:	68 2b       	or	r22, r24
     d1e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d20:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     d22:	0f 90       	pop	r0
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <hw_expiry_cb>:
uint32_t sw_timer_next_timer_expiry_duration(void)
{
	return ((NO_TIMER ==
	       running_timer_queue_head) ? false : (sw_timer_get_residual_time(
	       running_timer_queue_head)));
}
     d2a:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <running_timers>
     d2e:	88 23       	and	r24, r24
     d30:	19 f0       	breq	.+6      	; 0xd38 <hw_expiry_cb+0xe>
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <timer_trigger>
     d38:	08 95       	ret

00000d3a <hw_overflow_cb>:
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	1f 92       	push	r1
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <sys_time>
     d4a:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <sys_time+0x1>
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	90 93 45 05 	sts	0x0545, r25	; 0x800545 <sys_time+0x1>
     d54:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <sys_time>
     d58:	8f b7       	in	r24, 0x3f	; 63
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	f8 94       	cli
     d5e:	19 81       	ldd	r17, Y+1	; 0x01
     d60:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <running_timer_queue_head>
     d64:	8f 3f       	cpi	r24, 0xFF	; 255
     d66:	e9 f1       	breq	.+122    	; 0xde2 <hw_overflow_cb+0xa8>
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	fc 01       	movw	r30, r24
     d6c:	ee 0f       	add	r30, r30
     d6e:	ff 1f       	adc	r31, r31
     d70:	9c 01       	movw	r18, r24
     d72:	22 0f       	add	r18, r18
     d74:	33 1f       	adc	r19, r19
     d76:	22 0f       	add	r18, r18
     d78:	33 1f       	adc	r19, r19
     d7a:	22 0f       	add	r18, r18
     d7c:	33 1f       	adc	r19, r19
     d7e:	e2 0f       	add	r30, r18
     d80:	f3 1f       	adc	r31, r19
     d82:	ea 5b       	subi	r30, 0xBA	; 186
     d84:	fa 4f       	sbci	r31, 0xFA	; 250
     d86:	21 85       	ldd	r18, Z+9	; 0x09
     d88:	21 11       	cpse	r18, r1
     d8a:	2b c0       	rjmp	.+86     	; 0xde2 <hw_overflow_cb+0xa8>
     d8c:	fc 01       	movw	r30, r24
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	e8 0f       	add	r30, r24
     da0:	f9 1f       	adc	r31, r25
     da2:	ea 5b       	subi	r30, 0xBA	; 186
     da4:	fa 4f       	sbci	r31, 0xFA	; 250
     da6:	80 81       	ld	r24, Z
     da8:	91 81       	ldd	r25, Z+1	; 0x01
     daa:	a2 81       	ldd	r26, Z+2	; 0x02
     dac:	b3 81       	ldd	r27, Z+3	; 0x03
     dae:	20 91 44 05 	lds	r18, 0x0544	; 0x800544 <sys_time>
     db2:	30 91 45 05 	lds	r19, 0x0545	; 0x800545 <sys_time+0x1>
     db6:	2a 17       	cp	r18, r26
     db8:	3b 07       	cpc	r19, r27
     dba:	99 f4       	brne	.+38     	; 0xde2 <hw_overflow_cb+0xa8>
     dbc:	80 da       	rcall	.-2816   	; 0x2be <common_tc_delay>
     dbe:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <running_timer_queue_head>
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	fc 01       	movw	r30, r24
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	e8 0f       	add	r30, r24
     dd8:	f9 1f       	adc	r31, r25
     dda:	ea 5b       	subi	r30, 0xBA	; 186
     ddc:	fa 4f       	sbci	r31, 0xFA	; 250
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	81 87       	std	Z+9, r24	; 0x09
     de2:	1f bf       	out	0x3f, r17	; 63
     de4:	0f 90       	pop	r0
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	08 95       	ret

00000dee <load_hw_timer>:
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	c8 2f       	mov	r28, r24
     df8:	8f 3f       	cpi	r24, 0xFF	; 255
     dfa:	09 f4       	brne	.+2      	; 0xdfe <load_hw_timer+0x10>
     dfc:	60 c0       	rjmp	.+192    	; 0xebe <load_hw_timer+0xd0>
     dfe:	00 91 44 05 	lds	r16, 0x0544	; 0x800544 <sys_time>
     e02:	10 91 45 05 	lds	r17, 0x0545	; 0x800545 <sys_time+0x1>
     e06:	18 da       	rcall	.-3024   	; 0x238 <common_tc_read_count>
     e08:	40 91 44 05 	lds	r20, 0x0544	; 0x800544 <sys_time>
     e0c:	50 91 45 05 	lds	r21, 0x0545	; 0x800545 <sys_time+0x1>
     e10:	04 17       	cp	r16, r20
     e12:	15 07       	cpc	r17, r21
     e14:	a1 f7       	brne	.-24     	; 0xdfe <load_hw_timer+0x10>
     e16:	d0 e0       	ldi	r29, 0x00	; 0
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	fe 01       	movw	r30, r28
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	9e 01       	movw	r18, r28
     e24:	22 0f       	add	r18, r18
     e26:	33 1f       	adc	r19, r19
     e28:	22 0f       	add	r18, r18
     e2a:	33 1f       	adc	r19, r19
     e2c:	22 0f       	add	r18, r18
     e2e:	33 1f       	adc	r19, r19
     e30:	e2 0f       	add	r30, r18
     e32:	f3 1f       	adc	r31, r19
     e34:	ea 5b       	subi	r30, 0xBA	; 186
     e36:	fa 4f       	sbci	r31, 0xFA	; 250
     e38:	ba 01       	movw	r22, r20
     e3a:	55 27       	eor	r21, r21
     e3c:	44 27       	eor	r20, r20
     e3e:	a0 e0       	ldi	r26, 0x00	; 0
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	48 2b       	or	r20, r24
     e44:	59 2b       	or	r21, r25
     e46:	6a 2b       	or	r22, r26
     e48:	7b 2b       	or	r23, r27
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	a2 81       	ldd	r26, Z+2	; 0x02
     e50:	b3 81       	ldd	r27, Z+3	; 0x03
     e52:	84 1b       	sub	r24, r20
     e54:	95 0b       	sbc	r25, r21
     e56:	a6 0b       	sbc	r26, r22
     e58:	b7 0b       	sbc	r27, r23
     e5a:	8f 3f       	cpi	r24, 0xFF	; 255
     e5c:	2f ef       	ldi	r18, 0xFF	; 255
     e5e:	92 07       	cpc	r25, r18
     e60:	a2 07       	cpc	r26, r18
     e62:	2f e7       	ldi	r18, 0x7F	; 127
     e64:	b2 07       	cpc	r27, r18
     e66:	38 f5       	brcc	.+78     	; 0xeb6 <load_hw_timer+0xc8>
     e68:	9e 01       	movw	r18, r28
     e6a:	22 0f       	add	r18, r18
     e6c:	33 1f       	adc	r19, r19
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	22 0f       	add	r18, r18
     e74:	33 1f       	adc	r19, r19
     e76:	fe 01       	movw	r30, r28
     e78:	ee 0f       	add	r30, r30
     e7a:	ff 1f       	adc	r31, r31
     e7c:	e2 0f       	add	r30, r18
     e7e:	f3 1f       	adc	r31, r19
     e80:	ea 5b       	subi	r30, 0xBA	; 186
     e82:	fa 4f       	sbci	r31, 0xFA	; 250
     e84:	21 85       	ldd	r18, Z+9	; 0x09
     e86:	21 11       	cpse	r18, r1
     e88:	1b c0       	rjmp	.+54     	; 0xec0 <load_hw_timer+0xd2>
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	21 e0       	ldi	r18, 0x01	; 1
     e8e:	a2 07       	cpc	r26, r18
     e90:	b1 05       	cpc	r27, r1
     e92:	b0 f4       	brcc	.+44     	; 0xec0 <load_hw_timer+0xd2>
     e94:	14 da       	rcall	.-3032   	; 0x2be <common_tc_delay>
     e96:	ce 01       	movw	r24, r28
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	cc 0f       	add	r28, r28
     e9e:	dd 1f       	adc	r29, r29
     ea0:	cc 0f       	add	r28, r28
     ea2:	dd 1f       	adc	r29, r29
     ea4:	cc 0f       	add	r28, r28
     ea6:	dd 1f       	adc	r29, r29
     ea8:	c8 0f       	add	r28, r24
     eaa:	d9 1f       	adc	r29, r25
     eac:	ca 5b       	subi	r28, 0xBA	; 186
     eae:	da 4f       	sbci	r29, 0xFA	; 250
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	89 87       	std	Y+9, r24	; 0x09
     eb4:	05 c0       	rjmp	.+10     	; 0xec0 <load_hw_timer+0xd2>
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <timer_trigger>
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <load_hw_timer+0xd2>
     ebe:	e4 d9       	rcall	.-3128   	; 0x288 <common_tc_compare_stop>
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	08 95       	ret

00000eca <internal_timer_handler>:
     eca:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <timer_trigger>
     ece:	88 23       	and	r24, r24
     ed0:	09 f4       	brne	.+2      	; 0xed4 <internal_timer_handler+0xa>
     ed2:	57 c0       	rjmp	.+174    	; 0xf82 <internal_timer_handler+0xb8>
     ed4:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <timer_trigger>
     ed8:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <running_timers>
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <internal_timer_handler+0x18>
     ee0:	50 c0       	rjmp	.+160    	; 0xf82 <internal_timer_handler+0xb8>
     ee2:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <expired_timer_queue_head>
     ee6:	8f 3f       	cpi	r24, 0xFF	; 255
     ee8:	59 f4       	brne	.+22     	; 0xf00 <internal_timer_handler+0x36>
     eea:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <expired_timer_queue_tail>
     eee:	8f 3f       	cpi	r24, 0xFF	; 255
     ef0:	39 f4       	brne	.+14     	; 0xf00 <internal_timer_handler+0x36>
     ef2:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <running_timer_queue_head>
     ef6:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <expired_timer_queue_tail>
     efa:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <expired_timer_queue_head>
     efe:	15 c0       	rjmp	.+42     	; 0xf2a <internal_timer_handler+0x60>
     f00:	20 91 b5 02 	lds	r18, 0x02B5	; 0x8002b5 <running_timer_queue_head>
     f04:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <expired_timer_queue_tail>
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	fc 01       	movw	r30, r24
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	e8 0f       	add	r30, r24
     f1e:	f9 1f       	adc	r31, r25
     f20:	ea 5b       	subi	r30, 0xBA	; 186
     f22:	fa 4f       	sbci	r31, 0xFA	; 250
     f24:	20 87       	std	Z+8, r18	; 0x08
     f26:	20 93 b3 02 	sts	0x02B3, r18	; 0x8002b3 <expired_timer_queue_tail>
     f2a:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <running_timer_queue_head>
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	fc 01       	movw	r30, r24
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	e8 0f       	add	r30, r24
     f44:	f9 1f       	adc	r31, r25
     f46:	ea 5b       	subi	r30, 0xBA	; 186
     f48:	fa 4f       	sbci	r31, 0xFA	; 250
     f4a:	80 85       	ldd	r24, Z+8	; 0x08
     f4c:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <running_timer_queue_head>
     f50:	20 91 b3 02 	lds	r18, 0x02B3	; 0x8002b3 <expired_timer_queue_tail>
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	f9 01       	movw	r30, r18
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	22 0f       	add	r18, r18
     f5e:	33 1f       	adc	r19, r19
     f60:	22 0f       	add	r18, r18
     f62:	33 1f       	adc	r19, r19
     f64:	22 0f       	add	r18, r18
     f66:	33 1f       	adc	r19, r19
     f68:	e2 0f       	add	r30, r18
     f6a:	f3 1f       	adc	r31, r19
     f6c:	ea 5b       	subi	r30, 0xBA	; 186
     f6e:	fa 4f       	sbci	r31, 0xFA	; 250
     f70:	9f ef       	ldi	r25, 0xFF	; 255
     f72:	90 87       	std	Z+8, r25	; 0x08
     f74:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <running_timers>
     f78:	91 50       	subi	r25, 0x01	; 1
     f7a:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <running_timers>
     f7e:	91 11       	cpse	r25, r1
     f80:	36 cf       	rjmp	.-404    	; 0xdee <load_hw_timer>
     f82:	08 95       	ret

00000f84 <sw_timer_start>:
     f84:	2f 92       	push	r2
     f86:	3f 92       	push	r3
     f88:	4f 92       	push	r4
     f8a:	5f 92       	push	r5
     f8c:	6f 92       	push	r6
     f8e:	7f 92       	push	r7
     f90:	8f 92       	push	r8
     f92:	9f 92       	push	r9
     f94:	af 92       	push	r10
     f96:	bf 92       	push	r11
     f98:	cf 92       	push	r12
     f9a:	df 92       	push	r13
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	27 97       	sbiw	r28, 0x07	; 7
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	38 2e       	mov	r3, r24
     fba:	4a 01       	movw	r8, r20
     fbc:	5b 01       	movw	r10, r22
     fbe:	22 2e       	mov	r2, r18
     fc0:	ff 82       	std	Y+7, r15	; 0x07
     fc2:	ee 82       	std	Y+6, r14	; 0x06
     fc4:	68 94       	set
     fc6:	44 24       	eor	r4, r4
     fc8:	42 f8       	bld	r4, 2
     fca:	48 16       	cp	r4, r24
     fcc:	08 f4       	brcc	.+2      	; 0xfd0 <sw_timer_start+0x4c>
     fce:	ff c0       	rjmp	.+510    	; 0x11ce <sw_timer_start+0x24a>
     fd0:	01 15       	cp	r16, r1
     fd2:	11 05       	cpc	r17, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <sw_timer_start+0x54>
     fd6:	fd c0       	rjmp	.+506    	; 0x11d2 <sw_timer_start+0x24e>
     fd8:	c8 2e       	mov	r12, r24
     fda:	d1 2c       	mov	r13, r1
     fdc:	f6 01       	movw	r30, r12
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	c6 01       	movw	r24, r12
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	e8 0f       	add	r30, r24
     ff2:	f9 1f       	adc	r31, r25
     ff4:	ea 5b       	subi	r30, 0xBA	; 186
     ff6:	fa 4f       	sbci	r31, 0xFA	; 250
     ff8:	84 81       	ldd	r24, Z+4	; 0x04
     ffa:	95 81       	ldd	r25, Z+5	; 0x05
     ffc:	89 2b       	or	r24, r25
     ffe:	09 f0       	breq	.+2      	; 0x1002 <sw_timer_start+0x7e>
    1000:	ea c0       	rjmp	.+468    	; 0x11d6 <sw_timer_start+0x252>
    1002:	e0 90 44 05 	lds	r14, 0x0544	; 0x800544 <sys_time>
    1006:	f0 90 45 05 	lds	r15, 0x0545	; 0x800545 <sys_time+0x1>
    100a:	16 d9       	rcall	.-3540   	; 0x238 <common_tc_read_count>
    100c:	40 91 44 05 	lds	r20, 0x0544	; 0x800544 <sys_time>
    1010:	50 91 45 05 	lds	r21, 0x0545	; 0x800545 <sys_time+0x1>
    1014:	e4 16       	cp	r14, r20
    1016:	f5 06       	cpc	r15, r21
    1018:	a1 f7       	brne	.-24     	; 0x1002 <sw_timer_start+0x7e>
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	ba 01       	movw	r22, r20
    1020:	55 27       	eor	r21, r21
    1022:	44 27       	eor	r20, r20
    1024:	2c 01       	movw	r4, r24
    1026:	61 2c       	mov	r6, r1
    1028:	71 2c       	mov	r7, r1
    102a:	4a 82       	std	Y+2, r4	; 0x02
    102c:	5b 82       	std	Y+3, r5	; 0x03
    102e:	6c 82       	std	Y+4, r6	; 0x04
    1030:	7d 82       	std	Y+5, r7	; 0x05
    1032:	44 2a       	or	r4, r20
    1034:	55 2a       	or	r5, r21
    1036:	66 2a       	or	r6, r22
    1038:	77 2a       	or	r7, r23
    103a:	22 20       	and	r2, r2
    103c:	21 f0       	breq	.+8      	; 0x1046 <sw_timer_start+0xc2>
    103e:	21 e0       	ldi	r18, 0x01	; 1
    1040:	22 16       	cp	r2, r18
    1042:	91 f0       	breq	.+36     	; 0x1068 <sw_timer_start+0xe4>
    1044:	ca c0       	rjmp	.+404    	; 0x11da <sw_timer_start+0x256>
    1046:	b5 01       	movw	r22, r10
    1048:	a4 01       	movw	r20, r8
    104a:	40 58       	subi	r20, 0x80	; 128
    104c:	51 09       	sbc	r21, r1
    104e:	61 09       	sbc	r22, r1
    1050:	71 09       	sbc	r23, r1
    1052:	40 38       	cpi	r20, 0x80	; 128
    1054:	5f 4f       	sbci	r21, 0xFF	; 255
    1056:	6f 4f       	sbci	r22, 0xFF	; 255
    1058:	7f 47       	sbci	r23, 0x7F	; 127
    105a:	08 f0       	brcs	.+2      	; 0x105e <sw_timer_start+0xda>
    105c:	c0 c0       	rjmp	.+384    	; 0x11de <sw_timer_start+0x25a>
    105e:	84 0c       	add	r8, r4
    1060:	95 1c       	adc	r9, r5
    1062:	a6 1c       	adc	r10, r6
    1064:	b7 1c       	adc	r11, r7
    1066:	10 c0       	rjmp	.+32     	; 0x1088 <sw_timer_start+0x104>
    1068:	b5 01       	movw	r22, r10
    106a:	a4 01       	movw	r20, r8
    106c:	40 58       	subi	r20, 0x80	; 128
    106e:	51 09       	sbc	r21, r1
    1070:	61 09       	sbc	r22, r1
    1072:	71 09       	sbc	r23, r1
    1074:	44 19       	sub	r20, r4
    1076:	55 09       	sbc	r21, r5
    1078:	66 09       	sbc	r22, r6
    107a:	77 09       	sbc	r23, r7
    107c:	40 38       	cpi	r20, 0x80	; 128
    107e:	5f 4f       	sbci	r21, 0xFF	; 255
    1080:	6f 4f       	sbci	r22, 0xFF	; 255
    1082:	7f 47       	sbci	r23, 0x7F	; 127
    1084:	08 f0       	brcs	.+2      	; 0x1088 <sw_timer_start+0x104>
    1086:	ad c0       	rjmp	.+346    	; 0x11e2 <sw_timer_start+0x25e>
    1088:	8f b7       	in	r24, 0x3f	; 63
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	f8 94       	cli
    108e:	f9 80       	ldd	r15, Y+1	; 0x01
    1090:	1c df       	rcall	.-456    	; 0xeca <internal_timer_handler>
    1092:	c6 01       	movw	r24, r12
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	f6 01       	movw	r30, r12
    10a2:	ee 0f       	add	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	e8 0f       	add	r30, r24
    10a8:	f9 1f       	adc	r31, r25
    10aa:	ea 5b       	subi	r30, 0xBA	; 186
    10ac:	fa 4f       	sbci	r31, 0xFA	; 250
    10ae:	80 82       	st	Z, r8
    10b0:	91 82       	std	Z+1, r9	; 0x01
    10b2:	a2 82       	std	Z+2, r10	; 0x02
    10b4:	b3 82       	std	Z+3, r11	; 0x03
    10b6:	15 83       	std	Z+5, r17	; 0x05
    10b8:	04 83       	std	Z+4, r16	; 0x04
    10ba:	4e 80       	ldd	r4, Y+6	; 0x06
    10bc:	5f 80       	ldd	r5, Y+7	; 0x07
    10be:	57 82       	std	Z+7, r5	; 0x07
    10c0:	46 82       	std	Z+6, r4	; 0x06
    10c2:	11 86       	std	Z+9, r1	; 0x09
    10c4:	b0 91 b6 02 	lds	r27, 0x02B6	; 0x8002b6 <running_timers>
    10c8:	bf 5f       	subi	r27, 0xFF	; 255
    10ca:	b0 93 b6 02 	sts	0x02B6, r27	; 0x8002b6 <running_timers>
    10ce:	a0 91 b5 02 	lds	r26, 0x02B5	; 0x8002b5 <running_timer_queue_head>
    10d2:	af 3f       	cpi	r26, 0xFF	; 255
    10d4:	21 f0       	breq	.+8      	; 0x10de <sw_timer_start+0x15a>
    10d6:	b1 11       	cpse	r27, r1
    10d8:	07 c0       	rjmp	.+14     	; 0x10e8 <sw_timer_start+0x164>
    10da:	ea 2e       	mov	r14, r26
    10dc:	84 c0       	rjmp	.+264    	; 0x11e6 <sw_timer_start+0x262>
    10de:	30 92 b5 02 	sts	0x02B5, r3	; 0x8002b5 <running_timer_queue_head>
    10e2:	83 2d       	mov	r24, r3
    10e4:	84 de       	rcall	.-760    	; 0xdee <load_hw_timer>
    10e6:	70 c0       	rjmp	.+224    	; 0x11c8 <sw_timer_start+0x244>
    10e8:	ea 2e       	mov	r14, r26
    10ea:	4a 2f       	mov	r20, r26
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	4f 3f       	cpi	r20, 0xFF	; 255
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <sw_timer_start+0x170>
    10f2:	66 c0       	rjmp	.+204    	; 0x11c0 <sw_timer_start+0x23c>
    10f4:	84 2f       	mov	r24, r20
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	bc 01       	movw	r22, r24
    10fa:	66 0f       	add	r22, r22
    10fc:	77 1f       	adc	r23, r23
    10fe:	9c 01       	movw	r18, r24
    1100:	22 0f       	add	r18, r18
    1102:	33 1f       	adc	r19, r19
    1104:	22 0f       	add	r18, r18
    1106:	33 1f       	adc	r19, r19
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	26 0f       	add	r18, r22
    110e:	37 1f       	adc	r19, r23
    1110:	f9 01       	movw	r30, r18
    1112:	ea 5b       	subi	r30, 0xBA	; 186
    1114:	fa 4f       	sbci	r31, 0xFA	; 250
    1116:	40 80       	ld	r4, Z
    1118:	51 80       	ldd	r5, Z+1	; 0x01
    111a:	62 80       	ldd	r6, Z+2	; 0x02
    111c:	73 80       	ldd	r7, Z+3	; 0x03
    111e:	95 01       	movw	r18, r10
    1120:	84 01       	movw	r16, r8
    1122:	04 19       	sub	r16, r4
    1124:	15 09       	sbc	r17, r5
    1126:	26 09       	sbc	r18, r6
    1128:	37 09       	sbc	r19, r7
    112a:	28 01       	movw	r4, r16
    112c:	39 01       	movw	r6, r18
    112e:	1f ef       	ldi	r17, 0xFF	; 255
    1130:	41 16       	cp	r4, r17
    1132:	51 06       	cpc	r5, r17
    1134:	61 06       	cpc	r6, r17
    1136:	1f e7       	ldi	r17, 0x7F	; 127
    1138:	71 06       	cpc	r7, r17
    113a:	70 f4       	brcc	.+28     	; 0x1158 <sw_timer_start+0x1d4>
    113c:	fb 01       	movw	r30, r22
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	e8 0f       	add	r30, r24
    114c:	f9 1f       	adc	r31, r25
    114e:	ea 5b       	subi	r30, 0xBA	; 186
    1150:	fa 4f       	sbci	r31, 0xFA	; 250
    1152:	e4 2e       	mov	r14, r20
    1154:	40 85       	ldd	r20, Z+8	; 0x08
    1156:	34 c0       	rjmp	.+104    	; 0x11c0 <sw_timer_start+0x23c>
    1158:	f6 01       	movw	r30, r12
    115a:	ee 0f       	add	r30, r30
    115c:	ff 1f       	adc	r31, r31
    115e:	cc 0c       	add	r12, r12
    1160:	dd 1c       	adc	r13, r13
    1162:	cc 0c       	add	r12, r12
    1164:	dd 1c       	adc	r13, r13
    1166:	cc 0c       	add	r12, r12
    1168:	dd 1c       	adc	r13, r13
    116a:	ec 0d       	add	r30, r12
    116c:	fd 1d       	adc	r31, r13
    116e:	ea 5b       	subi	r30, 0xBA	; 186
    1170:	fa 4f       	sbci	r31, 0xFA	; 250
    1172:	40 87       	std	Z+8, r20	; 0x08
    1174:	fc 01       	movw	r30, r24
    1176:	ee 0f       	add	r30, r30
    1178:	ff 1f       	adc	r31, r31
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	e8 0f       	add	r30, r24
    1188:	f9 1f       	adc	r31, r25
    118a:	ea 5b       	subi	r30, 0xBA	; 186
    118c:	fa 4f       	sbci	r31, 0xFA	; 250
    118e:	11 86       	std	Z+9, r1	; 0x09
    1190:	a4 13       	cpse	r26, r20
    1192:	05 c0       	rjmp	.+10     	; 0x119e <sw_timer_start+0x21a>
    1194:	30 92 b5 02 	sts	0x02B5, r3	; 0x8002b5 <running_timer_queue_head>
    1198:	83 2d       	mov	r24, r3
    119a:	29 de       	rcall	.-942    	; 0xdee <load_hw_timer>
    119c:	15 c0       	rjmp	.+42     	; 0x11c8 <sw_timer_start+0x244>
    119e:	8e 2d       	mov	r24, r14
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	fc 01       	movw	r30, r24
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	e8 0f       	add	r30, r24
    11b6:	f9 1f       	adc	r31, r25
    11b8:	ea 5b       	subi	r30, 0xBA	; 186
    11ba:	fa 4f       	sbci	r31, 0xFA	; 250
    11bc:	30 86       	std	Z+8, r3	; 0x08
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <sw_timer_start+0x244>
    11c0:	5f 5f       	subi	r21, 0xFF	; 255
    11c2:	b5 13       	cpse	r27, r21
    11c4:	94 cf       	rjmp	.-216    	; 0x10ee <sw_timer_start+0x16a>
    11c6:	0f c0       	rjmp	.+30     	; 0x11e6 <sw_timer_start+0x262>
    11c8:	ff be       	out	0x3f, r15	; 63
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	2c c0       	rjmp	.+88     	; 0x1226 <sw_timer_start+0x2a2>
    11ce:	88 ef       	ldi	r24, 0xF8	; 248
    11d0:	2a c0       	rjmp	.+84     	; 0x1226 <sw_timer_start+0x2a2>
    11d2:	88 ef       	ldi	r24, 0xF8	; 248
    11d4:	28 c0       	rjmp	.+80     	; 0x1226 <sw_timer_start+0x2a2>
    11d6:	83 ef       	ldi	r24, 0xF3	; 243
    11d8:	26 c0       	rjmp	.+76     	; 0x1226 <sw_timer_start+0x2a2>
    11da:	88 ef       	ldi	r24, 0xF8	; 248
    11dc:	24 c0       	rjmp	.+72     	; 0x1226 <sw_timer_start+0x2a2>
    11de:	88 ef       	ldi	r24, 0xF8	; 248
    11e0:	22 c0       	rjmp	.+68     	; 0x1226 <sw_timer_start+0x2a2>
    11e2:	88 ef       	ldi	r24, 0xF8	; 248
    11e4:	20 c0       	rjmp	.+64     	; 0x1226 <sw_timer_start+0x2a2>
    11e6:	8e 2d       	mov	r24, r14
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	fc 01       	movw	r30, r24
    11ec:	ee 0f       	add	r30, r30
    11ee:	ff 1f       	adc	r31, r31
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	e8 0f       	add	r30, r24
    11fe:	f9 1f       	adc	r31, r25
    1200:	ea 5b       	subi	r30, 0xBA	; 186
    1202:	fa 4f       	sbci	r31, 0xFA	; 250
    1204:	30 86       	std	Z+8, r3	; 0x08
    1206:	f6 01       	movw	r30, r12
    1208:	ee 0f       	add	r30, r30
    120a:	ff 1f       	adc	r31, r31
    120c:	cc 0c       	add	r12, r12
    120e:	dd 1c       	adc	r13, r13
    1210:	cc 0c       	add	r12, r12
    1212:	dd 1c       	adc	r13, r13
    1214:	cc 0c       	add	r12, r12
    1216:	dd 1c       	adc	r13, r13
    1218:	ec 0d       	add	r30, r12
    121a:	fd 1d       	adc	r31, r13
    121c:	ea 5b       	subi	r30, 0xBA	; 186
    121e:	fa 4f       	sbci	r31, 0xFA	; 250
    1220:	8f ef       	ldi	r24, 0xFF	; 255
    1222:	80 87       	std	Z+8, r24	; 0x08
    1224:	d1 cf       	rjmp	.-94     	; 0x11c8 <sw_timer_start+0x244>
    1226:	27 96       	adiw	r28, 0x07	; 7
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	bf 90       	pop	r11
    1244:	af 90       	pop	r10
    1246:	9f 90       	pop	r9
    1248:	8f 90       	pop	r8
    124a:	7f 90       	pop	r7
    124c:	6f 90       	pop	r6
    124e:	5f 90       	pop	r5
    1250:	4f 90       	pop	r4
    1252:	3f 90       	pop	r3
    1254:	2f 90       	pop	r2
    1256:	08 95       	ret

00001258 <sw_timer_stop>:
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	1f 92       	push	r1
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	85 30       	cpi	r24, 0x05	; 5
    1268:	08 f0       	brcs	.+2      	; 0x126c <sw_timer_stop+0x14>
    126a:	f1 c0       	rjmp	.+482    	; 0x144e <sw_timer_stop+0x1f6>
    126c:	08 2f       	mov	r16, r24
    126e:	8f b7       	in	r24, 0x3f	; 63
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	f8 94       	cli
    1274:	19 81       	ldd	r17, Y+1	; 0x01
    1276:	29 de       	rcall	.-942    	; 0xeca <internal_timer_handler>
    1278:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <running_timers>
    127c:	88 23       	and	r24, r24
    127e:	09 f4       	brne	.+2      	; 0x1282 <sw_timer_stop+0x2a>
    1280:	66 c0       	rjmp	.+204    	; 0x134e <sw_timer_stop+0xf6>
    1282:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <running_timer_queue_head>
    1286:	09 13       	cpse	r16, r25
    1288:	4e c0       	rjmp	.+156    	; 0x1326 <sw_timer_stop+0xce>
    128a:	21 c0       	rjmp	.+66     	; 0x12ce <sw_timer_stop+0x76>
    128c:	09 13       	cpse	r16, r25
    128e:	4b c0       	rjmp	.+150    	; 0x1326 <sw_timer_stop+0xce>
    1290:	80 2f       	mov	r24, r16
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	fc 01       	movw	r30, r24
    1296:	ee 0f       	add	r30, r30
    1298:	ff 1f       	adc	r31, r31
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	e8 0f       	add	r30, r24
    12a8:	f9 1f       	adc	r31, r25
    12aa:	ea 5b       	subi	r30, 0xBA	; 186
    12ac:	fa 4f       	sbci	r31, 0xFA	; 250
    12ae:	80 85       	ldd	r24, Z+8	; 0x08
    12b0:	fa 01       	movw	r30, r20
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	44 0f       	add	r20, r20
    12b8:	55 1f       	adc	r21, r21
    12ba:	44 0f       	add	r20, r20
    12bc:	55 1f       	adc	r21, r21
    12be:	44 0f       	add	r20, r20
    12c0:	55 1f       	adc	r21, r21
    12c2:	e4 0f       	add	r30, r20
    12c4:	f5 1f       	adc	r31, r21
    12c6:	ea 5b       	subi	r30, 0xBA	; 186
    12c8:	fa 4f       	sbci	r31, 0xFA	; 250
    12ca:	80 87       	std	Z+8, r24	; 0x08
    12cc:	15 c0       	rjmp	.+42     	; 0x12f8 <sw_timer_stop+0xa0>
    12ce:	0e 94 44 01 	call	0x288	; 0x288 <common_tc_compare_stop>
    12d2:	80 2f       	mov	r24, r16
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	fc 01       	movw	r30, r24
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	e8 0f       	add	r30, r24
    12ea:	f9 1f       	adc	r31, r25
    12ec:	ea 5b       	subi	r30, 0xBA	; 186
    12ee:	fa 4f       	sbci	r31, 0xFA	; 250
    12f0:	80 85       	ldd	r24, Z+8	; 0x08
    12f2:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <running_timer_queue_head>
    12f6:	7b dd       	rcall	.-1290   	; 0xdee <load_hw_timer>
    12f8:	80 2f       	mov	r24, r16
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	fc 01       	movw	r30, r24
    12fe:	ee 0f       	add	r30, r30
    1300:	ff 1f       	adc	r31, r31
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	e8 0f       	add	r30, r24
    1310:	f9 1f       	adc	r31, r25
    1312:	ea 5b       	subi	r30, 0xBA	; 186
    1314:	fa 4f       	sbci	r31, 0xFA	; 250
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	80 87       	std	Z+8, r24	; 0x08
    131a:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <running_timers>
    131e:	81 50       	subi	r24, 0x01	; 1
    1320:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <running_timers>
    1324:	78 c0       	rjmp	.+240    	; 0x1416 <sw_timer_stop+0x1be>
    1326:	49 2f       	mov	r20, r25
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	fa 01       	movw	r30, r20
    132c:	ee 0f       	add	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	9a 01       	movw	r18, r20
    1332:	22 0f       	add	r18, r18
    1334:	33 1f       	adc	r19, r19
    1336:	22 0f       	add	r18, r18
    1338:	33 1f       	adc	r19, r19
    133a:	22 0f       	add	r18, r18
    133c:	33 1f       	adc	r19, r19
    133e:	e2 0f       	add	r30, r18
    1340:	f3 1f       	adc	r31, r19
    1342:	ea 5b       	subi	r30, 0xBA	; 186
    1344:	fa 4f       	sbci	r31, 0xFA	; 250
    1346:	90 85       	ldd	r25, Z+8	; 0x08
    1348:	81 50       	subi	r24, 0x01	; 1
    134a:	09 f0       	breq	.+2      	; 0x134e <sw_timer_stop+0xf6>
    134c:	9f cf       	rjmp	.-194    	; 0x128c <sw_timer_stop+0x34>
    134e:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <expired_timer_queue_head>
    1352:	8f 3f       	cpi	r24, 0xFF	; 255
    1354:	09 f4       	brne	.+2      	; 0x1358 <sw_timer_stop+0x100>
    1356:	75 c0       	rjmp	.+234    	; 0x1442 <sw_timer_stop+0x1ea>
    1358:	08 13       	cpse	r16, r24
    135a:	47 c0       	rjmp	.+142    	; 0x13ea <sw_timer_stop+0x192>
    135c:	25 c0       	rjmp	.+74     	; 0x13a8 <sw_timer_stop+0x150>
    135e:	09 13       	cpse	r16, r25
    1360:	43 c0       	rjmp	.+134    	; 0x13e8 <sw_timer_stop+0x190>
    1362:	20 2f       	mov	r18, r16
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	f9 01       	movw	r30, r18
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	22 0f       	add	r18, r18
    136e:	33 1f       	adc	r19, r19
    1370:	22 0f       	add	r18, r18
    1372:	33 1f       	adc	r19, r19
    1374:	22 0f       	add	r18, r18
    1376:	33 1f       	adc	r19, r19
    1378:	e2 0f       	add	r30, r18
    137a:	f3 1f       	adc	r31, r19
    137c:	ea 5b       	subi	r30, 0xBA	; 186
    137e:	fa 4f       	sbci	r31, 0xFA	; 250
    1380:	90 85       	ldd	r25, Z+8	; 0x08
    1382:	fa 01       	movw	r30, r20
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	44 0f       	add	r20, r20
    138a:	55 1f       	adc	r21, r21
    138c:	44 0f       	add	r20, r20
    138e:	55 1f       	adc	r21, r21
    1390:	44 0f       	add	r20, r20
    1392:	55 1f       	adc	r21, r21
    1394:	e4 0f       	add	r30, r20
    1396:	f5 1f       	adc	r31, r21
    1398:	ea 5b       	subi	r30, 0xBA	; 186
    139a:	fa 4f       	sbci	r31, 0xFA	; 250
    139c:	90 87       	std	Z+8, r25	; 0x08
    139e:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <expired_timer_queue_tail>
    13a2:	09 13       	cpse	r16, r25
    13a4:	38 c0       	rjmp	.+112    	; 0x1416 <sw_timer_stop+0x1be>
    13a6:	1d c0       	rjmp	.+58     	; 0x13e2 <sw_timer_stop+0x18a>
    13a8:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <expired_timer_queue_tail>
    13ac:	08 13       	cpse	r16, r24
    13ae:	06 c0       	rjmp	.+12     	; 0x13bc <sw_timer_stop+0x164>
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <expired_timer_queue_tail>
    13b6:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <expired_timer_queue_head>
    13ba:	2d c0       	rjmp	.+90     	; 0x1416 <sw_timer_stop+0x1be>
    13bc:	80 2f       	mov	r24, r16
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	fc 01       	movw	r30, r24
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	e8 0f       	add	r30, r24
    13d4:	f9 1f       	adc	r31, r25
    13d6:	ea 5b       	subi	r30, 0xBA	; 186
    13d8:	fa 4f       	sbci	r31, 0xFA	; 250
    13da:	80 85       	ldd	r24, Z+8	; 0x08
    13dc:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <expired_timer_queue_head>
    13e0:	1a c0       	rjmp	.+52     	; 0x1416 <sw_timer_stop+0x1be>
    13e2:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <expired_timer_queue_tail>
    13e6:	17 c0       	rjmp	.+46     	; 0x1416 <sw_timer_stop+0x1be>
    13e8:	89 2f       	mov	r24, r25
    13ea:	48 2f       	mov	r20, r24
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	fa 01       	movw	r30, r20
    13f0:	ee 0f       	add	r30, r30
    13f2:	ff 1f       	adc	r31, r31
    13f4:	9a 01       	movw	r18, r20
    13f6:	22 0f       	add	r18, r18
    13f8:	33 1f       	adc	r19, r19
    13fa:	22 0f       	add	r18, r18
    13fc:	33 1f       	adc	r19, r19
    13fe:	22 0f       	add	r18, r18
    1400:	33 1f       	adc	r19, r19
    1402:	e2 0f       	add	r30, r18
    1404:	f3 1f       	adc	r31, r19
    1406:	ea 5b       	subi	r30, 0xBA	; 186
    1408:	fa 4f       	sbci	r31, 0xFA	; 250
    140a:	90 85       	ldd	r25, Z+8	; 0x08
    140c:	9f 3f       	cpi	r25, 0xFF	; 255
    140e:	09 f0       	breq	.+2      	; 0x1412 <sw_timer_stop+0x1ba>
    1410:	a6 cf       	rjmp	.-180    	; 0x135e <sw_timer_stop+0x106>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	17 c0       	rjmp	.+46     	; 0x1444 <sw_timer_stop+0x1ec>
    1416:	80 2f       	mov	r24, r16
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	fc 01       	movw	r30, r24
    141c:	ee 0f       	add	r30, r30
    141e:	ff 1f       	adc	r31, r31
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	e8 0f       	add	r30, r24
    142e:	f9 1f       	adc	r31, r25
    1430:	ea 5b       	subi	r30, 0xBA	; 186
    1432:	fa 4f       	sbci	r31, 0xFA	; 250
    1434:	15 82       	std	Z+5, r1	; 0x05
    1436:	14 82       	std	Z+4, r1	; 0x04
    1438:	17 82       	std	Z+7, r1	; 0x07
    143a:	16 82       	std	Z+6, r1	; 0x06
    143c:	11 86       	std	Z+9, r1	; 0x09
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <sw_timer_stop+0x1ec>
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	1f bf       	out	0x3f, r17	; 63
    1446:	81 11       	cpse	r24, r1
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <sw_timer_stop+0x1fa>
    144a:	82 ef       	ldi	r24, 0xF2	; 242
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <sw_timer_stop+0x1fc>
    144e:	88 ef       	ldi	r24, 0xF8	; 248
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <sw_timer_stop+0x1fc>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	0f 90       	pop	r0
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	08 95       	ret

00001460 <sw_timer_init>:
	 * Initialize the timer resources like timer arrays
	 * queues, timer registers
	 */
	uint8_t index;

	running_timers = 0;
    1460:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <running_timers>
	timer_trigger = false;
    1464:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <timer_trigger>
	sys_time = 0;
    1468:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <sys_time+0x1>
    146c:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <sys_time>

	running_timer_queue_head = NO_TIMER;
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <running_timer_queue_head>
	expired_timer_queue_head = NO_TIMER;
    1476:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <expired_timer_queue_head>
	expired_timer_queue_tail = NO_TIMER;
    147a:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <expired_timer_queue_tail>
    147e:	e6 e4       	ldi	r30, 0x46	; 70
    1480:	f5 e0       	ldi	r31, 0x05	; 5
    1482:	28 e7       	ldi	r18, 0x78	; 120
    1484:	35 e0       	ldi	r19, 0x05	; 5

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
		timer_array[index].next_timer_in_queue = NO_TIMER;
    1486:	80 87       	std	Z+8, r24	; 0x08
		timer_array[index].timer_cb = NULL;
    1488:	15 82       	std	Z+5, r1	; 0x05
    148a:	14 82       	std	Z+4, r1	; 0x04
    148c:	3a 96       	adiw	r30, 0x0a	; 10

	running_timer_queue_head = NO_TIMER;
	expired_timer_queue_head = NO_TIMER;
	expired_timer_queue_tail = NO_TIMER;

	for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++) {
    148e:	e2 17       	cp	r30, r18
    1490:	f3 07       	cpc	r31, r19
    1492:	c9 f7       	brne	.-14     	; 0x1486 <sw_timer_init+0x26>
		timer_array[index].next_timer_in_queue = NO_TIMER;
		timer_array[index].timer_cb = NULL;
	}

	alloc_timer_id = 0;
    1494:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <alloc_timer_id>
	set_common_tc_overflow_callback(hw_overflow_cb);
    1498:	8d e9       	ldi	r24, 0x9D	; 157
    149a:	96 e0       	ldi	r25, 0x06	; 6
    149c:	0e 94 1d 02 	call	0x43a	; 0x43a <set_common_tc_overflow_callback>
	set_common_tc_expiry_callback(hw_expiry_cb);
    14a0:	85 e9       	ldi	r24, 0x95	; 149
    14a2:	96 e0       	ldi	r25, 0x06	; 6
    14a4:	0e 94 22 02 	call	0x444	; 0x444 <set_common_tc_expiry_callback>
	common_tc_init();
    14a8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <common_tc_init>
    14ac:	08 95       	ret

000014ae <sw_timer_service>:
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}

void sw_timer_service(void)
{
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	1f 92       	push	r1
    14b8:	1f 92       	push	r1
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    14be:	8f b7       	in	r24, 0x3f	; 63
    14c0:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    14c2:	f8 94       	cli
	return flags;
    14c4:	1a 81       	ldd	r17, Y+2	; 0x02
#if (TOTAL_NUMBER_OF_SW_TIMERS > 0)
	uint8_t flags = cpu_irq_save();
	internal_timer_handler();
    14c6:	01 dd       	rcall	.-1534   	; 0xeca <internal_timer_handler>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    14c8:	1f bf       	out	0x3f, r17	; 63
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
    14ca:	1f ef       	ldi	r17, 0xFF	; 255
    14cc:	01 2f       	mov	r16, r17
    14ce:	37 c0       	rjmp	.+110    	; 0x153e <sw_timer_service+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    14d0:	8f b7       	in	r24, 0x3f	; 63
    14d2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    14d4:	f8 94       	cli
	return flags;
    14d6:	29 81       	ldd	r18, Y+1	; 0x01
		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
			flags = cpu_irq_save();

			next_expired_timer
				= timer_array[expired_timer_queue_head].
    14d8:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <expired_timer_queue_head>
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	dc 01       	movw	r26, r24
    14e0:	aa 0f       	add	r26, r26
    14e2:	bb 1f       	adc	r27, r27
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	a8 0f       	add	r26, r24
    14f2:	b9 1f       	adc	r27, r25
    14f4:	aa 5b       	subi	r26, 0xBA	; 186
    14f6:	ba 4f       	sbci	r27, 0xFA	; 250
    14f8:	18 96       	adiw	r26, 0x08	; 8
    14fa:	9c 91       	ld	r25, X
    14fc:	18 97       	sbiw	r26, 0x08	; 8
					next_timer_in_queue;

			/* Callback is stored */
			callback
				= (timer_expiry_cb_t)timer_array[
    14fe:	14 96       	adiw	r26, 0x04	; 4
    1500:	ed 91       	ld	r30, X+
    1502:	fc 91       	ld	r31, X
    1504:	15 97       	sbiw	r26, 0x05	; 5
				expired_timer_queue_head
					].timer_cb;

			/* Callback parameter is stored */
			callback_param
				= timer_array[expired_timer_queue_head].param_cb;
    1506:	16 96       	adiw	r26, 0x06	; 6
    1508:	4d 91       	ld	r20, X+
    150a:	5c 91       	ld	r21, X
    150c:	17 97       	sbiw	r26, 0x07	; 7
			 * The expired timer's structure elements are updated
			 * and the timer
			 * is taken out of expired timer queue
			 */
			timer_array[expired_timer_queue_head].
			next_timer_in_queue = NO_TIMER;
    150e:	18 96       	adiw	r26, 0x08	; 8
    1510:	1c 93       	st	X, r17
    1512:	18 97       	sbiw	r26, 0x08	; 8
			timer_array[expired_timer_queue_head].timer_cb = NULL;
    1514:	15 96       	adiw	r26, 0x05	; 5
    1516:	1c 92       	st	X, r1
    1518:	1e 92       	st	-X, r1
    151a:	14 97       	sbiw	r26, 0x04	; 4
			timer_array[expired_timer_queue_head].param_cb = NULL;
    151c:	17 96       	adiw	r26, 0x07	; 7
    151e:	1c 92       	st	X, r1
    1520:	1e 92       	st	-X, r1
    1522:	16 97       	sbiw	r26, 0x06	; 6
			timer_array[expired_timer_queue_head].loaded = false;
    1524:	19 96       	adiw	r26, 0x09	; 9
    1526:	1c 92       	st	X, r1
			/*
			 * The expired timer queue head is updated with the next
			 * timer in the
			 * expired timer queue.
			 */
			expired_timer_queue_head = next_expired_timer;
    1528:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <expired_timer_queue_head>

			if (NO_TIMER == expired_timer_queue_head) {
    152c:	9f 3f       	cpi	r25, 0xFF	; 255
    152e:	11 f4       	brne	.+4      	; 0x1534 <sw_timer_service+0x86>
				expired_timer_queue_tail = NO_TIMER;
    1530:	00 93 b3 02 	sts	0x02B3, r16	; 0x8002b3 <expired_timer_queue_tail>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1534:	2f bf       	out	0x3f, r18	; 63
			}

			cpu_irq_restore(flags);

			if (NULL != callback) {
    1536:	30 97       	sbiw	r30, 0x00	; 0
    1538:	11 f0       	breq	.+4      	; 0x153e <sw_timer_service+0x90>
				/* Callback function is called */
				callback(callback_param);
    153a:	ca 01       	movw	r24, r20
    153c:	19 95       	eicall
		timer_expiry_cb_t callback;
		void *callback_param;
		uint8_t next_expired_timer;

		/* Expired timer if any will be processed here */
		while (NO_TIMER != expired_timer_queue_head) {
    153e:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <expired_timer_queue_head>
    1542:	8f 3f       	cpi	r24, 0xFF	; 255
    1544:	29 f6       	brne	.-118    	; 0x14d0 <sw_timer_service+0x22>
				callback(callback_param);
			}
		}
	}
#endif /* #if (TOTAL_NUMBER_OF_SW_TIMERS > 0) */
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	08 95       	ret

00001554 <pal_init>:
}

bool pal_is_timer_running(uint8_t timer_id)
{
	return sw_timer_is_running(timer_id);
}
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	08 95       	ret

00001558 <pal_task>:
 *
 * This function calls sio & timer handling functions.
 */
void pal_task(void)
{
	sw_timer_service();
    1558:	aa cf       	rjmp	.-172    	; 0x14ae <sw_timer_service>
    155a:	08 95       	ret

0000155c <bmm_buffer_init>:
 * This function initializes the buffer module.
 * This function should be called before using any other functionality
 * of buffer module.
 */
void bmm_buffer_init(void)
{
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
	/* Initialize free buffer queue for large buffers */
#if (TOTAL_NUMBER_OF_LARGE_BUFS > 0)
    #ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&free_large_buffer_q, TOTAL_NUMBER_OF_LARGE_BUFS);
    #else
	qmm_queue_init(&free_large_buffer_q);
    1560:	87 eb       	ldi	r24, 0xB7	; 183
    1562:	92 e0       	ldi	r25, 0x02	; 2
    1564:	b0 d0       	rcall	.+352    	; 0x16c6 <qmm_queue_init>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    1566:	cc eb       	ldi	r28, 0xBC	; 188
    1568:	d2 e0       	ldi	r29, 0x02	; 2
    156a:	88 ec       	ldi	r24, 0xC8	; 200
    156c:	92 e0       	ldi	r25, 0x02	; 2
    156e:	99 83       	std	Y+1, r25	; 0x01
    1570:	88 83       	st	Y, r24

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    1572:	be 01       	movw	r22, r28
    1574:	87 eb       	ldi	r24, 0xB7	; 183
    1576:	92 e0       	ldi	r25, 0x02	; 2
    1578:	ad d0       	rcall	.+346    	; 0x16d4 <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    157a:	83 e5       	ldi	r24, 0x53	; 83
    157c:	93 e0       	ldi	r25, 0x03	; 3
    157e:	9d 83       	std	Y+5, r25	; 0x05
    1580:	8c 83       	std	Y+4, r24	; 0x04

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    1582:	60 ec       	ldi	r22, 0xC0	; 192
    1584:	72 e0       	ldi	r23, 0x02	; 2
    1586:	87 eb       	ldi	r24, 0xB7	; 183
    1588:	92 e0       	ldi	r25, 0x02	; 2
    158a:	a4 d0       	rcall	.+328    	; 0x16d4 <qmm_queue_append>
	for (index = 0; index < TOTAL_NUMBER_OF_LARGE_BUFS; index++) {
		/*
		 * Initialize the buffer body pointer with address of the
		 * buffer body
		 */
		buf_header[index].body = buf_pool + (index * LARGE_BUFFER_SIZE);
    158c:	8e ed       	ldi	r24, 0xDE	; 222
    158e:	93 e0       	ldi	r25, 0x03	; 3
    1590:	99 87       	std	Y+9, r25	; 0x09
    1592:	88 87       	std	Y+8, r24	; 0x08

		/* Append the buffer to free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, &buf_header[index]);
    1594:	64 ec       	ldi	r22, 0xC4	; 196
    1596:	72 e0       	ldi	r23, 0x02	; 2
    1598:	87 eb       	ldi	r24, 0xB7	; 183
    159a:	92 e0       	ldi	r25, 0x02	; 2
    159c:	9b d0       	rcall	.+310    	; 0x16d4 <qmm_queue_append>
		/* Append the buffer to free small buffer queue */
		qmm_queue_append(&free_small_buffer_q, &buf_header[index + \
				TOTAL_NUMBER_OF_LARGE_BUFS]);
	}
#endif
}
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	08 95       	ret

000015a4 <bmm_buffer_alloc>:
			}
		}

#else /* no small buffers available at all */
	/* Allocate buffer from free large buffer queue */
	pfree_buffer = qmm_queue_remove(&free_large_buffer_q, NULL);
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	87 eb       	ldi	r24, 0xB7	; 183
    15aa:	92 e0       	ldi	r25, 0x02	; 2
    15ac:	b8 c0       	rjmp	.+368    	; 0x171e <qmm_queue_remove>

	size = size; /* Keep compiler happy. */
#endif

		return pfree_buffer;
	}
    15ae:	08 95       	ret

000015b0 <bmm_buffer_free>:
	 *
	 * @param pbuffer Pointer to buffer that has to be freed.
	 */
	void bmm_buffer_free(buffer_t *pbuffer)
	{
		if (NULL == pbuffer) {
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	21 f0       	breq	.+8      	; 0x15bc <bmm_buffer_free+0xc>
    15b4:	bc 01       	movw	r22, r24
			qmm_queue_append(&free_large_buffer_q, pbuffer);
		}

#else /* no small buffers available at all */
		/* Append the buffer into free large buffer queue */
		qmm_queue_append(&free_large_buffer_q, pbuffer);
    15b6:	87 eb       	ldi	r24, 0xB7	; 183
    15b8:	92 e0       	ldi	r25, 0x02	; 2
    15ba:	8c c0       	rjmp	.+280    	; 0x16d4 <qmm_queue_append>
    15bc:	08 95       	ret

000015be <queue_read_or_remove>:
 * \ingroup group_qmm
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
    15be:	8f 92       	push	r8
    15c0:	9f 92       	push	r9
    15c2:	af 92       	push	r10
    15c4:	bf 92       	push	r11
    15c6:	cf 92       	push	r12
    15c8:	df 92       	push	r13
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	1f 92       	push	r1
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15dc:	2f b7       	in	r18, 0x3f	; 63
    15de:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    15e0:	f8 94       	cli
	return flags;
    15e2:	89 80       	ldd	r8, Y+1	; 0x01
	buffer_t *buffer_current = NULL;
	buffer_t *buffer_previous;

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
    15e4:	dc 01       	movw	r26, r24
    15e6:	14 96       	adiw	r26, 0x04	; 4
    15e8:	2c 91       	ld	r18, X
    15ea:	22 23       	and	r18, r18
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <queue_read_or_remove+0x32>
    15ee:	56 c0       	rjmp	.+172    	; 0x169c <queue_read_or_remove+0xde>
    15f0:	7a 01       	movw	r14, r20
    15f2:	96 2e       	mov	r9, r22
    15f4:	5c 01       	movw	r10, r24
		buffer_current = q->head;
    15f6:	fc 01       	movw	r30, r24
    15f8:	00 81       	ld	r16, Z
    15fa:	11 81       	ldd	r17, Z+1	; 0x01
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    15fc:	45 2b       	or	r20, r21
    15fe:	e1 f0       	breq	.+56     	; 0x1638 <queue_read_or_remove+0x7a>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    1600:	01 15       	cp	r16, r1
    1602:	11 05       	cpc	r17, r1
    1604:	09 f4       	brne	.+2      	; 0x1608 <queue_read_or_remove+0x4a>
    1606:	4d c0       	rjmp	.+154    	; 0x16a2 <queue_read_or_remove+0xe4>
    1608:	68 01       	movw	r12, r16
    160a:	01 c0       	rjmp	.+2      	; 0x160e <queue_read_or_remove+0x50>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
    160c:	89 01       	movw	r16, r18
		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
				match = search->criteria_func(
    160e:	d7 01       	movw	r26, r14
    1610:	12 96       	adiw	r26, 0x02	; 2
    1612:	6d 91       	ld	r22, X+
    1614:	7c 91       	ld	r23, X
    1616:	13 97       	sbiw	r26, 0x03	; 3
    1618:	ed 91       	ld	r30, X+
    161a:	fc 91       	ld	r31, X
    161c:	d8 01       	movw	r26, r16
    161e:	8d 91       	ld	r24, X+
    1620:	9c 91       	ld	r25, X
    1622:	19 95       	eicall
						(void *)buffer_current->body,
						search->handle);

				if (match) {
    1624:	81 11       	cpse	r24, r1
    1626:	09 c0       	rjmp	.+18     	; 0x163a <queue_read_or_remove+0x7c>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->next;
    1628:	f8 01       	movw	r30, r16
    162a:	22 81       	ldd	r18, Z+2	; 0x02
    162c:	33 81       	ldd	r19, Z+3	; 0x03
    162e:	68 01       	movw	r12, r16

		/* First get buffer matching with criteria */
		if (NULL != search) {
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    1630:	21 15       	cp	r18, r1
    1632:	31 05       	cpc	r19, r1
    1634:	59 f7       	brne	.-42     	; 0x160c <queue_read_or_remove+0x4e>
    1636:	35 c0       	rjmp	.+106    	; 0x16a2 <queue_read_or_remove+0xe4>

	ENTER_CRITICAL_REGION();
	/* Check whether queue is empty */
	if (q->size != 0) {
		buffer_current = q->head;
		buffer_previous = q->head;
    1638:	68 01       	movw	r12, r16
				buffer_current = buffer_current->next;
			}
		}

		/* Buffer matching with search criteria found */
		if (NULL != buffer_current) {
    163a:	01 15       	cp	r16, r1
    163c:	11 05       	cpc	r17, r1
    163e:	99 f1       	breq	.+102    	; 0x16a6 <queue_read_or_remove+0xe8>
			/* Remove buffer from the queue */
			if (REMOVE_MODE == mode) {
    1640:	91 10       	cpse	r9, r1
    1642:	31 c0       	rjmp	.+98     	; 0x16a6 <queue_read_or_remove+0xe8>
				/* Update head if buffer removed is first node
				**/
				if (buffer_current == q->head) {
    1644:	d5 01       	movw	r26, r10
    1646:	8d 91       	ld	r24, X+
    1648:	9c 91       	ld	r25, X
    164a:	11 97       	sbiw	r26, 0x01	; 1
    164c:	08 17       	cp	r16, r24
    164e:	19 07       	cpc	r17, r25
    1650:	31 f4       	brne	.+12     	; 0x165e <queue_read_or_remove+0xa0>
					q->head = buffer_current->next;
    1652:	f8 01       	movw	r30, r16
    1654:	82 81       	ldd	r24, Z+2	; 0x02
    1656:	93 81       	ldd	r25, Z+3	; 0x03
    1658:	8d 93       	st	X+, r24
    165a:	9c 93       	st	X, r25
    165c:	08 c0       	rjmp	.+16     	; 0x166e <queue_read_or_remove+0xb0>
				} else {
					/* Update the link by removing the
					 * buffer */
					buffer_previous->next
						= buffer_current->next;
    165e:	d8 01       	movw	r26, r16
    1660:	12 96       	adiw	r26, 0x02	; 2
    1662:	8d 91       	ld	r24, X+
    1664:	9c 91       	ld	r25, X
    1666:	13 97       	sbiw	r26, 0x03	; 3
    1668:	f6 01       	movw	r30, r12
    166a:	93 83       	std	Z+3, r25	; 0x03
    166c:	82 83       	std	Z+2, r24	; 0x02
				}

				/* Update tail if buffer removed is last node */
				if (buffer_current == q->tail) {
    166e:	d5 01       	movw	r26, r10
    1670:	12 96       	adiw	r26, 0x02	; 2
    1672:	8d 91       	ld	r24, X+
    1674:	9c 91       	ld	r25, X
    1676:	13 97       	sbiw	r26, 0x03	; 3
    1678:	08 17       	cp	r16, r24
    167a:	19 07       	cpc	r17, r25
    167c:	21 f4       	brne	.+8      	; 0x1686 <queue_read_or_remove+0xc8>
					q->tail = buffer_previous;
    167e:	13 96       	adiw	r26, 0x03	; 3
    1680:	dc 92       	st	X, r13
    1682:	ce 92       	st	-X, r12
    1684:	12 97       	sbiw	r26, 0x02	; 2
				}

				/* Update size */
				q->size--;
    1686:	f5 01       	movw	r30, r10
    1688:	84 81       	ldd	r24, Z+4	; 0x04
    168a:	81 50       	subi	r24, 0x01	; 1
    168c:	84 83       	std	Z+4, r24	; 0x04

				if (NULL == q->head) {
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	89 2b       	or	r24, r25
    1694:	41 f4       	brne	.+16     	; 0x16a6 <queue_read_or_remove+0xe8>
					q->tail = NULL;
    1696:	13 82       	std	Z+3, r1	; 0x03
    1698:	12 82       	std	Z+2, r1	; 0x02
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <queue_read_or_remove+0xe8>
 */
static buffer_t *queue_read_or_remove(queue_t *q,
		buffer_mode_t mode,
		search_t *search)
{
	buffer_t *buffer_current = NULL;
    169c:	00 e0       	ldi	r16, 0x00	; 0
    169e:	10 e0       	ldi	r17, 0x00	; 0
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <queue_read_or_remove+0xe8>
    16a2:	00 e0       	ldi	r16, 0x00	; 0
    16a4:	10 e0       	ldi	r17, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    16a6:	8f be       	out	0x3f, r8	; 63
	LEAVE_CRITICAL_REGION();

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    16a8:	c8 01       	movw	r24, r16
    16aa:	0f 90       	pop	r0
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	cf 90       	pop	r12
    16bc:	bf 90       	pop	r11
    16be:	af 90       	pop	r10
    16c0:	9f 90       	pop	r9
    16c2:	8f 90       	pop	r8
    16c4:	08 95       	ret

000016c6 <qmm_queue_init>:
#ifdef ENABLE_QUEUE_CAPACITY
void qmm_queue_init(queue_t *q, uint8_t capacity)
#else
void qmm_queue_init(queue_t *q)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
    16c6:	fc 01       	movw	r30, r24
	q->head = NULL;
    16c8:	11 82       	std	Z+1, r1	; 0x01
    16ca:	10 82       	st	Z, r1
	q->tail = NULL;
    16cc:	13 82       	std	Z+3, r1	; 0x03
    16ce:	12 82       	std	Z+2, r1	; 0x02
	q->size = 0;
    16d0:	14 82       	std	Z+4, r1	; 0x04
    16d2:	08 95       	ret

000016d4 <qmm_queue_append>:
#ifdef ENABLE_QUEUE_CAPACITY
retval_t qmm_queue_append(queue_t *q, buffer_t *buf)
#else
void qmm_queue_append(queue_t *q, buffer_t *buf)
#endif  /* ENABLE_QUEUE_CAPACITY */
{
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	1f 92       	push	r1
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	fc 01       	movw	r30, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    16e0:	8f b7       	in	r24, 0x3f	; 63
    16e2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    16e4:	f8 94       	cli
	return flags;
    16e6:	99 81       	ldd	r25, Y+1	; 0x01
		status = QUEUE_FULL;
	} else
#endif  /* ENABLE_QUEUE_CAPACITY */
	{
		/* Check whether queue is empty */
		if (q->size == 0) {
    16e8:	84 81       	ldd	r24, Z+4	; 0x04
    16ea:	81 11       	cpse	r24, r1
    16ec:	03 c0       	rjmp	.+6      	; 0x16f4 <qmm_queue_append+0x20>
			/* Add the buffer at the head */
			q->head = buf;
    16ee:	71 83       	std	Z+1, r23	; 0x01
    16f0:	60 83       	st	Z, r22
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <qmm_queue_append+0x2c>
		} else {
			/* Add the buffer at the end */
			q->tail->next = buf;
    16f4:	a2 81       	ldd	r26, Z+2	; 0x02
    16f6:	b3 81       	ldd	r27, Z+3	; 0x03
    16f8:	13 96       	adiw	r26, 0x03	; 3
    16fa:	7c 93       	st	X, r23
    16fc:	6e 93       	st	-X, r22
    16fe:	12 97       	sbiw	r26, 0x02	; 2
		}

		/* Update the list */
		q->tail = buf;
    1700:	73 83       	std	Z+3, r23	; 0x03
    1702:	62 83       	std	Z+2, r22	; 0x02

		/* Terminate the list */
		buf->next = NULL;
    1704:	db 01       	movw	r26, r22
    1706:	13 96       	adiw	r26, 0x03	; 3
    1708:	1c 92       	st	X, r1
    170a:	1e 92       	st	-X, r1
    170c:	12 97       	sbiw	r26, 0x02	; 2

		/* Update size */
		q->size++;
    170e:	84 81       	ldd	r24, Z+4	; 0x04
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	84 83       	std	Z+4, r24	; 0x04
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1714:	9f bf       	out	0x3f, r25	; 63
	LEAVE_CRITICAL_REGION();

#ifdef ENABLE_QUEUE_CAPACITY
	return (status);
#endif
} /* qmm_queue_append */
    1716:	0f 90       	pop	r0
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <qmm_queue_remove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
buffer_t *qmm_queue_remove(queue_t *q, search_t *search)
{
    171e:	ab 01       	movw	r20, r22
	return (queue_read_or_remove(q, REMOVE_MODE, search));
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	4d cf       	rjmp	.-358    	; 0x15be <queue_read_or_remove>
}
    1724:	08 95       	ret

00001726 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1726:	04 c0       	rjmp	.+8      	; 0x1730 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1728:	61 50       	subi	r22, 0x01	; 1
    172a:	71 09       	sbc	r23, r1
    172c:	81 09       	sbc	r24, r1
    172e:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1730:	61 15       	cp	r22, r1
    1732:	71 05       	cpc	r23, r1
    1734:	81 05       	cpc	r24, r1
    1736:	91 05       	cpc	r25, r1
    1738:	b9 f7       	brne	.-18     	; 0x1728 <__portable_avr_delay_cycles+0x2>
    173a:	08 95       	ret

0000173c <switch_pll_on>:
/**
 * \brief Switches the PLL on
 * \ingroup group_tal_state_machine_rfr2
 */
static void switch_pll_on(void)
{
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
	trx_irq_reason_t irq_status;
	uint8_t poll_counter = 0;

	/* Check if trx is in TRX_OFF; only from PLL_ON the following procedure
	 * is applicable */
	if (trx_bit_read(SR_TRX_STATUS) != TRX_OFF) {
    1742:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1746:	8f 71       	andi	r24, 0x1F	; 31
    1748:	88 30       	cpi	r24, 0x08	; 8
    174a:	a1 f4       	brne	.+40     	; 0x1774 <switch_pll_on+0x38>
				"Switch PLL_ON failed, because trx is not in TRX_OFF" ==
				0);
		return;
	}

	IRQ_STATUS = _BV(PLL_LOCK); /* clear PLL lock bit */
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	/* Switch PLL on */
	trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    1752:	89 e0       	ldi	r24, 0x09	; 9
    1754:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    1758:	c3 e0       	ldi	r28, 0x03	; 3

	/* Check if PLL has been locked. */
	do {
		irq_status = (trx_irq_reason_t)trx_reg_read(RG_IRQ_STATUS);
    175a:	0f e4       	ldi	r16, 0x4F	; 79
    175c:	11 e0       	ldi	r17, 0x01	; 1
    175e:	f8 01       	movw	r30, r16
    1760:	80 81       	ld	r24, Z

		if (irq_status & TRX_IRQ_PLL_LOCK) {
    1762:	80 fd       	sbrc	r24, 0
    1764:	07 c0       	rjmp	.+14     	; 0x1774 <switch_pll_on+0x38>
			return; /* PLL is locked now */
		}

		/* Wait a time interval of typical value for timer TR4. */
		pal_timer_delay(TRX_OFF_TO_PLL_ON_TIME_US);
    1766:	63 e9       	ldi	r22, 0x93	; 147
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	db df       	rcall	.-74     	; 0x1726 <__portable_avr_delay_cycles>
    1770:	c1 50       	subi	r28, 0x01	; 1

		poll_counter++;
	} while (poll_counter < PLL_LOCK_ATTEMPTS);
    1772:	a9 f7       	brne	.-22     	; 0x175e <switch_pll_on+0x22>

#if (_DEBUG_ > 0)
	Assert("PLL switch failed" == 0);
#endif
}
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	08 95       	ret

0000177c <set_trx_state>:
 * \param trx_cmd needs to be one of the trx commands
 *
 * \return current trx state
 */
tal_trx_status_t set_trx_state(trx_cmd_t trx_cmd)
{
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	1f 92       	push	r1
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	18 2f       	mov	r17, r24
	if (tal_trx_status == TRX_SLEEP) {
    178a:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <tal_trx_status>
    178e:	8f 30       	cpi	r24, 0x0F	; 15
    1790:	51 f5       	brne	.+84     	; 0x17e6 <set_trx_state+0x6a>
		 * Once the TRX is awake, the original state of the global
		 * interrupts
		 * will be restored.
		 */
		/* Reset wake-up interrupt flag. */
		if (CMD_SLEEP == trx_cmd) {
    1792:	1f 30       	cpi	r17, 0x0F	; 15
    1794:	09 f4       	brne	.+2      	; 0x1798 <set_trx_state+0x1c>
    1796:	38 c1       	rjmp	.+624    	; 0x1a08 <set_trx_state+0x28c>
			return TRX_SLEEP;
		}

		tal_awake_end_flag = false;
    1798:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <tal_awake_end_flag>
		/* Set callback function for the awake interrupt. */
		pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
    179c:	83 ef       	ldi	r24, 0xF3	; 243
    179e:	9f e0       	ldi	r25, 0x0F	; 15
    17a0:	e1 d2       	rcall	.+1474   	; 0x1d64 <pal_trx_irq_init_awake>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    17a2:	8f b7       	in	r24, 0x3f	; 63
    17a4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    17a6:	f8 94       	cli
	return flags;
    17a8:	99 81       	ldd	r25, Y+1	; 0x01
		/* Save current state of global interrupts. */
		ENTER_CRITICAL_REGION();
		/* Force enabling of global interrupts. */
		ENABLE_GLOBAL_IRQ();
    17aa:	78 94       	sei
		/* Leave trx sleep mode. */
		TRX_SLP_TR_LOW();
    17ac:	e9 e3       	ldi	r30, 0x39	; 57
    17ae:	f1 e0       	ldi	r31, 0x01	; 1
    17b0:	80 81       	ld	r24, Z
    17b2:	8d 7f       	andi	r24, 0xFD	; 253
    17b4:	80 83       	st	Z, r24
		/* Poll wake-up interrupt flag until set within ISR. */
		while (!tal_awake_end_flag) {
    17b6:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <tal_awake_end_flag>
    17ba:	88 23       	and	r24, r24
    17bc:	e1 f3       	breq	.-8      	; 0x17b6 <set_trx_state+0x3a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17be:	9f bf       	out	0x3f, r25	; 63
		}
		/* Restore original state of global interrupts. */
		LEAVE_CRITICAL_REGION();
		/* Clear existing interrupts */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
    17c0:	8f ef       	ldi	r24, 0xFF	; 255
    17c2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
		/* Re-enable TRX_END interrupt */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    17c6:	88 e4       	ldi	r24, 0x48	; 72
    17c8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

#if (ANTENNA_DIVERSITY == 1)
		/* Enable antenna diversity. */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    17cc:	ed e4       	ldi	r30, 0x4D	; 77
    17ce:	f1 e0       	ldi	r31, 0x01	; 1
    17d0:	80 81       	ld	r24, Z
    17d2:	84 60       	ori	r24, 0x04	; 4
    17d4:	80 83       	st	Z, r24
#endif

		if ((trx_cmd == CMD_TRX_OFF) ||
    17d6:	18 30       	cpi	r17, 0x08	; 8
    17d8:	11 f0       	breq	.+4      	; 0x17de <set_trx_state+0x62>
    17da:	13 30       	cpi	r17, 0x03	; 3
    17dc:	21 f4       	brne	.+8      	; 0x17e6 <set_trx_state+0x6a>
				(trx_cmd == CMD_FORCE_TRX_OFF)) {
			tal_trx_status = TRX_OFF;
    17de:	88 e0       	ldi	r24, 0x08	; 8
    17e0:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <tal_trx_status>
			return TRX_OFF;
    17e4:	11 c1       	rjmp	.+546    	; 0x1a08 <set_trx_state+0x28c>
		}
	}

	switch (trx_cmd) { /* requested state */
    17e6:	81 2f       	mov	r24, r17
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	fc 01       	movw	r30, r24
    17ec:	33 97       	sbiw	r30, 0x03	; 3
    17ee:	e7 31       	cpi	r30, 0x17	; 23
    17f0:	f1 05       	cpc	r31, r1
    17f2:	08 f0       	brcs	.+2      	; 0x17f6 <set_trx_state+0x7a>
    17f4:	5a c0       	rjmp	.+180    	; 0x18aa <set_trx_state+0x12e>
    17f6:	88 27       	eor	r24, r24
    17f8:	e6 56       	subi	r30, 0x66	; 102
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	8f 4f       	sbci	r24, 0xFF	; 255
    17fe:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__tablejump2__>
	case CMD_SLEEP:
		trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
#if (ANTENNA_DIVERSITY == 1)
		/* Disable antenna diversity: sets pulls */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_DISABLE);
    1808:	ed e4       	ldi	r30, 0x4D	; 77
    180a:	f1 e0       	ldi	r31, 0x01	; 1
    180c:	80 81       	ld	r24, Z
    180e:	8b 7f       	andi	r24, 0xFB	; 251
    1810:	80 83       	st	Z, r24
			uint16_t rand_value;

			/*
			 * Init the SEED value of the CSMA backoff algorithm.
			 */
			rand_value = (uint16_t)rand();
    1812:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <rand>
			trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    1816:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
			trx_bit_write(SR_CSMA_SEED_1,
    181a:	ee e6       	ldi	r30, 0x6E	; 110
    181c:	f1 e0       	ldi	r31, 0x01	; 1
    181e:	80 81       	ld	r24, Z
    1820:	97 70       	andi	r25, 0x07	; 7
    1822:	88 7f       	andi	r24, 0xF8	; 248
    1824:	89 2b       	or	r24, r25
    1826:	80 83       	st	Z, r24

		/*
		 * Clear existing interrupts to have clear interrupt flags
		 * during wake-up.
		 */
		trx_reg_write(RG_IRQ_STATUS, 0xFF);
    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>

		/*
		 * Enable Awake_end interrupt.
		 * This is used for save wake-up from sleep later.
		 */
		trx_reg_write(RG_IRQ_MASK, TRX_IRQ_AWAKE_ONLY);
    182e:	80 e8       	ldi	r24, 0x80	; 128
    1830:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

		PAL_WAIT_1_US();
    1834:	62 e0       	ldi	r22, 0x02	; 2
    1836:	70 e0       	ldi	r23, 0x00	; 0
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	74 df       	rcall	.-280    	; 0x1726 <__portable_avr_delay_cycles>
		TRX_SLP_TR_HIGH();
    183e:	e9 e3       	ldi	r30, 0x39	; 57
    1840:	f1 e0       	ldi	r31, 0x01	; 1
    1842:	80 81       	ld	r24, Z
    1844:	82 60       	ori	r24, 0x02	; 2
    1846:	80 83       	st	Z, r24
		pal_timer_delay(TRX_OFF_TO_SLEEP_TIME_CLKM_CYCLES);
    1848:	6f e2       	ldi	r22, 0x2F	; 47
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	6a df       	rcall	.-300    	; 0x1726 <__portable_avr_delay_cycles>
		tal_trx_status = TRX_SLEEP;
    1852:	8f e0       	ldi	r24, 0x0F	; 15
    1854:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <tal_trx_status>
		return TRX_SLEEP; /* transceiver register cannot be read during
    1858:	d7 c0       	rjmp	.+430    	; 0x1a08 <set_trx_state+0x28c>
		                   * TRX_SLEEP */

	case CMD_TRX_OFF:
		switch (tal_trx_status) {
    185a:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <tal_trx_status>
    185e:	88 30       	cpi	r24, 0x08	; 8
    1860:	21 f1       	breq	.+72     	; 0x18aa <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_TRX_OFF);
    1862:	88 e0       	ldi	r24, 0x08	; 8
    1864:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1868:	62 e0       	ldi	r22, 0x02	; 2
    186a:	70 e0       	ldi	r23, 0x00	; 0
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	5a df       	rcall	.-332    	; 0x1726 <__portable_avr_delay_cycles>
			break;
    1872:	1b c0       	rjmp	.+54     	; 0x18aa <set_trx_state+0x12e>
		}
		break;

	case CMD_FORCE_TRX_OFF:
		switch (tal_trx_status) {
    1874:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <tal_trx_status>
    1878:	88 30       	cpi	r24, 0x08	; 8
    187a:	b9 f0       	breq	.+46     	; 0x18aa <set_trx_state+0x12e>
		case TRX_OFF:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    187c:	83 e0       	ldi	r24, 0x03	; 3
    187e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1882:	62 e0       	ldi	r22, 0x02	; 2
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	4d df       	rcall	.-358    	; 0x1726 <__portable_avr_delay_cycles>
			break;
    188c:	0e c0       	rjmp	.+28     	; 0x18aa <set_trx_state+0x12e>
		}
		break;

	case CMD_PLL_ON:
		switch (tal_trx_status) {
    188e:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <tal_trx_status>
    1892:	88 30       	cpi	r24, 0x08	; 8
    1894:	49 f0       	breq	.+18     	; 0x18a8 <set_trx_state+0x12c>
    1896:	18 f4       	brcc	.+6      	; 0x189e <set_trx_state+0x122>
    1898:	86 30       	cpi	r24, 0x06	; 6
    189a:	39 f4       	brne	.+14     	; 0x18aa <set_trx_state+0x12e>
    189c:	09 c0       	rjmp	.+18     	; 0x18b0 <set_trx_state+0x134>
    189e:	86 31       	cpi	r24, 0x16	; 22
    18a0:	39 f0       	breq	.+14     	; 0x18b0 <set_trx_state+0x134>
    18a2:	89 31       	cpi	r24, 0x19	; 25
    18a4:	11 f4       	brne	.+4      	; 0x18aa <set_trx_state+0x12e>
		case PLL_ON:
			break;

		case TRX_OFF:
			switch_pll_on();
    18a6:	04 c0       	rjmp	.+8      	; 0x18b0 <set_trx_state+0x134>
    18a8:	49 df       	rcall	.-366    	; 0x173c <switch_pll_on>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
    18aa:	e1 e4       	ldi	r30, 0x41	; 65
    18ac:	f1 e0       	ldi	r31, 0x01	; 1
    18ae:	a6 c0       	rjmp	.+332    	; 0x19fc <set_trx_state+0x280>
			break;

		case RX_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    18b0:	89 e0       	ldi	r24, 0x09	; 9
    18b2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    18b6:	62 e0       	ldi	r22, 0x02	; 2
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	33 df       	rcall	.-410    	; 0x1726 <__portable_avr_delay_cycles>
			break;
    18c0:	f4 cf       	rjmp	.-24     	; 0x18aa <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_FORCE_PLL_ON:
		switch (tal_trx_status) {
    18c2:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <tal_trx_status>
    18c6:	88 30       	cpi	r24, 0x08	; 8
    18c8:	19 f0       	breq	.+6      	; 0x18d0 <set_trx_state+0x154>
    18ca:	89 30       	cpi	r24, 0x09	; 9
    18cc:	71 f3       	breq	.-36     	; 0x18aa <set_trx_state+0x12e>
		case TRX_OFF:
			switch_pll_on();
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <set_trx_state+0x158>
    18d0:	35 df       	rcall	.-406    	; 0x173c <switch_pll_on>
			break;
    18d2:	eb cf       	rjmp	.-42     	; 0x18aa <set_trx_state+0x12e>

		case PLL_ON:
			break;

		default:
			trx_reg_write(RG_TRX_STATE, CMD_FORCE_PLL_ON);
    18d4:	84 e0       	ldi	r24, 0x04	; 4
    18d6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			break;
    18da:	e7 cf       	rjmp	.-50     	; 0x18aa <set_trx_state+0x12e>
		}
		break;

	case CMD_RX_ON:
		switch (tal_trx_status) {
    18dc:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <tal_trx_status>
    18e0:	89 30       	cpi	r24, 0x09	; 9
    18e2:	41 f0       	breq	.+16     	; 0x18f4 <set_trx_state+0x178>
    18e4:	18 f4       	brcc	.+6      	; 0x18ec <set_trx_state+0x170>
    18e6:	88 30       	cpi	r24, 0x08	; 8
    18e8:	71 f0       	breq	.+28     	; 0x1906 <set_trx_state+0x18a>
    18ea:	df cf       	rjmp	.-66     	; 0x18aa <set_trx_state+0x12e>
    18ec:	86 31       	cpi	r24, 0x16	; 22
    18ee:	11 f0       	breq	.+4      	; 0x18f4 <set_trx_state+0x178>
    18f0:	89 31       	cpi	r24, 0x19	; 25
			break;

		case PLL_ON:
		case RX_AACK_ON:
		case TX_ARET_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    18f2:	d9 f6       	brne	.-74     	; 0x18aa <set_trx_state+0x12e>
    18f4:	86 e0       	ldi	r24, 0x06	; 6
			PAL_WAIT_1_US();
    18f6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    18fa:	62 e0       	ldi	r22, 0x02	; 2
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
			break;

		case TRX_OFF:
			switch_pll_on();
    1902:	11 df       	rcall	.-478    	; 0x1726 <__portable_avr_delay_cycles>
    1904:	d2 cf       	rjmp	.-92     	; 0x18aa <set_trx_state+0x12e>
			trx_reg_write(RG_TRX_STATE, CMD_RX_ON);
    1906:	1a df       	rcall	.-460    	; 0x173c <switch_pll_on>
    1908:	86 e0       	ldi	r24, 0x06	; 6
    190a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    190e:	62 e0       	ldi	r22, 0x02	; 2
    1910:	70 e0       	ldi	r23, 0x00	; 0
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	07 df       	rcall	.-498    	; 0x1726 <__portable_avr_delay_cycles>
			break;
    1918:	c8 cf       	rjmp	.-112    	; 0x18aa <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_RX_AACK_ON:
		switch (tal_trx_status) {
    191a:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <tal_trx_status>
    191e:	88 30       	cpi	r24, 0x08	; 8
    1920:	91 f0       	breq	.+36     	; 0x1946 <set_trx_state+0x1ca>
    1922:	18 f4       	brcc	.+6      	; 0x192a <set_trx_state+0x1ae>
    1924:	86 30       	cpi	r24, 0x06	; 6
    1926:	c9 f0       	breq	.+50     	; 0x195a <set_trx_state+0x1de>
    1928:	c0 cf       	rjmp	.-128    	; 0x18aa <set_trx_state+0x12e>
    192a:	89 30       	cpi	r24, 0x09	; 9
    192c:	19 f0       	breq	.+6      	; 0x1934 <set_trx_state+0x1b8>
    192e:	89 31       	cpi	r24, 0x19	; 25
		case RX_AACK_ON:
			break;

		case TX_ARET_ON:
		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    1930:	09 f0       	breq	.+2      	; 0x1934 <set_trx_state+0x1b8>
    1932:	bb cf       	rjmp	.-138    	; 0x18aa <set_trx_state+0x12e>
    1934:	86 e1       	ldi	r24, 0x16	; 22
			PAL_WAIT_1_US();
    1936:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    193a:	62 e0       	ldi	r22, 0x02	; 2
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1940:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
    1942:	f1 de       	rcall	.-542    	; 0x1726 <__portable_avr_delay_cycles>
    1944:	b2 cf       	rjmp	.-156    	; 0x18aa <set_trx_state+0x12e>
			                  * RX_AACK_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    1946:	fa de       	rcall	.-524    	; 0x173c <switch_pll_on>
    1948:	86 e1       	ldi	r24, 0x16	; 22
    194a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    194e:	62 e0       	ldi	r22, 0x02	; 2
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
			break;
    1956:	e7 de       	rcall	.-562    	; 0x1726 <__portable_avr_delay_cycles>

		case RX_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    1958:	a8 cf       	rjmp	.-176    	; 0x18aa <set_trx_state+0x12e>
    195a:	89 e0       	ldi	r24, 0x09	; 9
    195c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1960:	62 e0       	ldi	r22, 0x02	; 2
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	de de       	rcall	.-580    	; 0x1726 <__portable_avr_delay_cycles>
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
    196a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    196e:	8f 71       	andi	r24, 0x1F	; 31
    1970:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <tal_trx_status>
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
    1974:	89 30       	cpi	r24, 0x09	; 9
    1976:	09 f0       	breq	.+2      	; 0x197a <set_trx_state+0x1fe>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_RX_AACK_ON);
    1978:	47 c0       	rjmp	.+142    	; 0x1a08 <set_trx_state+0x28c>
    197a:	86 e1       	ldi	r24, 0x16	; 22
    197c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    1980:	62 e0       	ldi	r22, 0x02	; 2
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	ce de       	rcall	.-612    	; 0x1726 <__portable_avr_delay_cycles>
			break;
    198a:	8f cf       	rjmp	.-226    	; 0x18aa <set_trx_state+0x12e>
			break;
		}
		break;

	case CMD_TX_ARET_ON:
		switch (tal_trx_status) {
    198c:	80 91 a0 05 	lds	r24, 0x05A0	; 0x8005a0 <tal_trx_status>
    1990:	88 30       	cpi	r24, 0x08	; 8
    1992:	51 f1       	breq	.+84     	; 0x19e8 <set_trx_state+0x26c>
    1994:	18 f4       	brcc	.+6      	; 0x199c <set_trx_state+0x220>
    1996:	86 30       	cpi	r24, 0x06	; 6
    1998:	79 f0       	breq	.+30     	; 0x19b8 <set_trx_state+0x23c>
    199a:	87 cf       	rjmp	.-242    	; 0x18aa <set_trx_state+0x12e>
    199c:	89 30       	cpi	r24, 0x09	; 9
    199e:	19 f0       	breq	.+6      	; 0x19a6 <set_trx_state+0x22a>
    19a0:	86 31       	cpi	r24, 0x16	; 22
    19a2:	51 f0       	breq	.+20     	; 0x19b8 <set_trx_state+0x23c>
		case TX_ARET_ON:
			break;

		case PLL_ON:
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    19a4:	82 cf       	rjmp	.-252    	; 0x18aa <set_trx_state+0x12e>
    19a6:	89 e1       	ldi	r24, 0x19	; 25
			PAL_WAIT_1_US();
    19a8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    19ac:	62 e0       	ldi	r22, 0x02	; 2
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
			break;
    19b4:	b8 de       	rcall	.-656    	; 0x1726 <__portable_avr_delay_cycles>

		case RX_ON:
		case RX_AACK_ON:
			trx_reg_write(RG_TRX_STATE, CMD_PLL_ON);
    19b6:	79 cf       	rjmp	.-270    	; 0x18aa <set_trx_state+0x12e>
    19b8:	89 e0       	ldi	r24, 0x09	; 9
    19ba:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    19be:	62 e0       	ldi	r22, 0x02	; 2
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	80 e0       	ldi	r24, 0x00	; 0
			/* check if state change could be applied */
			tal_trx_status = (tal_trx_status_t)trx_bit_read(
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	af de       	rcall	.-674    	; 0x1726 <__portable_avr_delay_cycles>
    19c8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    19cc:	8f 71       	andi	r24, 0x1F	; 31
					SR_TRX_STATUS);
			if (tal_trx_status != PLL_ON) {
    19ce:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <tal_trx_status>
				return tal_trx_status;
			}

			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    19d2:	89 30       	cpi	r24, 0x09	; 9
    19d4:	c9 f4       	brne	.+50     	; 0x1a08 <set_trx_state+0x28c>
			PAL_WAIT_1_US();
    19d6:	89 e1       	ldi	r24, 0x19	; 25
    19d8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    19dc:	62 e0       	ldi	r22, 0x02	; 2
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	80 e0       	ldi	r24, 0x00	; 0
			break;
    19e2:	90 e0       	ldi	r25, 0x00	; 0

		case TRX_OFF:
			switch_pll_on(); /* state change from TRX_OFF to
    19e4:	a0 de       	rcall	.-704    	; 0x1726 <__portable_avr_delay_cycles>
    19e6:	61 cf       	rjmp	.-318    	; 0x18aa <set_trx_state+0x12e>
			                  * TX_ARET_ON can be done directly, too
			                  **/
			trx_reg_write(RG_TRX_STATE, CMD_TX_ARET_ON);
    19e8:	a9 de       	rcall	.-686    	; 0x173c <switch_pll_on>
    19ea:	89 e1       	ldi	r24, 0x19	; 25
    19ec:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
			PAL_WAIT_1_US();
    19f0:	62 e0       	ldi	r22, 0x02	; 2
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	96 de       	rcall	.-724    	; 0x1726 <__portable_avr_delay_cycles>
			break;
    19fa:	57 cf       	rjmp	.-338    	; 0x18aa <set_trx_state+0x12e>
		Assert("trx command not handled" == 0);
		break;
	}

	do {
		tal_trx_status = (tal_trx_status_t)trx_bit_read(
    19fc:	80 81       	ld	r24, Z
    19fe:	8f 71       	andi	r24, 0x1F	; 31
    1a00:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <tal_trx_status>
				SR_TRX_STATUS);
	} while (tal_trx_status == STATE_TRANSITION_IN_PROGRESS);
    1a04:	8f 31       	cpi	r24, 0x1F	; 31
    1a06:	d1 f3       	breq	.-12     	; 0x19fc <set_trx_state+0x280>

	return tal_trx_status;
} /* set_trx_state() */
    1a08:	0f 90       	pop	r0
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	08 95       	ret

00001a12 <tal_task>:
 * - Checks and allocates the receive buffer.
 * - Processes the TAL incoming frame queue.
 * - Implements the TAL state machine.
 */
void tal_task(void)
{
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
	/* Check if the receiver needs to be switched on. */
	if (tal_rx_on_required && (tal_state == TAL_IDLE)) {
    1a16:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <tal_rx_on_required>
    1a1a:	88 23       	and	r24, r24
    1a1c:	19 f1       	breq	.+70     	; 0x1a64 <tal_task+0x52>
    1a1e:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <tal_state>
    1a22:	81 11       	cpse	r24, r1
    1a24:	1f c0       	rjmp	.+62     	; 0x1a64 <tal_task+0x52>
		/* Check if a receive buffer has not been available before. */
		if (tal_rx_buffer == NULL) {
    1a26:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <tal_rx_buffer>
    1a2a:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <tal_rx_buffer+0x1>
    1a2e:	89 2b       	or	r24, r25
    1a30:	41 f4       	brne	.+16     	; 0x1a42 <tal_task+0x30>
			tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1a32:	8b e8       	ldi	r24, 0x8B	; 139
    1a34:	b7 dd       	rcall	.-1170   	; 0x15a4 <bmm_buffer_alloc>
    1a36:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <tal_rx_buffer+0x1>
    1a3a:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <tal_rx_buffer>
		}

		/* Check if buffer could be allocated */
		if (NULL != tal_rx_buffer) {
    1a3e:	89 2b       	or	r24, r25
    1a40:	89 f0       	breq	.+34     	; 0x1a64 <tal_task+0x52>
			/*
			 * Note:
			 * This flag needs to be reset BEFORE the received is
			 * switched on.
			 */
			tal_rx_on_required = false;
    1a42:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <tal_rx_on_required>
			/*
			 * Release the protected buffer and set it again for
			 * further protection
			 * since the buffer is available now.
			 */
			trx_bit_write(SR_RX_SAFE_MODE,
    1a46:	cc e4       	ldi	r28, 0x4C	; 76
    1a48:	d1 e0       	ldi	r29, 0x01	; 1
    1a4a:	88 81       	ld	r24, Y
    1a4c:	8f 77       	andi	r24, 0x7F	; 127
    1a4e:	88 83       	st	Y, r24
			                                                *
			                                                *
			                                                *protection
			                                                * mode
			                                                **/
			pal_timer_delay(2); /* Allow pin change to get effective
    1a50:	63 e0       	ldi	r22, 0x03	; 3
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	66 de       	rcall	.-820    	; 0x1726 <__portable_avr_delay_cycles>
			                    **/
			trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    1a5a:	88 81       	ld	r24, Y
    1a5c:	80 68       	ori	r24, 0x80	; 128
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    1a5e:	88 83       	st	Y, r24
    1a60:	86 e1       	ldi	r24, 0x16	; 22
    1a62:	8c de       	rcall	.-744    	; 0x177c <set_trx_state>

	/*
	 * If the transceiver has received a frame and it has been placed
	 * into the queue of the TAL, the frame needs to be processed further.
	 */
	if (tal_incoming_frame_queue.size > 0) {
    1a64:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <tal_incoming_frame_queue+0x4>
    1a68:	88 23       	and	r24, r24
    1a6a:	41 f0       	breq	.+16     	; 0x1a7c <tal_task+0x6a>
		buffer_t *rx_frame;

		/* Check if there are any pending data in the
		 * incoming_frame_queue. */
		rx_frame = qmm_queue_remove(&tal_incoming_frame_queue, NULL);
    1a6c:	60 e0       	ldi	r22, 0x00	; 0
    1a6e:	70 e0       	ldi	r23, 0x00	; 0
    1a70:	8a e7       	ldi	r24, 0x7A	; 122
    1a72:	95 e0       	ldi	r25, 0x05	; 5
		if (NULL != rx_frame) {
    1a74:	54 de       	rcall	.-856    	; 0x171e <qmm_queue_remove>
    1a76:	00 97       	sbiw	r24, 0x00	; 0
			process_incoming_frame(rx_frame);
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <tal_task+0x6a>
		}
	}

	/* Handle the TAL state machines */
	switch (tal_state) {
    1a7a:	25 d5       	rcall	.+2634   	; 0x24c6 <process_incoming_frame>
    1a7c:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <tal_state>
    1a80:	82 30       	cpi	r24, 0x02	; 2
		/* Wait until state is changed to TAL_TX_DONE inside tx end ISR
		**/
		break;

	case TAL_TX_DONE:
		tx_done_handling(); /* see tal_tx.c */
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <tal_task+0x74>
    1a84:	87 d5       	rcall	.+2830   	; 0x2594 <tx_done_handling>
#endif /* (MAC_SCAN_ED_REQUEST_CONFIRM == 1) */
	default:
		Assert("tal_state is not handled" == 0);
		break;
	}
} /* tal_task() */
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	08 95       	ret

00001a8c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1a8c:	04 c0       	rjmp	.+8      	; 0x1a96 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1a8e:	61 50       	subi	r22, 0x01	; 1
    1a90:	71 09       	sbc	r23, r1
    1a92:	81 09       	sbc	r24, r1
    1a94:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1a96:	61 15       	cp	r22, r1
    1a98:	71 05       	cpc	r23, r1
    1a9a:	81 05       	cpc	r24, r1
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	b9 f7       	brne	.-18     	; 0x1a8e <__portable_avr_delay_cycles+0x2>
    1aa0:	08 95       	ret

00001aa2 <tal_generate_rand_seed>:
 * value and restoring this state after finishing the sequence.
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
    1aa2:	ff 92       	push	r15
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
	uint8_t cur_random_val = 0;

	/* Ensure that PLL has locked and receive mode is reached. */
	tal_trx_status_t trx_state;
	do {
		trx_state = set_trx_state(CMD_RX_ON);
    1aac:	86 e0       	ldi	r24, 0x06	; 6
    1aae:	66 de       	rcall	.-820    	; 0x177c <set_trx_state>
	} while (trx_state != RX_ON);
    1ab0:	86 30       	cpi	r24, 0x06	; 6
    1ab2:	e1 f7       	brne	.-8      	; 0x1aac <tal_generate_rand_seed+0xa>

	/* Ensure that register bit RX_PDT_DIS is set to 0. */
	trx_bit_write(SR_RX_PDT_DIS, RX_ENABLE);
    1ab4:	e5 e5       	ldi	r30, 0x55	; 85
    1ab6:	f1 e0       	ldi	r31, 0x01	; 1
    1ab8:	80 81       	ld	r24, Z
    1aba:	8f 77       	andi	r24, 0x7F	; 127
    1abc:	80 83       	st	Z, r24

	/*
	 * We need to disable TRX IRQs while generating random values in RX_ON,
	 * we do not want to receive frames at this point of time at all.
	 */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_NONE);
    1abe:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
    1ac2:	68 94       	set
    1ac4:	ff 24       	eor	r15, r15
    1ac6:	f3 f8       	bld	r15, 3
 * Since in our case the function is called from TRX_OFF, this is not required
 * here.
 */
void tal_generate_rand_seed(void)
{
	uint16_t seed = 0;
    1ac8:	c0 e0       	ldi	r28, 0x00	; 0
    1aca:	d0 e0       	ldi	r29, 0x00	; 0
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
		/* Now we can safely read the 2-bit random number. */
		cur_random_val = trx_bit_read(SR_RND_VALUE);
    1acc:	06 e4       	ldi	r16, 0x46	; 70
    1ace:	11 e0       	ldi	r17, 0x01	; 1
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	90 81       	ld	r25, Z
		seed = seed << 2;
    1ad4:	cc 0f       	add	r28, r28
    1ad6:	dd 1f       	adc	r29, r29
    1ad8:	cc 0f       	add	r28, r28
    1ada:	dd 1f       	adc	r29, r29
		seed |= cur_random_val;
    1adc:	90 76       	andi	r25, 0x60	; 96
    1ade:	29 2f       	mov	r18, r25
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	36 95       	lsr	r19
    1ae4:	27 95       	ror	r18
    1ae6:	32 95       	swap	r19
    1ae8:	22 95       	swap	r18
    1aea:	2f 70       	andi	r18, 0x0F	; 15
    1aec:	23 27       	eor	r18, r19
    1aee:	3f 70       	andi	r19, 0x0F	; 15
    1af0:	23 27       	eor	r18, r19
    1af2:	c2 2b       	or	r28, r18
    1af4:	d3 2b       	or	r29, r19
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
    1af6:	62 e0       	ldi	r22, 0x02	; 2
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	c6 df       	rcall	.-116    	; 0x1a8c <__portable_avr_delay_cycles>
    1b00:	fa 94       	dec	r15

	/*
	 * The 16-bit random value is generated from various 2-bit random
	 * values.
	 */
	for (uint8_t i = 0; i < 8; i++) {
    1b02:	f1 10       	cpse	r15, r1
		seed = seed << 2;
		seed |= cur_random_val;
		PAL_WAIT_1_US(); /* wait that the random value gets updated */
	}

	set_trx_state(CMD_FORCE_TRX_OFF);
    1b04:	e5 cf       	rjmp	.-54     	; 0x1ad0 <tal_generate_rand_seed+0x2e>
    1b06:	83 e0       	ldi	r24, 0x03	; 3
    1b08:	39 de       	rcall	.-910    	; 0x177c <set_trx_state>

	/*
	 * Now we need to clear potential pending TRX IRQs and
	 * enable the TRX IRQs again.
	 */
	trx_reg_write(RG_IRQ_STATUS, 0xFF);
    1b0a:	8f ef       	ldi	r24, 0xFF	; 255
    1b0c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    1b10:	88 e4       	ldi	r24, 0x48	; 72
    1b12:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

	/* Set the seed for the random number generator. */
	srand(seed);
    1b16:	ce 01       	movw	r24, r28
    1b18:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <srand>
}
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	08 95       	ret

00001b28 <internal_tal_reset>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
    1b28:	ff 92       	push	r15
    1b2a:	0f 93       	push	r16
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	f8 2e       	mov	r15, r24
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	/* trx might sleep, so wake it up */
	TRX_SLP_TR_LOW();
    1b34:	c9 e3       	ldi	r28, 0x39	; 57
    1b36:	d1 e0       	ldi	r29, 0x01	; 1
    1b38:	88 81       	ld	r24, Y
    1b3a:	8d 7f       	andi	r24, 0xFD	; 253
    1b3c:	88 83       	st	Y, r24
	pal_timer_delay(SLEEP_TO_TRX_OFF_TYP_US);
    1b3e:	61 e4       	ldi	r22, 0x41	; 65
    1b40:	71 e0       	ldi	r23, 0x01	; 1
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	a2 df       	rcall	.-188    	; 0x1a8c <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    1b48:	88 81       	ld	r24, Y
    1b4a:	8e 7f       	andi	r24, 0xFE	; 254
    1b4c:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    1b4e:	62 e0       	ldi	r22, 0x02	; 2
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9a df       	rcall	.-204    	; 0x1a8c <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    1b58:	88 81       	ld	r24, Y
    1b5a:	81 60       	ori	r24, 0x01	; 1
    1b5c:	88 83       	st	Y, r24

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1b5e:	66 e8       	ldi	r22, 0x86	; 134
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	92 df       	rcall	.-220    	; 0x1a8c <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1b68:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1b6c:	8f 71       	andi	r24, 0x1F	; 31
    1b6e:	ca e0       	ldi	r28, 0x0A	; 10
    1b70:	01 e4       	ldi	r16, 0x41	; 65
    1b72:	11 e0       	ldi	r17, 0x01	; 1
    1b74:	0a c0       	rjmp	.+20     	; 0x1b8a <internal_tal_reset+0x62>
	TRX_RST_HIGH();

	/* verify that trx has reached TRX_OFF */
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1b76:	66 e8       	ldi	r22, 0x86	; 134
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	86 df       	rcall	.-244    	; 0x1a8c <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1b80:	f8 01       	movw	r30, r16
    1b82:	80 81       	ld	r24, Z
    1b84:	8f 71       	andi	r24, 0x1F	; 31
    1b86:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == SLEEP_TO_TRX_OFF_ATTEMPTS) {
    1b88:	c9 f1       	breq	.+114    	; 0x1bfc <internal_tal_reset+0xd4>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    1b8a:	88 30       	cpi	r24, 0x08	; 8

	tal_trx_status = TRX_OFF;
    1b8c:	a1 f7       	brne	.-24     	; 0x1b76 <internal_tal_reset+0x4e>
    1b8e:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <tal_trx_status>

	/*
	 * Generate a seed for the random number generator in function rand().
	 * This is required (for example) as seed for the CSMA-CA algorithm.
	 */
	tal_generate_rand_seed();
    1b92:	87 df       	rcall	.-242    	; 0x1aa2 <tal_generate_rand_seed>
	 */

	/*
	 * Init the SEED value of the CSMA backoff algorithm.
	 */
	uint16_t rand_value = (uint16_t)rand();
    1b94:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <rand>
	trx_reg_write(RG_CSMA_SEED_0, (uint8_t)rand_value);
    1b98:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7c016d>
	trx_bit_write(SR_CSMA_SEED_1, (uint8_t)(rand_value >> 8));
    1b9c:	ee e6       	ldi	r30, 0x6E	; 110
    1b9e:	f1 e0       	ldi	r31, 0x01	; 1
    1ba0:	80 81       	ld	r24, Z
    1ba2:	97 70       	andi	r25, 0x07	; 7
    1ba4:	88 7f       	andi	r24, 0xF8	; 248
    1ba6:	89 2b       	or	r24, r25
    1ba8:	80 83       	st	Z, r24

	trx_bit_write(SR_AACK_SET_PD, PD_ACK_BIT_SET_ENABLE); /* ACKs for
    1baa:	80 81       	ld	r24, Z
    1bac:	80 62       	ori	r24, 0x20	; 32
    1bae:	80 83       	st	Z, r24
	                                                       * data
	                                                       * requests,
	                                                       * indicate
	                                                       * pending data
	                                                       **/
	trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /* Enable
    1bb0:	ec e4       	ldi	r30, 0x4C	; 76
    1bb2:	f1 e0       	ldi	r31, 0x01	; 1
    1bb4:	80 81       	ld	r24, Z
    1bb6:	80 68       	ori	r24, 0x80	; 128
    1bb8:	80 83       	st	Z, r24
	                                                     * buffer
	                                                     * protection
	                                                     * mode */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    1bba:	88 e4       	ldi	r24, 0x48	; 72
    1bbc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	/* The TX start timestamp is taken by the respective PAL layer */
	trx_reg_write(RG_IRQ_MASK1, (1 << TX_START_EN));
#endif
	trx_reg_write(0x156, 0xFF); /* RPC feature configuration. */
    1bc0:	8f ef       	ldi	r24, 0xFF	; 255
    1bc2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x7c0156>

#if (ANTENNA_DIVERSITY == 1)
	/* Use antenna diversity */
	trx_bit_write(SR_ANT_CTRL, ANTENNA_DEFAULT);
    1bc6:	ed e4       	ldi	r30, 0x4D	; 77
    1bc8:	f1 e0       	ldi	r31, 0x01	; 1
    1bca:	80 81       	ld	r24, Z
    1bcc:	8c 7f       	andi	r24, 0xFC	; 252
    1bce:	82 60       	ori	r24, 0x02	; 2
    1bd0:	80 83       	st	Z, r24
	trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    1bd2:	aa e4       	ldi	r26, 0x4A	; 74
    1bd4:	b1 e0       	ldi	r27, 0x01	; 1
    1bd6:	8c 91       	ld	r24, X
    1bd8:	80 7f       	andi	r24, 0xF0	; 240
    1bda:	83 60       	ori	r24, 0x03	; 3
    1bdc:	8c 93       	st	X, r24
	trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    1bde:	80 81       	ld	r24, Z
    1be0:	88 60       	ori	r24, 0x08	; 8
	trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    1be2:	80 83       	st	Z, r24
    1be4:	80 81       	ld	r24, Z
	tal_generate_rand_seed();

	/* Configure the transceiver register values. */
	trx_config();

	if (set_default_pib) {
    1be6:	84 60       	ori	r24, 0x04	; 4
		/* Set the default PIB values */
		init_tal_pib(); /* implementation can be found in 'tal_pib.c' */
    1be8:	80 83       	st	Z, r24
    1bea:	f1 10       	cpse	r15, r1

	/*
	 * Write all PIB values to the transceiver
	 * that are needed by the transceiver itself.
	 */
	write_all_tal_pib_to_trx(); /* implementation can be found in
    1bec:	30 d2       	rcall	.+1120   	; 0x204e <init_tal_pib>
    1bee:	7d d2       	rcall	.+1274   	; 0x20ea <write_all_tal_pib_to_trx>
	                             *'tal_pib.c' */

	/* Reset TAL variables. */
	tal_state = TAL_IDLE;
    1bf0:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <tal_state>

#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	tal_beacon_transmission = false;
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;
    1bf4:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <tal_rx_on_required>

	return MAC_SUCCESS;
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	01 c0       	rjmp	.+2      	; 0x1bfe <internal_tal_reset+0xd6>
 *         FAILURE otherwise
 */
static retval_t internal_tal_reset(bool set_default_pib)
{
	if (trx_reset() != MAC_SUCCESS) {
		return FAILURE;
    1bfc:	85 e8       	ldi	r24, 0x85	; 133
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */

	tal_rx_on_required = false;

	return MAC_SUCCESS;
}
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	08 95       	ret

00001c0a <tal_init>:
 * \return MAC_SUCCESS  if the transceiver state is changed to TRX_OFF and the
 *                 current device part number and version number are correct;
 *         FAILURE otherwise
 */
retval_t tal_init(void)
{
    1c0a:	cf 92       	push	r12
    1c0c:	df 92       	push	r13
    1c0e:	ef 92       	push	r14
    1c10:	ff 92       	push	r15
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
	MCUSR = 0;
    1c1a:	14 be       	out	0x34, r1	; 52

	/* Enable SRAM Data Retention */
	DRTRAM0 = _BV(ENDRT);
    1c1c:	80 e1       	ldi	r24, 0x10	; 16
    1c1e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <__TEXT_REGION_LENGTH__+0x7c0135>
	DRTRAM1 = _BV(ENDRT);
    1c22:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
	DRTRAM2 = _BV(ENDRT);
    1c26:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <__TEXT_REGION_LENGTH__+0x7c0133>
	DRTRAM3 = _BV(ENDRT);
    1c2a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
    1c2e:	92 dc       	rcall	.-1756   	; 0x1554 <pal_init>
    1c30:	81 11       	cpse	r24, r1
    1c32:	6d c0       	rjmp	.+218    	; 0x1d0e <tal_init+0x104>
	} else if (module == &TCCR4A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
	} else if (module == &TCCR5A) {
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
	} else if (module == &TRX_CTRL_0) {
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    1c34:	60 e4       	ldi	r22, 0x40	; 64
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	49 d8       	rcall	.-3950   	; 0xccc <sysclk_enable_module>
{
	tal_trx_status_t trx_status;
	uint8_t poll_counter = 0;

	sysclk_enable_peripheral_clock(&TRX_CTRL_0);
	TRX_RST_HIGH();
    1c3a:	c9 e3       	ldi	r28, 0x39	; 57
    1c3c:	d1 e0       	ldi	r29, 0x01	; 1
    1c3e:	88 81       	ld	r24, Y
    1c40:	81 60       	ori	r24, 0x01	; 1
    1c42:	88 83       	st	Y, r24
	TRX_SLP_TR_LOW();
    1c44:	88 81       	ld	r24, Y
    1c46:	8d 7f       	andi	r24, 0xFD	; 253
    1c48:	88 83       	st	Y, r24

	pal_timer_delay(P_ON_TO_CLKM_AVAILABLE_TYP_US);
    1c4a:	6b ef       	ldi	r22, 0xFB	; 251
    1c4c:	71 e0       	ldi	r23, 0x01	; 1
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	1c df       	rcall	.-456    	; 0x1a8c <__portable_avr_delay_cycles>

	/* Apply reset pulse */
	TRX_RST_LOW();
    1c54:	88 81       	ld	r24, Y
    1c56:	8e 7f       	andi	r24, 0xFE	; 254
    1c58:	88 83       	st	Y, r24
	pal_timer_delay(RST_PULSE_WIDTH_US);
    1c5a:	62 e0       	ldi	r22, 0x02	; 2
    1c5c:	70 e0       	ldi	r23, 0x00	; 0
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	14 df       	rcall	.-472    	; 0x1a8c <__portable_avr_delay_cycles>
	TRX_RST_HIGH();
    1c64:	88 81       	ld	r24, Y
    1c66:	81 60       	ori	r24, 0x01	; 1
    1c68:	88 83       	st	Y, r24

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1c6a:	66 e8       	ldi	r22, 0x86	; 134
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	0c df       	rcall	.-488    	; 0x1a8c <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1c74:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7c0141>
    1c78:	8f 71       	andi	r24, 0x1F	; 31
    1c7a:	ca e0       	ldi	r28, 0x0A	; 10
    1c7c:	01 e4       	ldi	r16, 0x41	; 65
    1c7e:	11 e0       	ldi	r17, 0x01	; 1
    1c80:	0b c0       	rjmp	.+22     	; 0x1c98 <tal_init+0x8e>

	/* Verify that the trx has reached TRX_OFF. */
	poll_counter = 0;
	do {
		/* Wait a short time interval. */
		pal_timer_delay(TRX_POLL_WAIT_TIME_US);
    1c82:	66 e8       	ldi	r22, 0x86	; 134
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	00 df       	rcall	.-512    	; 0x1a8c <__portable_avr_delay_cycles>

		trx_status = (tal_trx_status_t)trx_bit_read(SR_TRX_STATUS);
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	80 81       	ld	r24, Z
    1c90:	8f 71       	andi	r24, 0x1F	; 31
    1c92:	c1 50       	subi	r28, 0x01	; 1

		/* Wait not more than max. value of TR2. */
		if (poll_counter == RESET_TO_TRX_OFF_ATTEMPTS) {
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <tal_init+0x8e>
    1c96:	51 c0       	rjmp	.+162    	; 0x1d3a <tal_init+0x130>
#endif
			return FAILURE;
		}

		poll_counter++;
	} while (trx_status != TRX_OFF);
    1c98:	88 30       	cpi	r24, 0x08	; 8
    1c9a:	99 f7       	brne	.-26     	; 0x1c82 <tal_init+0x78>

	tal_trx_status = TRX_OFF;
    1c9c:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <tal_trx_status>

#if !defined(FPGA_EMULATION)
	/* Check if actually running on an ATmegaRFR2 device. */
	if (ATMEGARFR2_PART_NUM != trx_reg_read(RG_PART_NUM)) {
    1ca0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7c015c>
    1ca4:	84 39       	cpi	r24, 0x94	; 148
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <tal_init+0xa0>
    1ca8:	48 c0       	rjmp	.+144    	; 0x1d3a <tal_init+0x130>
    1caa:	35 c0       	rjmp	.+106    	; 0x1d16 <tal_init+0x10c>
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
			*ptr_pib++ = (uint8_t)rand();
    1cac:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <rand>
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	81 93       	st	Z+, r24
    1cb4:	8f 01       	movw	r16, r30
		 * generated
		 * in function tal_generate_rand_seed().
		 */
		uint8_t *ptr_pib = (uint8_t *)&tal_pib.IeeeAddress;

		for (uint8_t i = 0; i < 8; i++) {
    1cb6:	ec 15       	cp	r30, r12
    1cb8:	fd 05       	cpc	r31, r13
    1cba:	c1 f7       	brne	.-16     	; 0x1cac <tal_init+0xa2>
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    1cbc:	f7 01       	movw	r30, r14
    1cbe:	20 81       	ld	r18, Z
    1cc0:	31 81       	ldd	r19, Z+1	; 0x01
    1cc2:	42 81       	ldd	r20, Z+2	; 0x02
    1cc4:	53 81       	ldd	r21, Z+3	; 0x03
    1cc6:	64 81       	ldd	r22, Z+4	; 0x04
    1cc8:	75 81       	ldd	r23, Z+5	; 0x05
    1cca:	86 81       	ldd	r24, Z+6	; 0x06
    1ccc:	97 81       	ldd	r25, Z+7	; 0x07
    1cce:	af ef       	ldi	r26, 0xFF	; 255
    1cd0:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__adddi3_s8>
    1cd4:	ad ef       	ldi	r26, 0xFD	; 253
    1cd6:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <__cmpdi2_s8>
    1cda:	21 f0       	breq	.+8      	; 0x1ce4 <tal_init+0xda>
    1cdc:	18 f0       	brcs	.+6      	; 0x1ce4 <tal_init+0xda>
    1cde:	01 e8       	ldi	r16, 0x81	; 129
    1ce0:	15 e0       	ldi	r17, 0x05	; 5

	/*
	 * Configure interrupt handling.
	 * Install handlers for the transceiver interrupts.
	 */
	pal_trx_irq_init_rx_end((FUNC_PTR)trx_rx_end_handler_cb);
    1ce2:	e4 cf       	rjmp	.-56     	; 0x1cac <tal_init+0xa2>
    1ce4:	81 ed       	ldi	r24, 0xD1	; 209
    1ce6:	9f e0       	ldi	r25, 0x0F	; 15
	pal_trx_irq_init_tx_end((FUNC_PTR)trx_tx_end_handler_cb);
    1ce8:	38 d0       	rcall	.+112    	; 0x1d5a <pal_trx_irq_init_rx_end>
    1cea:	82 ee       	ldi	r24, 0xE2	; 226
	pal_trx_irq_init_awake((FUNC_PTR)trx_awake_handler_cb);
    1cec:	9f e0       	ldi	r25, 0x0F	; 15
    1cee:	30 d0       	rcall	.+96     	; 0x1d50 <pal_trx_irq_init_tx_end>
    1cf0:	83 ef       	ldi	r24, 0xF3	; 243
    1cf2:	9f e0       	ldi	r25, 0x0F	; 15
	pal_trx_irq_init_tstamp((FUNC_PTR)trx_irq_timestamp_handler_cb);
#endif /* (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Initialize the buffer management module and get a buffer to store
	 * reveived frames. */
	bmm_buffer_init();
    1cf4:	37 d0       	rcall	.+110    	; 0x1d64 <pal_trx_irq_init_awake>
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    1cf6:	32 dc       	rcall	.-1948   	; 0x155c <bmm_buffer_init>
    1cf8:	8b e8       	ldi	r24, 0x8B	; 139
    1cfa:	54 dc       	rcall	.-1880   	; 0x15a4 <bmm_buffer_alloc>
    1cfc:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <tal_rx_buffer+0x1>
    1d00:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <tal_rx_buffer>
	/* Init incoming frame queue */
#ifdef ENABLE_QUEUE_CAPACITY
	qmm_queue_init(&tal_incoming_frame_queue,
			TAL_INCOMING_FRAME_QUEUE_CAPACITY);
#else
	qmm_queue_init(&tal_incoming_frame_queue);
    1d04:	8a e7       	ldi	r24, 0x7A	; 122
    1d06:	95 e0       	ldi	r25, 0x05	; 5
#endif  /* ENABLE_QUEUE_CAPACITY */

#ifdef ENABLE_TFA
	tfa_init();
    1d08:	de dc       	rcall	.-1604   	; 0x16c6 <qmm_queue_init>
    1d0a:	da d5       	rcall	.+2996   	; 0x28c0 <tfa_init>
#endif

	return MAC_SUCCESS;
    1d0c:	17 c0       	rjmp	.+46     	; 0x1d3c <tal_init+0x132>
	DRTRAM2 = _BV(ENDRT);
	DRTRAM3 = _BV(ENDRT);

	/* Init the PAL and by this means also the transceiver interface */
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
    1d0e:	c5 e8       	ldi	r28, 0x85	; 133
    1d10:	15 c0       	rjmp	.+42     	; 0x1d3c <tal_init+0x132>
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
		return FAILURE;
    1d12:	c5 e8       	ldi	r28, 0x85	; 133
    1d14:	13 c0       	rjmp	.+38     	; 0x1d3c <tal_init+0x132>
	/*
	 * Do the reset stuff.
	 * Set the default PIBs.
	 * Generate random seed.
	 */
	if (internal_tal_reset(true) != MAC_SUCCESS) {
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	07 df       	rcall	.-498    	; 0x1b28 <internal_tal_reset>
    1d1a:	c8 2f       	mov	r28, r24
    1d1c:	81 11       	cpse	r24, r1
    1d1e:	f9 cf       	rjmp	.-14     	; 0x1d12 <tal_init+0x108>
    1d20:	0f 2e       	mov	r0, r31
	/*
	 * This while loop is on purpose, since just in the
	 * rare case that such an address is randomly
	 * generated again, we must repeat this.
	 */
	while ((tal_pib.IeeeAddress == 0x0000000000000000) ||
    1d22:	f1 e8       	ldi	r31, 0x81	; 129
    1d24:	ef 2e       	mov	r14, r31
    1d26:	f5 e0       	ldi	r31, 0x05	; 5
    1d28:	ff 2e       	mov	r15, r31
    1d2a:	f0 2d       	mov	r31, r0
    1d2c:	0f 2e       	mov	r0, r31
    1d2e:	f9 e8       	ldi	r31, 0x89	; 137
    1d30:	cf 2e       	mov	r12, r31
    1d32:	f5 e0       	ldi	r31, 0x05	; 5
    1d34:	df 2e       	mov	r13, r31
    1d36:	f0 2d       	mov	r31, r0
    1d38:	c1 cf       	rjmp	.-126    	; 0x1cbc <tal_init+0xb2>
    1d3a:	c5 e8       	ldi	r28, 0x85	; 133
	if (pal_init() != MAC_SUCCESS) {
		return FAILURE;
	}

	if (trx_init() != MAC_SUCCESS) {
		return FAILURE;
    1d3c:	8c 2f       	mov	r24, r28
#ifdef ENABLE_TFA
	tfa_init();
#endif

	return MAC_SUCCESS;
} /* tal_init() */
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0f 91       	pop	r16
    1d46:	ff 90       	pop	r15
    1d48:	ef 90       	pop	r14
    1d4a:	df 90       	pop	r13
    1d4c:	cf 90       	pop	r12
    1d4e:	08 95       	ret

00001d50 <pal_trx_irq_init_tx_end>:
    1d50:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <irq_hdl_trx_tx_end+0x1>
 *
 * \param trx_irq_cb Callback function for the transceiver CCA ED END interrupt
 */
void pal_trx_irq_init_cca_ed(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_cca_ed = (irq_handler_t)trx_irq_cb;
    1d54:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <irq_hdl_trx_tx_end>
    1d58:	08 95       	ret

00001d5a <pal_trx_irq_init_rx_end>:
    1d5a:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <irq_hdl_trx_rx_end+0x1>
    1d5e:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <irq_hdl_trx_rx_end>
    1d62:	08 95       	ret

00001d64 <pal_trx_irq_init_awake>:
 *
 * \param trx_irq_cb Callback function for the transceiver AWAKE interrupt
 */
void pal_trx_irq_init_awake(FUNC_PTR trx_irq_cb)
{
	irq_hdl_trx_awake = (irq_handler_t)trx_irq_cb;
    1d64:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <irq_hdl_trx_awake+0x1>
    1d68:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <irq_hdl_trx_awake>
    1d6c:	08 95       	ret

00001d6e <__vector_63>:

/**
 * \brief ISR for transceiver's transmit end interrupt
 */
ISR(TRX24_TX_END_vect)
{
    1d6e:	1f 92       	push	r1
    1d70:	0f 92       	push	r0
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	0f 92       	push	r0
    1d76:	11 24       	eor	r1, r1
    1d78:	0b b6       	in	r0, 0x3b	; 59
    1d7a:	0f 92       	push	r0
    1d7c:	2f 93       	push	r18
    1d7e:	3f 93       	push	r19
    1d80:	4f 93       	push	r20
    1d82:	5f 93       	push	r21
    1d84:	6f 93       	push	r22
    1d86:	7f 93       	push	r23
    1d88:	8f 93       	push	r24
    1d8a:	9f 93       	push	r25
    1d8c:	af 93       	push	r26
    1d8e:	bf 93       	push	r27
    1d90:	ef 93       	push	r30
    1d92:	ff 93       	push	r31
	irq_hdl_trx_tx_end();
    1d94:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <irq_hdl_trx_tx_end>
    1d98:	f0 91 72 04 	lds	r31, 0x0472	; 0x800472 <irq_hdl_trx_tx_end+0x1>
    1d9c:	19 95       	eicall
}
    1d9e:	ff 91       	pop	r31
    1da0:	ef 91       	pop	r30
    1da2:	bf 91       	pop	r27
    1da4:	af 91       	pop	r26
    1da6:	9f 91       	pop	r25
    1da8:	8f 91       	pop	r24
    1daa:	7f 91       	pop	r23
    1dac:	6f 91       	pop	r22
    1dae:	5f 91       	pop	r21
    1db0:	4f 91       	pop	r20
    1db2:	3f 91       	pop	r19
    1db4:	2f 91       	pop	r18
    1db6:	0f 90       	pop	r0
    1db8:	0b be       	out	0x3b, r0	; 59
    1dba:	0f 90       	pop	r0
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	0f 90       	pop	r0
    1dc0:	1f 90       	pop	r1
    1dc2:	18 95       	reti

00001dc4 <__vector_60>:

/**
 * \brief ISR for transceiver's receive end interrupt
 */
ISR(TRX24_RX_END_vect)
{
    1dc4:	1f 92       	push	r1
    1dc6:	0f 92       	push	r0
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	0f 92       	push	r0
    1dcc:	11 24       	eor	r1, r1
    1dce:	0b b6       	in	r0, 0x3b	; 59
    1dd0:	0f 92       	push	r0
    1dd2:	2f 93       	push	r18
    1dd4:	3f 93       	push	r19
    1dd6:	4f 93       	push	r20
    1dd8:	5f 93       	push	r21
    1dda:	6f 93       	push	r22
    1ddc:	7f 93       	push	r23
    1dde:	8f 93       	push	r24
    1de0:	9f 93       	push	r25
    1de2:	af 93       	push	r26
    1de4:	bf 93       	push	r27
    1de6:	ef 93       	push	r30
    1de8:	ff 93       	push	r31
	irq_hdl_trx_rx_end();
    1dea:	e0 91 6f 04 	lds	r30, 0x046F	; 0x80046f <irq_hdl_trx_rx_end>
    1dee:	f0 91 70 04 	lds	r31, 0x0470	; 0x800470 <irq_hdl_trx_rx_end+0x1>
    1df2:	19 95       	eicall
}
    1df4:	ff 91       	pop	r31
    1df6:	ef 91       	pop	r30
    1df8:	bf 91       	pop	r27
    1dfa:	af 91       	pop	r26
    1dfc:	9f 91       	pop	r25
    1dfe:	8f 91       	pop	r24
    1e00:	7f 91       	pop	r23
    1e02:	6f 91       	pop	r22
    1e04:	5f 91       	pop	r21
    1e06:	4f 91       	pop	r20
    1e08:	3f 91       	pop	r19
    1e0a:	2f 91       	pop	r18
    1e0c:	0f 90       	pop	r0
    1e0e:	0b be       	out	0x3b, r0	; 59
    1e10:	0f 90       	pop	r0
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	0f 90       	pop	r0
    1e16:	1f 90       	pop	r1
    1e18:	18 95       	reti

00001e1a <__vector_61>:

/**
 * \brief ISR for transceiver's CCA/ED measurement done interrupt
 */
ISR(TRX24_CCA_ED_DONE_vect)
{
    1e1a:	1f 92       	push	r1
    1e1c:	0f 92       	push	r0
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	0f 92       	push	r0
    1e22:	11 24       	eor	r1, r1
    1e24:	0b b6       	in	r0, 0x3b	; 59
    1e26:	0f 92       	push	r0
    1e28:	2f 93       	push	r18
    1e2a:	3f 93       	push	r19
    1e2c:	4f 93       	push	r20
    1e2e:	5f 93       	push	r21
    1e30:	6f 93       	push	r22
    1e32:	7f 93       	push	r23
    1e34:	8f 93       	push	r24
    1e36:	9f 93       	push	r25
    1e38:	af 93       	push	r26
    1e3a:	bf 93       	push	r27
    1e3c:	ef 93       	push	r30
    1e3e:	ff 93       	push	r31
	irq_hdl_trx_cca_ed();
    1e40:	e0 91 6d 04 	lds	r30, 0x046D	; 0x80046d <irq_hdl_trx_cca_ed>
    1e44:	f0 91 6e 04 	lds	r31, 0x046E	; 0x80046e <irq_hdl_trx_cca_ed+0x1>
    1e48:	19 95       	eicall
}
    1e4a:	ff 91       	pop	r31
    1e4c:	ef 91       	pop	r30
    1e4e:	bf 91       	pop	r27
    1e50:	af 91       	pop	r26
    1e52:	9f 91       	pop	r25
    1e54:	8f 91       	pop	r24
    1e56:	7f 91       	pop	r23
    1e58:	6f 91       	pop	r22
    1e5a:	5f 91       	pop	r21
    1e5c:	4f 91       	pop	r20
    1e5e:	3f 91       	pop	r19
    1e60:	2f 91       	pop	r18
    1e62:	0f 90       	pop	r0
    1e64:	0b be       	out	0x3b, r0	; 59
    1e66:	0f 90       	pop	r0
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	0f 90       	pop	r0
    1e6c:	1f 90       	pop	r1
    1e6e:	18 95       	reti

00001e70 <__vector_64>:

/**
 * \brief ISR for transceiver's Awake interrupt
 */
ISR(TRX24_AWAKE_vect)
{
    1e70:	1f 92       	push	r1
    1e72:	0f 92       	push	r0
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	0f 92       	push	r0
    1e78:	11 24       	eor	r1, r1
    1e7a:	0b b6       	in	r0, 0x3b	; 59
    1e7c:	0f 92       	push	r0
    1e7e:	2f 93       	push	r18
    1e80:	3f 93       	push	r19
    1e82:	4f 93       	push	r20
    1e84:	5f 93       	push	r21
    1e86:	6f 93       	push	r22
    1e88:	7f 93       	push	r23
    1e8a:	8f 93       	push	r24
    1e8c:	9f 93       	push	r25
    1e8e:	af 93       	push	r26
    1e90:	bf 93       	push	r27
    1e92:	ef 93       	push	r30
    1e94:	ff 93       	push	r31
	irq_hdl_trx_awake();
    1e96:	e0 91 6b 04 	lds	r30, 0x046B	; 0x80046b <irq_hdl_trx_awake>
    1e9a:	f0 91 6c 04 	lds	r31, 0x046C	; 0x80046c <irq_hdl_trx_awake+0x1>
    1e9e:	19 95       	eicall
}
    1ea0:	ff 91       	pop	r31
    1ea2:	ef 91       	pop	r30
    1ea4:	bf 91       	pop	r27
    1ea6:	af 91       	pop	r26
    1ea8:	9f 91       	pop	r25
    1eaa:	8f 91       	pop	r24
    1eac:	7f 91       	pop	r23
    1eae:	6f 91       	pop	r22
    1eb0:	5f 91       	pop	r21
    1eb2:	4f 91       	pop	r20
    1eb4:	3f 91       	pop	r19
    1eb6:	2f 91       	pop	r18
    1eb8:	0f 90       	pop	r0
    1eba:	0b be       	out	0x3b, r0	; 59
    1ebc:	0f 90       	pop	r0
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	0f 90       	pop	r0
    1ec2:	1f 90       	pop	r1
    1ec4:	18 95       	reti

00001ec6 <__vector_59>:
 *
 * By the time the SFD is detected, the hardware timestamps the
 * current frame in the SCTSR register.
 */
ISR(TRX24_RX_START_vect)
{
    1ec6:	1f 92       	push	r1
    1ec8:	0f 92       	push	r0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	0f 92       	push	r0
    1ece:	11 24       	eor	r1, r1
#if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP)
	irq_hdl_trx_tstamp();
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */
}
    1ed0:	0f 90       	pop	r0
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	0f 90       	pop	r0
    1ed6:	1f 90       	pop	r1
    1ed8:	18 95       	reti

00001eda <__vector_57>:

/**
 * \brief ISR for transceiver's PLL lock interrupt
 */
ISR(TRX24_PLL_LOCK_vect)
{
    1eda:	1f 92       	push	r1
    1edc:	0f 92       	push	r0
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	0f 92       	push	r0
    1ee2:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_lock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	0f 90       	pop	r0
    1eea:	1f 90       	pop	r1
    1eec:	18 95       	reti

00001eee <__vector_58>:

/**
 * \brief ISR for transceiver's PLL unlock interrupt
 */
ISR(TRX24_PLL_UNLOCK_vect)
{
    1eee:	1f 92       	push	r1
    1ef0:	0f 92       	push	r0
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	0f 92       	push	r0
    1ef6:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_pll_unlock();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti

00001f02 <__vector_62>:

/**
 * \brief ISR for transceiver's address match interrupt
 */
ISR(TRX24_XAH_AMI_vect)
{
    1f02:	1f 92       	push	r1
    1f04:	0f 92       	push	r0
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	0f 92       	push	r0
    1f0a:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f0c:	0f 90       	pop	r0
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	0f 90       	pop	r0
    1f12:	1f 90       	pop	r1
    1f14:	18 95       	reti

00001f16 <__vector_71>:

/**
 * \brief ISR for transceiver's battery low interrupt
 */
ISR(BAT_LOW_vect)
{
    1f16:	1f 92       	push	r1
    1f18:	0f 92       	push	r0
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	0f 92       	push	r0
    1f1e:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_batmon();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f20:	0f 90       	pop	r0
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	0f 90       	pop	r0
    1f26:	1f 90       	pop	r1
    1f28:	18 95       	reti

00001f2a <__vector_70>:

/**
 * \brief ISR for transceiver's AES interrupt
 */
ISR(AES_READY_vect)
{
    1f2a:	1f 92       	push	r1
    1f2c:	0f 92       	push	r0
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	0f 92       	push	r0
    1f32:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_aes_ready();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f34:	0f 90       	pop	r0
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	0f 90       	pop	r0
    1f3a:	1f 90       	pop	r1
    1f3c:	18 95       	reti

00001f3e <__vector_72>:

/**
 * \brief ISR for transceiver's TX_START interrupt
 */
ISR(TRX24_TX_START_vect)
{
    1f3e:	1f 92       	push	r1
    1f40:	0f 92       	push	r0
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	0f 92       	push	r0
    1f46:	11 24       	eor	r1, r1
	pal_tx_timestamp = PAL_US_PER_SYMBOLS * SC_READ32(SCCNT);
#endif
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_tx_start();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	0f 90       	pop	r0
    1f4e:	1f 90       	pop	r1
    1f50:	18 95       	reti

00001f52 <__vector_73>:

/**
 * \brief ISR for transceiver's AMI0 interrupt
 */
ISR(TRX24_AMI0_vect)
{
    1f52:	1f 92       	push	r1
    1f54:	0f 92       	push	r0
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	0f 92       	push	r0
    1f5a:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami0();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	0f 90       	pop	r0
    1f62:	1f 90       	pop	r1
    1f64:	18 95       	reti

00001f66 <__vector_74>:

/**
 * \brief ISR for transceiver's AMI1 interrupt
 */
ISR(TRX24_AMI1_vect)
{
    1f66:	1f 92       	push	r1
    1f68:	0f 92       	push	r0
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	0f 92       	push	r0
    1f6e:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami1();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f70:	0f 90       	pop	r0
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	0f 90       	pop	r0
    1f76:	1f 90       	pop	r1
    1f78:	18 95       	reti

00001f7a <__vector_75>:

/**
 * \brief ISR for transceiver's AMI2 interrupt
 */
ISR(TRX24_AMI2_vect)
{
    1f7a:	1f 92       	push	r1
    1f7c:	0f 92       	push	r0
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	0f 92       	push	r0
    1f82:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami2();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f84:	0f 90       	pop	r0
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	0f 90       	pop	r0
    1f8a:	1f 90       	pop	r1
    1f8c:	18 95       	reti

00001f8e <__vector_76>:

/**
 * \brief ISR for transceiver's AMI3 interrupt
 */
ISR(TRX24_AMI3_vect)
{
    1f8e:	1f 92       	push	r1
    1f90:	0f 92       	push	r0
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	0f 92       	push	r0
    1f96:	11 24       	eor	r1, r1
#ifdef ENABLE_ALL_TRX_IRQS
	irq_hdl_trx_ami3();
#endif  /*  ENABLE_ALL_TRX_IRQS*/
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	0f 90       	pop	r0
    1f9e:	1f 90       	pop	r1
    1fa0:	18 95       	reti

00001fa2 <trx_rx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for RX end.
 */
void trx_rx_end_handler_cb(void)
{
    1fa2:	1f 93       	push	r17
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	1f 92       	push	r1
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1fae:	8f b7       	in	r24, 0x3f	; 63
    1fb0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1fb2:	f8 94       	cli
	return flags;
    1fb4:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Handle rx interrupt. */
	handle_received_frame_irq(); /* see tal_rx.c */
    1fb6:	19 d2       	rcall	.+1074   	; 0x23ea <handle_received_frame_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1fb8:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_rx_end_handler_cb() */
    1fba:	0f 90       	pop	r0
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	1f 91       	pop	r17
    1fc2:	08 95       	ret

00001fc4 <trx_tx_end_handler_cb>:
 * \brief Transceiver interrupt handler
 *
 * This function handles the transceiver generated interrupts for TX end.
 */
void trx_tx_end_handler_cb(void)
{
    1fc4:	1f 93       	push	r17
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	1f 92       	push	r1
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1fd0:	8f b7       	in	r24, 0x3f	; 63
    1fd2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1fd4:	f8 94       	cli
	return flags;
    1fd6:	19 81       	ldd	r17, Y+1	; 0x01
	ENTER_CRITICAL_REGION();

	/* Get the result and push it to the queue. */
	handle_tx_end_irq();        /* see tal_tx.c */
    1fd8:	a9 d3       	rcall	.+1874   	; 0x272c <handle_tx_end_irq>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1fda:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
} /* trx_tx_end_handler_cb() */
    1fdc:	0f 90       	pop	r0
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	1f 91       	pop	r17
    1fe4:	08 95       	ret

00001fe6 <trx_awake_handler_cb>:
 * This function handles the transceiver awake end interrupt.
 */
void trx_awake_handler_cb(void)
{
	/* Set the wake-up flag. */
	tal_awake_end_flag = true;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <tal_awake_end_flag>
    1fec:	08 95       	ret

00001fee <limit_tx_pwr>:
		/* Invalid attribute id */
		return MAC_UNSUPPORTED_ATTRIBUTE;
	}

	return MAC_SUCCESS;
} /* tal_pib_get() */
    1fee:	85 fd       	sbrc	r24, 5
    1ff0:	03 c0       	rjmp	.+6      	; 0x1ff8 <limit_tx_pwr+0xa>
    1ff2:	98 2f       	mov	r25, r24
    1ff4:	9f 73       	andi	r25, 0x3F	; 63
    1ff6:	04 c0       	rjmp	.+8      	; 0x2000 <__EEPROM_REGION_LENGTH__>
    1ff8:	98 2f       	mov	r25, r24
    1ffa:	91 95       	neg	r25
    1ffc:	9f 71       	andi	r25, 0x1F	; 31
    1ffe:	91 95       	neg	r25
    2000:	e4 ee       	ldi	r30, 0xE4	; 228
    2002:	f1 e0       	ldi	r31, 0x01	; 1
    2004:	24 91       	lpm	r18, Z
    2006:	29 17       	cp	r18, r25
    2008:	54 f4       	brge	.+20     	; 0x201e <__EEPROM_REGION_LENGTH__+0x1e>
    200a:	84 91       	lpm	r24, Z
    200c:	80 3e       	cpi	r24, 0xE0	; 224
    200e:	b4 f0       	brlt	.+44     	; 0x203c <__EEPROM_REGION_LENGTH__+0x3c>
    2010:	80 32       	cpi	r24, 0x20	; 32
    2012:	b4 f4       	brge	.+44     	; 0x2040 <__EEPROM_REGION_LENGTH__+0x40>
    2014:	88 23       	and	r24, r24
    2016:	cc f4       	brge	.+50     	; 0x204a <__EEPROM_REGION_LENGTH__+0x4a>
    2018:	8f 71       	andi	r24, 0x1F	; 31
    201a:	80 62       	ori	r24, 0x20	; 32
    201c:	16 c0       	rjmp	.+44     	; 0x204a <__EEPROM_REGION_LENGTH__+0x4a>
    201e:	e3 ef       	ldi	r30, 0xF3	; 243
    2020:	f1 e0       	ldi	r31, 0x01	; 1
    2022:	24 91       	lpm	r18, Z
    2024:	92 17       	cp	r25, r18
    2026:	8c f4       	brge	.+34     	; 0x204a <__EEPROM_REGION_LENGTH__+0x4a>
    2028:	84 91       	lpm	r24, Z
    202a:	80 3e       	cpi	r24, 0xE0	; 224
    202c:	5c f0       	brlt	.+22     	; 0x2044 <__EEPROM_REGION_LENGTH__+0x44>
    202e:	80 32       	cpi	r24, 0x20	; 32
    2030:	5c f4       	brge	.+22     	; 0x2048 <__EEPROM_REGION_LENGTH__+0x48>
    2032:	88 23       	and	r24, r24
    2034:	54 f4       	brge	.+20     	; 0x204a <__EEPROM_REGION_LENGTH__+0x4a>
    2036:	8f 71       	andi	r24, 0x1F	; 31
    2038:	80 62       	ori	r24, 0x20	; 32
    203a:	07 c0       	rjmp	.+14     	; 0x204a <__EEPROM_REGION_LENGTH__+0x4a>
    203c:	80 e2       	ldi	r24, 0x20	; 32
    203e:	05 c0       	rjmp	.+10     	; 0x204a <__EEPROM_REGION_LENGTH__+0x4a>
    2040:	8f e1       	ldi	r24, 0x1F	; 31
    2042:	03 c0       	rjmp	.+6      	; 0x204a <__EEPROM_REGION_LENGTH__+0x4a>
    2044:	80 e2       	ldi	r24, 0x20	; 32
    2046:	01 c0       	rjmp	.+2      	; 0x204a <__EEPROM_REGION_LENGTH__+0x4a>
    2048:	8f e1       	ldi	r24, 0x1F	; 31
    204a:	80 68       	ori	r24, 0x80	; 128
    204c:	08 95       	ret

0000204e <init_tal_pib>:
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	c1 e8       	ldi	r28, 0x81	; 129
    2054:	d5 e0       	ldi	r29, 0x05	; 5
    2056:	84 e0       	ldi	r24, 0x04	; 4
    2058:	8c 8b       	std	Y+20, r24	; 0x14
    205a:	83 e0       	ldi	r24, 0x03	; 3
    205c:	8d 8b       	std	Y+21, r24	; 0x15
    205e:	2f ef       	ldi	r18, 0xFF	; 255
    2060:	3f ef       	ldi	r19, 0xFF	; 255
    2062:	3f 87       	std	Y+15, r19	; 0x0f
    2064:	2e 87       	std	Y+14, r18	; 0x0e
    2066:	3d 87       	std	Y+13, r19	; 0x0d
    2068:	2c 87       	std	Y+12, r18	; 0x0c
    206a:	9b e0       	ldi	r25, 0x0B	; 11
    206c:	9b 8b       	std	Y+19, r25	; 0x13
    206e:	18 8e       	std	Y+24, r1	; 0x18
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	58 ef       	ldi	r21, 0xF8	; 248
    2074:	6f ef       	ldi	r22, 0xFF	; 255
    2076:	77 e0       	ldi	r23, 0x07	; 7
    2078:	48 87       	std	Y+8, r20	; 0x08
    207a:	59 87       	std	Y+9, r21	; 0x09
    207c:	6a 87       	std	Y+10, r22	; 0x0a
    207e:	7b 87       	std	Y+11, r23	; 0x0b
    2080:	2a e0       	ldi	r18, 0x0A	; 10
    2082:	31 e0       	ldi	r19, 0x01	; 1
    2084:	39 8b       	std	Y+17, r19	; 0x11
    2086:	28 8b       	std	Y+16, r18	; 0x10
    2088:	9a e0       	ldi	r25, 0x0A	; 10
    208a:	99 8f       	std	Y+25, r25	; 0x19
    208c:	92 e0       	ldi	r25, 0x02	; 2
    208e:	9a 8f       	std	Y+26, r25	; 0x1a
    2090:	95 e0       	ldi	r25, 0x05	; 5
    2092:	9b 8f       	std	Y+27, r25	; 0x1b
    2094:	8c 8f       	std	Y+28, r24	; 0x1c
    2096:	84 e8       	ldi	r24, 0x84	; 132
    2098:	aa df       	rcall	.-172    	; 0x1fee <limit_tx_pwr>
    209a:	8f 8b       	std	Y+23, r24	; 0x17
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	8a 8b       	std	Y+18, r24	; 0x12
    20a0:	1e 8a       	std	Y+22, r1	; 0x16
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	08 95       	ret

000020a8 <convert_phyTransmitPower_to_reg_value>:
{
	int8_t dbm_value;
	uint8_t i;
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);
    20a8:	85 fd       	sbrc	r24, 5
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <convert_phyTransmitPower_to_reg_value+0x8>
    20ac:	8f 73       	andi	r24, 0x3F	; 63
    20ae:	03 c0       	rjmp	.+6      	; 0x20b6 <convert_phyTransmitPower_to_reg_value+0xe>
    20b0:	81 95       	neg	r24
    20b2:	8f 71       	andi	r24, 0x1F	; 31
    20b4:	81 95       	neg	r24

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    20b6:	e4 ee       	ldi	r30, 0xE4	; 228
    20b8:	f1 e0       	ldi	r31, 0x01	; 1
    20ba:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    20bc:	89 17       	cp	r24, r25
    20be:	3c f4       	brge	.+14     	; 0x20ce <convert_phyTransmitPower_to_reg_value+0x26>
    20c0:	e5 ee       	ldi	r30, 0xE5	; 229
    20c2:	f1 e0       	ldi	r31, 0x01	; 1
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    20c4:	21 e0       	ldi	r18, 0x01	; 1
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
    20c6:	94 91       	lpm	r25, Z
		if (trx_tx_level <= dbm_value) {
    20c8:	89 17       	cp	r24, r25
    20ca:	3c f0       	brlt	.+14     	; 0x20da <convert_phyTransmitPower_to_reg_value+0x32>
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <convert_phyTransmitPower_to_reg_value+0x28>
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    20ce:	20 e0       	ldi	r18, 0x00	; 0
		trx_tx_level = (int8_t)PGM_READ_BYTE(&tx_pwr_table[i]);
		if (trx_tx_level <= dbm_value) {
			if (trx_tx_level < dbm_value) {
    20d0:	98 17       	cp	r25, r24
    20d2:	4c f4       	brge	.+18     	; 0x20e6 <convert_phyTransmitPower_to_reg_value+0x3e>
				return (i - 1);
    20d4:	8f ef       	ldi	r24, 0xFF	; 255
    20d6:	82 0f       	add	r24, r18
    20d8:	08 95       	ret
	int8_t trx_tx_level;

	dbm_value = CONV_phyTransmitPower_TO_DBM(phyTransmitPower_value);

	/* Compare to the register value to identify the value that matches. */
	for (i = 0; i < sizeof(tx_pwr_table); i++) {
    20da:	2f 5f       	subi	r18, 0xFF	; 255
    20dc:	31 96       	adiw	r30, 0x01	; 1
    20de:	20 31       	cpi	r18, 0x10	; 16
    20e0:	91 f7       	brne	.-28     	; 0x20c6 <convert_phyTransmitPower_to_reg_value+0x1e>
			return i;
		}
	}

	/* This code should never be reached. */
	return 0;
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	08 95       	ret
    20e6:	82 2f       	mov	r24, r18
}
    20e8:	08 95       	ret

000020ea <write_all_tal_pib_to_trx>:
 *
 * This function writes all shadow PIB variables to the transceiver.
 * It is assumed that the radio does not sleep.
 */
void write_all_tal_pib_to_trx(void)
{
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
	uint8_t *ptr_to_reg;

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    20ee:	e1 e8       	ldi	r30, 0x81	; 129
    20f0:	f5 e0       	ldi	r31, 0x05	; 5
    20f2:	86 85       	ldd	r24, Z+14	; 0x0e
    20f4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));
    20f8:	87 85       	ldd	r24, Z+15	; 0x0f
    20fa:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
    20fe:	e4 e6       	ldi	r30, 0x64	; 100
    2100:	f1 e0       	ldi	r31, 0x01	; 1

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
    2102:	a1 e8       	ldi	r26, 0x81	; 129
    2104:	b5 e0       	ldi	r27, 0x05	; 5
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
    2106:	8d 91       	ld	r24, X+
    2108:	81 93       	st	Z+, r24

	trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
	trx_reg_write(RG_PAN_ID_1, (uint8_t)(tal_pib.PANId >> 8));

	ptr_to_reg = (uint8_t *)&tal_pib.IeeeAddress;
	for (uint8_t i = 0; i < 8; i++) {
    210a:	ec 36       	cpi	r30, 0x6C	; 108
    210c:	31 e0       	ldi	r19, 0x01	; 1
    210e:	f3 07       	cpc	r31, r19
    2110:	d1 f7       	brne	.-12     	; 0x2106 <write_all_tal_pib_to_trx+0x1c>
		trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr_to_reg);
		ptr_to_reg++;
	}

	trx_reg_write(RG_SHORT_ADDR_0, (uint8_t)tal_pib.ShortAddress);
    2112:	e1 e8       	ldi	r30, 0x81	; 129
    2114:	f5 e0       	ldi	r31, 0x05	; 5
    2116:	84 85       	ldd	r24, Z+12	; 0x0c
    2118:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
	trx_reg_write(RG_SHORT_ADDR_1,
    211c:	85 85       	ldd	r24, Z+13	; 0x0d
    211e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			(uint8_t)(tal_pib.ShortAddress >> 8));

	/* configure TX_ARET; CSMA and CCA */
	trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    2122:	48 e4       	ldi	r20, 0x48	; 72
    2124:	51 e0       	ldi	r21, 0x01	; 1
    2126:	da 01       	movw	r26, r20
    2128:	8c 91       	ld	r24, X
    212a:	22 89       	ldd	r18, Z+18	; 0x12
    212c:	b0 e2       	ldi	r27, 0x20	; 32
    212e:	2b 9f       	mul	r18, r27
    2130:	90 01       	movw	r18, r0
    2132:	11 24       	eor	r1, r1
    2134:	20 76       	andi	r18, 0x60	; 96
    2136:	8f 79       	andi	r24, 0x9F	; 159
    2138:	82 2b       	or	r24, r18
    213a:	da 01       	movw	r26, r20
    213c:	8c 93       	st	X, r24
	trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    213e:	cf e6       	ldi	r28, 0x6F	; 111
    2140:	d1 e0       	ldi	r29, 0x01	; 1
    2142:	88 81       	ld	r24, Y
    2144:	95 89       	ldd	r25, Z+21	; 0x15
    2146:	9f 70       	andi	r25, 0x0F	; 15
    2148:	80 7f       	andi	r24, 0xF0	; 240
    214a:	89 2b       	or	r24, r25
    214c:	88 83       	st	Y, r24

	trx_bit_write(SR_AACK_I_AM_COORD, tal_pib.PrivatePanCoordinator);
    214e:	2e e6       	ldi	r18, 0x6E	; 110
    2150:	31 e0       	ldi	r19, 0x01	; 1
    2152:	d9 01       	movw	r26, r18
    2154:	8c 91       	ld	r24, X
    2156:	96 89       	ldd	r25, Z+22	; 0x16
    2158:	99 0f       	add	r25, r25
    215a:	99 0f       	add	r25, r25
    215c:	99 0f       	add	r25, r25
    215e:	98 70       	andi	r25, 0x08	; 8
    2160:	87 7f       	andi	r24, 0xF7	; 247
    2162:	89 2b       	or	r24, r25
    2164:	8c 93       	st	X, r24

	/* set phy parameter */
	trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    2166:	28 81       	ld	r18, Y
    2168:	93 8d       	ldd	r25, Z+27	; 0x1b
    216a:	b0 e1       	ldi	r27, 0x10	; 16
    216c:	9b 9f       	mul	r25, r27
    216e:	c0 01       	movw	r24, r0
    2170:	11 24       	eor	r1, r1
    2172:	92 2f       	mov	r25, r18
    2174:	9f 70       	andi	r25, 0x0F	; 15
    2176:	89 2b       	or	r24, r25
    2178:	88 83       	st	Y, r24

#ifdef HIGH_DATA_RATE_SUPPORT
	apply_channel_page_configuration(tal_pib.CurrentPage);
#endif

	trx_bit_write(SR_CHANNEL, tal_pib.CurrentChannel);
    217a:	da 01       	movw	r26, r20
    217c:	8c 91       	ld	r24, X
    217e:	93 89       	ldd	r25, Z+19	; 0x13
    2180:	9f 71       	andi	r25, 0x1F	; 31
    2182:	80 7e       	andi	r24, 0xE0	; 224
    2184:	89 2b       	or	r24, r25
    2186:	8c 93       	st	X, r24
	{
		uint8_t reg_value;

		reg_value = convert_phyTransmitPower_to_reg_value(
    2188:	87 89       	ldd	r24, Z+23	; 0x17
    218a:	8e df       	rcall	.-228    	; 0x20a8 <convert_phyTransmitPower_to_reg_value>
				tal_pib.TransmitPower);
		trx_bit_write(SR_TX_PWR, reg_value);
    218c:	e5 e4       	ldi	r30, 0x45	; 69
    218e:	f1 e0       	ldi	r31, 0x01	; 1
    2190:	90 81       	ld	r25, Z
    2192:	90 7f       	andi	r25, 0xF0	; 240
    2194:	8f 70       	andi	r24, 0x0F	; 15
    2196:	89 2b       	or	r24, r25
    2198:	80 83       	st	Z, r24
#ifdef PROMISCUOUS_MODE
	if (tal_pib.PromiscuousMode) {
		set_trx_state(CMD_RX_ON);
	}
#endif
}
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	08 95       	ret

000021a0 <tal_pib_set>:
 *         in TAL_IDLE state.
 *         MAC_SUCCESS if the attempt to set the PIB attribute was successful
 *         TAL_TRX_ASLEEP if trx is in SLEEP mode and access to trx is required
 */
retval_t tal_pib_set(uint8_t attribute, pib_value_t *value)
{
    21a0:	cf 93       	push	r28
    21a2:	df 93       	push	r29
	 * and those that are simple variable udpates.
	 * Ensure that the transceiver is not in SLEEP.
	 * If it is in SLEEP, change it to TRX_OFF.
	 */

	switch (attribute) {
    21a4:	8e 34       	cpi	r24, 0x4E	; 78
    21a6:	41 f0       	breq	.+16     	; 0x21b8 <tal_pib_set+0x18>
    21a8:	89 35       	cpi	r24, 0x59	; 89
    21aa:	61 f4       	brne	.+24     	; 0x21c4 <tal_pib_set+0x24>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
    21ac:	fb 01       	movw	r30, r22
    21ae:	80 81       	ld	r24, Z
    21b0:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <tal_pib+0x1c>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    21b4:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxFrameRetries = value->pib_value_8bit;
		break;
    21b6:	0b c1       	rjmp	.+534    	; 0x23ce <tal_pib_set+0x22e>

		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
    21b8:	fb 01       	movw	r30, r22
    21ba:	80 81       	ld	r24, Z
    21bc:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <tal_pib+0x14>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    21c0:	80 e0       	ldi	r24, 0x00	; 0
		/*
		 * The new PIB value is not immediately written to the
		 * transceiver. This is done on a frame-by-frame base.
		 */
		tal_pib.MaxCSMABackoffs = value->pib_value_8bit;
		break;
    21c2:	05 c1       	rjmp	.+522    	; 0x23ce <tal_pib_set+0x22e>
		/*
		 * Following PIBs require access to trx.
		 * Therefore trx must be at least in TRX_OFF.
		 */

		if (tal_trx_status == TRX_SLEEP) {
    21c4:	90 91 a0 05 	lds	r25, 0x05A0	; 0x8005a0 <tal_trx_status>
    21c8:	9f 30       	cpi	r25, 0x0F	; 15
    21ca:	09 f4       	brne	.+2      	; 0x21ce <tal_pib_set+0x2e>
    21cc:	dc c0       	rjmp	.+440    	; 0x2386 <tal_pib_set+0x1e6>
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
		}

		switch (attribute) {
    21ce:	8b 30       	cpi	r24, 0x0B	; 11
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <tal_pib_set+0x34>
    21d2:	c9 c0       	rjmp	.+402    	; 0x2366 <tal_pib_set+0x1c6>
    21d4:	80 f4       	brcc	.+32     	; 0x21f6 <tal_pib_set+0x56>
    21d6:	eb 01       	movw	r28, r22
    21d8:	82 30       	cpi	r24, 0x02	; 2
    21da:	09 f4       	brne	.+2      	; 0x21de <tal_pib_set+0x3e>
    21dc:	84 c0       	rjmp	.+264    	; 0x22e6 <tal_pib_set+0x146>
    21de:	20 f4       	brcc	.+8      	; 0x21e8 <tal_pib_set+0x48>
    21e0:	88 23       	and	r24, r24
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <tal_pib_set+0x46>
    21e4:	46 c0       	rjmp	.+140    	; 0x2272 <tal_pib_set+0xd2>
    21e6:	d1 c0       	rjmp	.+418    	; 0x238a <tal_pib_set+0x1ea>
    21e8:	83 30       	cpi	r24, 0x03	; 3
    21ea:	09 f4       	brne	.+2      	; 0x21ee <tal_pib_set+0x4e>
    21ec:	8c c0       	rjmp	.+280    	; 0x2306 <tal_pib_set+0x166>
    21ee:	84 30       	cpi	r24, 0x04	; 4
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <tal_pib_set+0x54>
    21f2:	5a c0       	rjmp	.+180    	; 0x22a8 <tal_pib_set+0x108>
    21f4:	ca c0       	rjmp	.+404    	; 0x238a <tal_pib_set+0x1ea>
    21f6:	83 35       	cpi	r24, 0x53	; 83
    21f8:	79 f1       	breq	.+94     	; 0x2258 <tal_pib_set+0xb8>
    21fa:	28 f4       	brcc	.+10     	; 0x2206 <tal_pib_set+0x66>
    21fc:	8f 34       	cpi	r24, 0x4F	; 79
    21fe:	51 f0       	breq	.+20     	; 0x2214 <tal_pib_set+0x74>
    2200:	80 35       	cpi	r24, 0x50	; 80
    2202:	e9 f0       	breq	.+58     	; 0x223e <tal_pib_set+0x9e>
    2204:	c2 c0       	rjmp	.+388    	; 0x238a <tal_pib_set+0x1ea>
    2206:	87 35       	cpi	r24, 0x57	; 87
    2208:	09 f4       	brne	.+2      	; 0x220c <tal_pib_set+0x6c>
    220a:	56 c0       	rjmp	.+172    	; 0x22b8 <tal_pib_set+0x118>
    220c:	80 3f       	cpi	r24, 0xF0	; 240
    220e:	09 f4       	brne	.+2      	; 0x2212 <tal_pib_set+0x72>
    2210:	8b c0       	rjmp	.+278    	; 0x2328 <tal_pib_set+0x188>
    2212:	bb c0       	rjmp	.+374    	; 0x238a <tal_pib_set+0x1ea>
		case macMinBE:
			tal_pib.MinBE = value->pib_value_8bit;
    2214:	fb 01       	movw	r30, r22
    2216:	80 81       	ld	r24, Z
    2218:	e1 e8       	ldi	r30, 0x81	; 129
    221a:	f5 e0       	ldi	r31, 0x05	; 5
    221c:	85 8b       	std	Z+21, r24	; 0x15
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MinBE > tal_pib.MaxBE) {
    221e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2220:	98 17       	cp	r25, r24
    2222:	10 f4       	brcc	.+4      	; 0x2228 <tal_pib_set+0x88>
				tal_pib.MinBE = tal_pib.MaxBE;
    2224:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
    2228:	ef e6       	ldi	r30, 0x6F	; 111
    222a:	f1 e0       	ldi	r31, 0x01	; 1
    222c:	80 81       	ld	r24, Z
    222e:	90 91 96 05 	lds	r25, 0x0596	; 0x800596 <tal_pib+0x15>
    2232:	9f 70       	andi	r25, 0x0F	; 15
    2234:	80 7f       	andi	r24, 0xF0	; 240
    2236:	89 2b       	or	r24, r25
    2238:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    223a:	80 e0       	ldi	r24, 0x00	; 0
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */

			trx_bit_write(SR_MIN_BE, tal_pib.MinBE);
			break;
    223c:	c8 c0       	rjmp	.+400    	; 0x23ce <tal_pib_set+0x22e>

		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
    223e:	fb 01       	movw	r30, r22
    2240:	90 81       	ld	r25, Z
    2242:	81 81       	ldd	r24, Z+1	; 0x01
    2244:	e1 e8       	ldi	r30, 0x81	; 129
    2246:	f5 e0       	ldi	r31, 0x05	; 5
    2248:	96 87       	std	Z+14, r25	; 0x0e
    224a:	87 87       	std	Z+15, r24	; 0x0f
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
    224c:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <__TEXT_REGION_LENGTH__+0x7c0162>
			trx_reg_write(RG_PAN_ID_1,
    2250:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7c0163>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2254:	80 e0       	ldi	r24, 0x00	; 0
		case macPANId:
			tal_pib.PANId = value->pib_value_16bit;
			trx_reg_write(RG_PAN_ID_0, (uint8_t)tal_pib.PANId);
			trx_reg_write(RG_PAN_ID_1,
					(uint8_t)(tal_pib.PANId >> 8));
			break;
    2256:	bb c0       	rjmp	.+374    	; 0x23ce <tal_pib_set+0x22e>

		case macShortAddress:
			tal_pib.ShortAddress = value->pib_value_16bit;
    2258:	fb 01       	movw	r30, r22
    225a:	90 81       	ld	r25, Z
    225c:	81 81       	ldd	r24, Z+1	; 0x01
    225e:	e1 e8       	ldi	r30, 0x81	; 129
    2260:	f5 e0       	ldi	r31, 0x05	; 5
    2262:	94 87       	std	Z+12, r25	; 0x0c
    2264:	85 87       	std	Z+13, r24	; 0x0d
			trx_reg_write(RG_SHORT_ADDR_0,
    2266:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <__TEXT_REGION_LENGTH__+0x7c0160>
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
    226a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7c0161>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    226e:	80 e0       	ldi	r24, 0x00	; 0
			tal_pib.ShortAddress = value->pib_value_16bit;
			trx_reg_write(RG_SHORT_ADDR_0,
					(uint8_t)tal_pib.ShortAddress);
			trx_reg_write(RG_SHORT_ADDR_1,
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;
    2270:	ae c0       	rjmp	.+348    	; 0x23ce <tal_pib_set+0x22e>

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
    2272:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <tal_state>
    2276:	81 11       	cpse	r24, r1
    2278:	8a c0       	rjmp	.+276    	; 0x238e <tal_pib_set+0x1ee>
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
					((uint32_t)0x01 <<
					value->pib_value_8bit)) {
    227a:	88 81       	ld	r24, Y
		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
			}

			if ((uint32_t)TRX_SUPPORTED_CHANNELS &
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	58 ef       	ldi	r21, 0xF8	; 248
    2280:	6f ef       	ldi	r22, 0xFF	; 255
    2282:	77 e0       	ldi	r23, 0x07	; 7
    2284:	08 2e       	mov	r0, r24
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <tal_pib_set+0xf0>
    2288:	76 95       	lsr	r23
    228a:	67 95       	ror	r22
    228c:	57 95       	ror	r21
    228e:	47 95       	ror	r20
    2290:	0a 94       	dec	r0
    2292:	d2 f7       	brpl	.-12     	; 0x2288 <tal_pib_set+0xe8>
    2294:	40 ff       	sbrs	r20, 0
    2296:	7d c0       	rjmp	.+250    	; 0x2392 <tal_pib_set+0x1f2>

				/*
				 * Set trx to "soft" off avoiding that ongoing
				 * transaction (e.g. ACK) are interrupted.
				 */
				if (tal_trx_status != TRX_OFF) {
    2298:	98 30       	cpi	r25, 0x08	; 8
    229a:	09 f4       	brne	.+2      	; 0x229e <tal_pib_set+0xfe>
    229c:	80 c0       	rjmp	.+256    	; 0x239e <tal_pib_set+0x1fe>
					                                   **/
					do {
						/* set TRX_OFF until it could be
						 * set;
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
    229e:	88 e0       	ldi	r24, 0x08	; 8
    22a0:	6d da       	rcall	.-2854   	; 0x177c <set_trx_state>
							TRX_OFF);
    22a2:	88 30       	cpi	r24, 0x08	; 8
    22a4:	e1 f7       	brne	.-8      	; 0x229e <tal_pib_set+0xfe>
    22a6:	86 c0       	rjmp	.+268    	; 0x23b4 <tal_pib_set+0x214>
					return MAC_INVALID_PARAMETER;
				}
			}

#else
			if (tal_state != TAL_IDLE) {
    22a8:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <tal_state>
    22ac:	81 11       	cpse	r24, r1
    22ae:	73 c0       	rjmp	.+230    	; 0x2396 <tal_pib_set+0x1f6>
				return TAL_BUSY;
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
    22b0:	88 81       	ld	r24, Y
    22b2:	81 11       	cpse	r24, r1
    22b4:	72 c0       	rjmp	.+228    	; 0x239a <tal_pib_set+0x1fa>
    22b6:	8b c0       	rjmp	.+278    	; 0x23ce <tal_pib_set+0x22e>
			}
#endif  /* #ifdef HIGH_DATA_RATE_SUPPORT */
			break;

		case macMaxBE:
			tal_pib.MaxBE = value->pib_value_8bit;
    22b8:	fb 01       	movw	r30, r22
    22ba:	90 81       	ld	r25, Z
    22bc:	e1 e8       	ldi	r30, 0x81	; 129
    22be:	f5 e0       	ldi	r31, 0x05	; 5
    22c0:	93 8f       	std	Z+27, r25	; 0x1b
			/*
			 * macMinBE must not be larger than macMaxBE or
			 * calculation
			 * of macMaxFrameWaitTotalTime will fail.
			 */
			if (tal_pib.MaxBE < tal_pib.MinBE) {
    22c2:	85 89       	ldd	r24, Z+21	; 0x15
    22c4:	98 17       	cp	r25, r24
    22c6:	10 f4       	brcc	.+4      	; 0x22cc <tal_pib_set+0x12c>
				tal_pib.MinBE = tal_pib.MaxBE;
    22c8:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <tal_pib+0x15>
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
    22cc:	ef e6       	ldi	r30, 0x6F	; 111
    22ce:	f1 e0       	ldi	r31, 0x01	; 1
    22d0:	80 81       	ld	r24, Z
    22d2:	28 2f       	mov	r18, r24
    22d4:	2f 70       	andi	r18, 0x0F	; 15
    22d6:	30 e1       	ldi	r19, 0x10	; 16
    22d8:	93 9f       	mul	r25, r19
    22da:	c0 01       	movw	r24, r0
    22dc:	11 24       	eor	r1, r1
    22de:	82 2b       	or	r24, r18
    22e0:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    22e2:	80 e0       	ldi	r24, 0x00	; 0
			if (tal_pib.MaxBE < tal_pib.MinBE) {
				tal_pib.MinBE = tal_pib.MaxBE;
			}
#endif  /* REDUCED_PARAM_CHECK */
			trx_bit_write(SR_MAX_BE, tal_pib.MaxBE);
			break;
    22e4:	74 c0       	rjmp	.+232    	; 0x23ce <tal_pib_set+0x22e>

		case phyTransmitPower:
		{
			uint8_t reg_value;

			tal_pib.TransmitPower = value->pib_value_8bit;
    22e6:	88 81       	ld	r24, Y
    22e8:	c1 e8       	ldi	r28, 0x81	; 129
    22ea:	d5 e0       	ldi	r29, 0x05	; 5

			/* Limit tal_pib.TransmitPower to max/min trx values */
			tal_pib.TransmitPower = limit_tx_pwr(
    22ec:	8f 8b       	std	Y+23, r24	; 0x17
    22ee:	7f de       	rcall	.-770    	; 0x1fee <limit_tx_pwr>
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
    22f0:	8f 8b       	std	Y+23, r24	; 0x17
    22f2:	da de       	rcall	.-588    	; 0x20a8 <convert_phyTransmitPower_to_reg_value>
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
    22f4:	e5 e4       	ldi	r30, 0x45	; 69
    22f6:	f1 e0       	ldi	r31, 0x01	; 1
    22f8:	90 81       	ld	r25, Z
    22fa:	90 7f       	andi	r25, 0xF0	; 240
    22fc:	8f 70       	andi	r24, 0x0F	; 15
    22fe:	89 2b       	or	r24, r25
    2300:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2302:	80 e0       	ldi	r24, 0x00	; 0
					tal_pib.TransmitPower);
			reg_value = convert_phyTransmitPower_to_reg_value(
					tal_pib.TransmitPower);
			trx_bit_write(SR_TX_PWR, reg_value);
		}
		break;
    2304:	64 c0       	rjmp	.+200    	; 0x23ce <tal_pib_set+0x22e>

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
    2306:	88 81       	ld	r24, Y
    2308:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <tal_pib+0x12>
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
    230c:	e8 e4       	ldi	r30, 0x48	; 72
    230e:	f1 e0       	ldi	r31, 0x01	; 1
    2310:	20 81       	ld	r18, Z
    2312:	30 e2       	ldi	r19, 0x20	; 32
    2314:	83 9f       	mul	r24, r19
    2316:	c0 01       	movw	r24, r0
    2318:	11 24       	eor	r1, r1
    231a:	80 76       	andi	r24, 0x60	; 96
    231c:	92 2f       	mov	r25, r18
    231e:	9f 79       	andi	r25, 0x9F	; 159
    2320:	89 2b       	or	r24, r25
    2322:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2324:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case phyCCAMode:
			tal_pib.CCAMode = value->pib_value_8bit;
			trx_bit_write(SR_CCA_MODE, tal_pib.CCAMode);
			break;
    2326:	53 c0       	rjmp	.+166    	; 0x23ce <tal_pib_set+0x22e>

		case macIeeeAddress:
		{
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
    2328:	fb 01       	movw	r30, r22
    232a:	b0 81       	ld	r27, Z
    232c:	a1 81       	ldd	r26, Z+1	; 0x01
    232e:	52 81       	ldd	r21, Z+2	; 0x02
    2330:	43 81       	ldd	r20, Z+3	; 0x03
    2332:	34 81       	ldd	r19, Z+4	; 0x04
    2334:	25 81       	ldd	r18, Z+5	; 0x05
    2336:	96 81       	ldd	r25, Z+6	; 0x06
    2338:	87 81       	ldd	r24, Z+7	; 0x07
    233a:	e1 e8       	ldi	r30, 0x81	; 129
    233c:	f5 e0       	ldi	r31, 0x05	; 5
    233e:	b0 83       	st	Z, r27
    2340:	a1 83       	std	Z+1, r26	; 0x01
    2342:	52 83       	std	Z+2, r21	; 0x02
    2344:	43 83       	std	Z+3, r20	; 0x03
    2346:	34 83       	std	Z+4, r19	; 0x04
    2348:	25 83       	std	Z+5, r18	; 0x05
    234a:	96 83       	std	Z+6, r25	; 0x06
    234c:	87 83       	std	Z+7, r24	; 0x07
    234e:	e4 e6       	ldi	r30, 0x64	; 100
    2350:	f1 e0       	ldi	r31, 0x01	; 1
			ptr = (uint8_t *)&tal_pib.IeeeAddress;
    2352:	a1 e8       	ldi	r26, 0x81	; 129
    2354:	b5 e0       	ldi	r27, 0x05	; 5

			for (uint8_t i = 0; i < 8; i++) {
				trx_reg_write((RG_IEEE_ADDR_0 + i), *ptr);
    2356:	8d 91       	ld	r24, X+
    2358:	81 93       	st	Z+, r24
			uint8_t *ptr;

			tal_pib.IeeeAddress = value->pib_value_64bit;
			ptr = (uint8_t *)&tal_pib.IeeeAddress;

			for (uint8_t i = 0; i < 8; i++) {
    235a:	ec 36       	cpi	r30, 0x6C	; 108
    235c:	31 e0       	ldi	r19, 0x01	; 1
    235e:	f3 07       	cpc	r31, r19
    2360:	d1 f7       	brne	.-12     	; 0x2356 <tal_pib_set+0x1b6>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	34 c0       	rjmp	.+104    	; 0x23ce <tal_pib_set+0x22e>
			}
		}
		break;

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
    2366:	fb 01       	movw	r30, r22
    2368:	80 81       	ld	r24, Z
    236a:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <tal_pib+0x16>
			trx_bit_write(SR_AACK_I_AM_COORD,
    236e:	ee e6       	ldi	r30, 0x6E	; 110
    2370:	f1 e0       	ldi	r31, 0x01	; 1
    2372:	90 81       	ld	r25, Z
    2374:	88 0f       	add	r24, r24
    2376:	88 0f       	add	r24, r24
    2378:	88 0f       	add	r24, r24
    237a:	88 70       	andi	r24, 0x08	; 8
    237c:	97 7f       	andi	r25, 0xF7	; 247
    237e:	89 2b       	or	r24, r25
    2380:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    2382:	80 e0       	ldi	r24, 0x00	; 0

		case mac_i_pan_coordinator:
			tal_pib.PrivatePanCoordinator = value->pib_value_bool;
			trx_bit_write(SR_AACK_I_AM_COORD,
					tal_pib.PrivatePanCoordinator);
			break;
    2384:	24 c0       	rjmp	.+72     	; 0x23ce <tal_pib_set+0x22e>
		 */

		if (tal_trx_status == TRX_SLEEP) {
			/* While trx is in SLEEP, register cannot be accessed.
			**/
			return TAL_TRX_ASLEEP;
    2386:	81 e8       	ldi	r24, 0x81	; 129
    2388:	22 c0       	rjmp	.+68     	; 0x23ce <tal_pib_set+0x22e>
			 * w.r.t.
			 * compliance operation.
			 * The ACK timing can be reduced to 2 symbols using TFA
			 * function.
			 */
			return MAC_UNSUPPORTED_ATTRIBUTE;
    238a:	84 ef       	ldi	r24, 0xF4	; 244
    238c:	20 c0       	rjmp	.+64     	; 0x23ce <tal_pib_set+0x22e>
					(uint8_t)(tal_pib.ShortAddress >> 8));
			break;

		case phyCurrentChannel:
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    238e:	86 e8       	ldi	r24, 0x86	; 134
    2390:	1e c0       	rjmp	.+60     	; 0x23ce <tal_pib_set+0x22e>
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
				}
			} else {
				return MAC_INVALID_PARAMETER;
    2392:	88 ee       	ldi	r24, 0xE8	; 232
    2394:	1c c0       	rjmp	.+56     	; 0x23ce <tal_pib_set+0x22e>
				}
			}

#else
			if (tal_state != TAL_IDLE) {
				return TAL_BUSY;
    2396:	86 e8       	ldi	r24, 0x86	; 134
    2398:	1a c0       	rjmp	.+52     	; 0x23ce <tal_pib_set+0x22e>
			} else {
				uint8_t page;

				page = value->pib_value_8bit;
				if (page != 0) {
					return MAC_INVALID_PARAMETER;
    239a:	88 ee       	ldi	r24, 0xE8	; 232
    239c:	18 c0       	rjmp	.+48     	; 0x23ce <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    239e:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    23a2:	e8 e4       	ldi	r30, 0x48	; 72
    23a4:	f1 e0       	ldi	r31, 0x01	; 1
    23a6:	90 81       	ld	r25, Z
    23a8:	90 7e       	andi	r25, 0xE0	; 224
    23aa:	8f 71       	andi	r24, 0x1F	; 31
    23ac:	89 2b       	or	r24, r25
    23ae:	80 83       	st	Z, r24
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	0d c0       	rjmp	.+26     	; 0x23ce <tal_pib_set+0x22e>
						 * trx might be busy */
					} while (set_trx_state(CMD_TRX_OFF) !=
							TRX_OFF);
				}

				tal_pib.CurrentChannel = value->pib_value_8bit;
    23b4:	88 81       	ld	r24, Y
    23b6:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <tal_pib+0x13>
				trx_bit_write(SR_CHANNEL,
    23ba:	e8 e4       	ldi	r30, 0x48	; 72
    23bc:	f1 e0       	ldi	r31, 0x01	; 1
    23be:	90 81       	ld	r25, Z
    23c0:	90 7e       	andi	r25, 0xE0	; 224
    23c2:	8f 71       	andi	r24, 0x1F	; 31
    23c4:	89 2b       	or	r24, r25
						tal_pib.CurrentChannel);
				/* Re-store previous trx state */
				if (previous_trx_status != TRX_OFF) {
					/* Set to default state */
					set_trx_state(CMD_RX_AACK_ON);
    23c6:	80 83       	st	Z, r24
    23c8:	86 e1       	ldi	r24, 0x16	; 22
    23ca:	d8 d9       	rcall	.-3152   	; 0x177c <set_trx_state>
			return MAC_UNSUPPORTED_ATTRIBUTE;
		}

		break; /* end of 'default' from 'switch (attribute)' */
	}
	return MAC_SUCCESS;
    23cc:	80 e0       	ldi	r24, 0x00	; 0
} /* tal_pib_set() */
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	08 95       	ret

000023d4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    23d4:	04 c0       	rjmp	.+8      	; 0x23de <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    23d6:	61 50       	subi	r22, 0x01	; 1
    23d8:	71 09       	sbc	r23, r1
    23da:	81 09       	sbc	r24, r1
    23dc:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    23de:	61 15       	cp	r22, r1
    23e0:	71 05       	cpc	r23, r1
    23e2:	81 05       	cpc	r24, r1
    23e4:	91 05       	cpc	r25, r1
    23e6:	b9 f7       	brne	.-18     	; 0x23d6 <__portable_avr_delay_cycles+0x2>
    23e8:	08 95       	ret

000023ea <handle_received_frame_irq>:
 *
 * This function handles transceiver interrupts for received frames and
 * uploads the frames from the trx.
 */
void handle_received_frame_irq(void)
{
    23ea:	cf 92       	push	r12
    23ec:	df 92       	push	r13
    23ee:	ef 92       	push	r14
    23f0:	ff 92       	push	r15
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
	/* Extended frame length appended by LQI and ED. */
	uint8_t ext_frame_length;
	frame_info_t *receive_frame;
	uint8_t *frame_ptr;

	if (tal_rx_buffer == NULL) {
    23fa:	e0 91 69 04 	lds	r30, 0x0469	; 0x800469 <tal_rx_buffer>
    23fe:	f0 91 6a 04 	lds	r31, 0x046A	; 0x80046a <tal_rx_buffer+0x1>
    2402:	30 97       	sbiw	r30, 0x00	; 0
    2404:	71 f4       	brne	.+28     	; 0x2422 <handle_received_frame_irq+0x38>
		 * Although the buffer protection mode is enabled and the
		 * receiver has
		 * been switched to PLL_ON, the next incoming frame was faster.
		 * It cannot be handled and is discarded.
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    2406:	cc e4       	ldi	r28, 0x4C	; 76
    2408:	d1 e0       	ldi	r29, 0x01	; 1
    240a:	88 81       	ld	r24, Y
    240c:	8f 77       	andi	r24, 0x7F	; 127
    240e:	88 83       	st	Y, r24
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    2410:	63 e0       	ldi	r22, 0x03	; 3
    2412:	70 e0       	ldi	r23, 0x00	; 0
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	dd df       	rcall	.-70     	; 0x23d4 <__portable_avr_delay_cycles>
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    241a:	88 81       	ld	r24, Y
    241c:	80 68       	ori	r24, 0x80	; 128
    241e:	88 83       	st	Y, r24
		                                                      *
		                                                      *
		                                                      *protection
		                                                      * mode
		                                                      **/
		return;
    2420:	49 c0       	rjmp	.+146    	; 0x24b4 <handle_received_frame_irq+0xca>
		}
	}
#endif

	/* Get ED value; needed to normalize LQI. */
	ed_value = trx_reg_read(RG_PHY_ED_LEVEL);
    2422:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7c0147>

	/* Get frame length from transceiver. */
	phy_frame_len = ext_frame_length = trx_reg_read(RG_TST_RX_LENGTH);
    2426:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7c017b>

	/* Check for valid frame length. */
	if (phy_frame_len > 127) {
    242a:	11 23       	and	r17, r17
    242c:	0c f4       	brge	.+2      	; 0x2430 <handle_received_frame_irq+0x46>
    242e:	42 c0       	rjmp	.+132    	; 0x24b4 <handle_received_frame_irq+0xca>
		                                                      * mode
		                                                      **/
		return;
	}

	receive_frame = (frame_info_t *)BMM_BUFFER_POINTER(tal_rx_buffer);
    2430:	e0 80       	ld	r14, Z
    2432:	f1 80       	ldd	r15, Z+1	; 0x01
	 * In addition to that, the LQI and ED value are uploaded, too.
	 */
	ext_frame_length += LQI_LEN + ED_VAL_LEN;

	/* Update payload pointer to store received frame. */
	frame_ptr = (uint8_t *)receive_frame + LARGE_BUFFER_SIZE -
    2434:	82 e0       	ldi	r24, 0x02	; 2
    2436:	81 0f       	add	r24, r17
    2438:	eb e8       	ldi	r30, 0x8B	; 139
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	e8 1b       	sub	r30, r24
    243e:	f1 09       	sbc	r31, r1
    2440:	e7 01       	movw	r28, r14
    2442:	ce 0f       	add	r28, r30
    2444:	df 1f       	adc	r29, r31
	 * Note: The following code is different from other non-single chip
	 * transceivers, where reading the frame via SPI contains the length
	 * field
	 * in the first octet.
	 */
	trx_frame_read(frame_ptr, phy_frame_len + LQI_LEN);
    2446:	c1 2e       	mov	r12, r17
    2448:	d1 2c       	mov	r13, r1
    244a:	a6 01       	movw	r20, r12
    244c:	4f 5f       	subi	r20, 0xFF	; 255
    244e:	5f 4f       	sbci	r21, 0xFF	; 255
    2450:	60 e8       	ldi	r22, 0x80	; 128
    2452:	71 e0       	ldi	r23, 0x01	; 1
    2454:	ce 01       	movw	r24, r28
    2456:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <memcpy>
	frame_ptr--;
    245a:	fe 01       	movw	r30, r28
	*frame_ptr = phy_frame_len;
    245c:	12 93       	st	-Z, r17
	receive_frame->mpdu = frame_ptr;
    245e:	d7 01       	movw	r26, r14
    2460:	18 96       	adiw	r26, 0x08	; 8
    2462:	fc 93       	st	X, r31
    2464:	ee 93       	st	-X, r30
    2466:	17 97       	sbiw	r26, 0x07	; 7
	/* Add ED value at the end of the frame buffer. */
	receive_frame->mpdu[phy_frame_len + LQI_LEN + ED_VAL_LEN] = ed_value;
    2468:	ec 0d       	add	r30, r12
    246a:	fd 1d       	adc	r31, r13
    246c:	02 83       	std	Z+2, r16	; 0x02
	receive_frame->time_stamp = tal_rx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	/* Append received frame to incoming_frame_queue and get new rx buffer.
	**/
	qmm_queue_append(&tal_incoming_frame_queue, tal_rx_buffer);
    246e:	60 91 69 04 	lds	r22, 0x0469	; 0x800469 <tal_rx_buffer>
    2472:	70 91 6a 04 	lds	r23, 0x046A	; 0x80046a <tal_rx_buffer+0x1>
    2476:	8a e7       	ldi	r24, 0x7A	; 122
    2478:	95 e0       	ldi	r25, 0x05	; 5
    247a:	2c d9       	rcall	.-3496   	; 0x16d4 <qmm_queue_append>

	/* The previous buffer is eaten up and a new buffer is not assigned yet.
	**/
	tal_rx_buffer = bmm_buffer_alloc(LARGE_BUFFER_SIZE);
    247c:	8b e8       	ldi	r24, 0x8B	; 139
    247e:	92 d8       	rcall	.-3804   	; 0x15a4 <bmm_buffer_alloc>
    2480:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <tal_rx_buffer+0x1>
    2484:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <tal_rx_buffer>
    2488:	89 2b       	or	r24, r25

	/* Check if receive buffer is available */
	if (NULL == tal_rx_buffer) {
    248a:	21 f4       	brne	.+8      	; 0x2494 <handle_received_frame_irq+0xaa>
    248c:	81 e0       	ldi	r24, 0x01	; 1
		 * re-enabled yet.
		 * Buffer protection will be re-enabled after buffer becomes
		 * available
		 */
		/* set_trx_state(CMD_PLL_ON); */
		tal_rx_on_required = true;
    248e:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <tal_rx_on_required>
    2492:	0d c0       	rjmp	.+26     	; 0x24ae <handle_received_frame_irq+0xc4>
    2494:	cc e4       	ldi	r28, 0x4C	; 76
		/*
		 * Release the protected buffer and set it again for further
		 * protection since
		 * the buffer is available
		 */
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_DISABLE); /*
    2496:	d1 e0       	ldi	r29, 0x01	; 1
    2498:	88 81       	ld	r24, Y
    249a:	8f 77       	andi	r24, 0x7F	; 127
    249c:	88 83       	st	Y, r24
    249e:	63 e0       	ldi	r22, 0x03	; 3
		                                                       *
		                                                       *
		                                                       *protection
		                                                       * mode
		                                                       **/
		pal_timer_delay(2); /* Allow pin change to get effective */
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	96 df       	rcall	.-212    	; 0x23d4 <__portable_avr_delay_cycles>
    24a8:	88 81       	ld	r24, Y
		trx_bit_write(SR_RX_SAFE_MODE, RX_SAFE_MODE_ENABLE); /*
    24aa:	80 68       	ori	r24, 0x80	; 128
    24ac:	88 83       	st	Y, r24
    24ae:	80 e4       	ldi	r24, 0x40	; 64
	 * transmission
	 * end of an automatically sent ACK frame. This implementation does not
	 * use
	 * this feature.
	 */
	pal_trx_irq_flag_clr_tx_end();
    24b0:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7c014f>
    24b4:	df 91       	pop	r29
}
    24b6:	cf 91       	pop	r28
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    24bc:	ff 90       	pop	r15
    24be:	ef 90       	pop	r14
    24c0:	df 90       	pop	r13
    24c2:	cf 90       	pop	r12
    24c4:	08 95       	ret

000024c6 <process_incoming_frame>:
    24c6:	cf 93       	push	r28
 * structure to be sent to the MAC as a parameter of tal_rx_frame_cb().
 *
 * \param buf Pointer to the buffer containing the received frame
 */
void process_incoming_frame(buffer_t *buf_ptr)
{
    24c8:	df 93       	push	r29
    24ca:	ac 01       	movw	r20, r24
	uint8_t *frame_ptr;
	uint8_t ed_level;
	uint8_t lqi;
#endif

	frame_info_t *receive_frame
    24cc:	fc 01       	movw	r30, r24
    24ce:	c0 81       	ld	r28, Z
    24d0:	d1 81       	ldd	r29, Z+1	; 0x01

	/*
	 * Store the last frame length for IFS handling.
	 * Substract LQI and length fields.
	 */
	frame_len = last_frame_length = receive_frame->mpdu[0];
    24d2:	af 81       	ldd	r26, Y+7	; 0x07
    24d4:	b8 85       	ldd	r27, Y+8	; 0x08
    24d6:	8c 91       	ld	r24, X
    24d8:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <last_frame_length>

	/*
	 * The LQI is stored after the FCS.
	 * The ED value is stored after the LQI.
	 */
	frame_ptr = &(receive_frame->mpdu[frame_len + LQI_LEN]);
    24dc:	e8 2f       	mov	r30, r24
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	31 96       	adiw	r30, 0x01	; 1
    24e2:	ea 0f       	add	r30, r26
    24e4:	fb 1f       	adc	r31, r27
	lqi = *frame_ptr++;
    24e6:	80 81       	ld	r24, Z
	ed_level = *frame_ptr;
    24e8:	31 81       	ldd	r19, Z+1	; 0x01
	uint8_t lqi_star;

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
    24ea:	3d 33       	cpi	r19, 0x3D	; 61
    24ec:	20 f4       	brcc	.+8      	; 0x24f6 <process_incoming_frame+0x30>
		ed_value = ED_MAX_VAL;
	} else if (ed_value == 0) {
    24ee:	31 11       	cpse	r19, r1
    24f0:	03 c0       	rjmp	.+6      	; 0x24f8 <process_incoming_frame+0x32>
		ed_value = 1;
    24f2:	31 e0       	ldi	r19, 0x01	; 1
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <process_incoming_frame+0x32>

#ifdef HIGH_DATA_RATE_SUPPORT
	if (tal_pib.CurrentPage == 0) {
#endif
	if (ed_value > ED_MAX_VAL) {
		ed_value = ED_MAX_VAL;
    24f6:	3c e3       	ldi	r19, 0x3C	; 60
	} else if (ed_value == 0) {
		ed_value = 1;
	}

	lqi_star = lqi >> 6;
	link_quality = (uint16_t)lqi_star * (uint16_t)ed_value * 255 /
    24f8:	82 95       	swap	r24
    24fa:	86 95       	lsr	r24
    24fc:	86 95       	lsr	r24
    24fe:	83 70       	andi	r24, 0x03	; 3
    2500:	2f ef       	ldi	r18, 0xFF	; 255
    2502:	82 9f       	mul	r24, r18
    2504:	c0 01       	movw	r24, r0
    2506:	11 24       	eor	r1, r1
    2508:	38 9f       	mul	r19, r24
    250a:	b0 01       	movw	r22, r0
    250c:	39 9f       	mul	r19, r25
    250e:	70 0d       	add	r23, r0
    2510:	11 24       	eor	r1, r1
    2512:	9b 01       	movw	r18, r22
    2514:	a3 e8       	ldi	r26, 0x83	; 131
    2516:	bd e2       	ldi	r27, 0x2D	; 45
    2518:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <__umulhisi3>
    251c:	96 95       	lsr	r25
    251e:	87 95       	ror	r24
    2520:	92 95       	swap	r25
    2522:	82 95       	swap	r24
    2524:	8f 70       	andi	r24, 0x0F	; 15
    2526:	89 27       	eor	r24, r25
    2528:	9f 70       	andi	r25, 0x0F	; 15
    252a:	89 27       	eor	r24, r25
			(ED_MAX_VAL * LQI_MAX);

	if (link_quality > 255) {
    252c:	8f 3f       	cpi	r24, 0xFF	; 255
    252e:	91 05       	cpc	r25, r1
    2530:	11 f0       	breq	.+4      	; 0x2536 <process_incoming_frame+0x70>
    2532:	08 f0       	brcs	.+2      	; 0x2536 <process_incoming_frame+0x70>
		return 255;
    2534:	8f ef       	ldi	r24, 0xFF	; 255
	lqi = normalize_lqi(lqi, ed_level);
#endif

	/* Store normalized LQI value again. */
	frame_ptr--;
	*frame_ptr = lqi;
    2536:	80 83       	st	Z, r24
#endif  /* #ifndef TRX_REG_RAW_VALUE */

	receive_frame->buffer_header = buf_ptr;
    2538:	5a 83       	std	Y+2, r21	; 0x02
    253a:	49 83       	std	Y+1, r20	; 0x01
#ifdef ENABLE_RTB
	/* The callback function implemented by RTB is invoked. */
	rtb_rx_frame_cb(receive_frame);
#else
	/* The callback function implemented by MAC is invoked. */
	tal_rx_frame_cb(receive_frame);
    253c:	ce 01       	movw	r24, r28
    253e:	ca d6       	rcall	.+3476   	; 0x32d4 <tal_rx_frame_cb>
#endif
} /* process_incoming_frame() */
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <tal_rx_enable>:
{
	/*
	 * Trx can only be enabled if TAL is not busy;
	 * i.e. if TAL is IDLE.
	 */
	if (TAL_IDLE != tal_state) {
    2546:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <tal_state>
    254a:	91 11       	cpse	r25, r1
    254c:	16 c0       	rjmp	.+44     	; 0x257a <tal_rx_enable+0x34>
#else
		return TAL_BUSY;
#endif
	}

	if (state == PHY_TRX_OFF) {
    254e:	88 30       	cpi	r24, 0x08	; 8
    2550:	29 f4       	brne	.+10     	; 0x255c <tal_rx_enable+0x16>
		 * that is currently being received.
		 * This must not be a Forced TRX_OFF (CMD_FORCED_TRX_OFF) since
		 * this could
		 * corrupt an already outoing ACK frame.
		 */
		set_trx_state(CMD_TRX_OFF);
    2552:	14 d9       	rcall	.-3544   	; 0x177c <set_trx_state>
		tal_rx_on_required = false;
    2554:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <tal_rx_on_required>
		return TRX_OFF;
    2558:	88 e0       	ldi	r24, 0x08	; 8
    255a:	08 95       	ret
	} else {
#ifdef SNIFFER
		set_trx_state(CMD_RX_ON);
#else   /* #ifndef SNIFFER */
		if (NULL != tal_rx_buffer) {
    255c:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <tal_rx_buffer>
    2560:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <tal_rx_buffer+0x1>
    2564:	89 2b       	or	r24, r25
    2566:	21 f0       	breq	.+8      	; 0x2570 <tal_rx_enable+0x2a>
			} else {
				set_trx_state(CMD_RX_AACK_ON);
			}

#else   /* Normal operation */
			set_trx_state(CMD_RX_AACK_ON);
    2568:	86 e1       	ldi	r24, 0x16	; 22
    256a:	08 d9       	rcall	.-3568   	; 0x177c <set_trx_state>
			 * receiver.
			 */
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    256c:	86 e0       	ldi	r24, 0x06	; 6
    256e:	08 95       	ret
			 * the TAL returns MAC_SUCCESS. The TAL will try to
			 * allocate a receive
			 * buffer as soon as possible and will switch on the
			 * receiver.
			 */
			tal_rx_on_required = true;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <tal_rx_on_required>
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
    2576:	86 e0       	ldi	r24, 0x06	; 6
    2578:	08 95       	ret
		if (tal_state != TAL_SLOTTED_CSMA) {
			return TAL_BUSY;
		}

#else
		return TAL_BUSY;
    257a:	86 e8       	ldi	r24, 0x86	; 134
			tal_rx_on_required = true;
		}
#endif  /* #ifndef SNIFFER */
		return RX_ON; /* MAC layer assumes RX_ON as return value */
	}
}
    257c:	08 95       	ret

0000257e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    257e:	04 c0       	rjmp	.+8      	; 0x2588 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2580:	61 50       	subi	r22, 0x01	; 1
    2582:	71 09       	sbc	r23, r1
    2584:	81 09       	sbc	r24, r1
    2586:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2588:	61 15       	cp	r22, r1
    258a:	71 05       	cpc	r23, r1
    258c:	81 05       	cpc	r24, r1
    258e:	91 05       	cpc	r25, r1
    2590:	b9 f7       	brne	.-18     	; 0x2580 <__portable_avr_delay_cycles+0x2>
    2592:	08 95       	ret

00002594 <tx_done_handling>:
 *
 * This function handles the callback for the transmission end.
 */
void tx_done_handling(void)
{
	tal_state = TAL_IDLE;
    2594:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <tal_state>
	mac_frame_ptr->time_stamp = pal_tx_timestamp;
#endif  /* #if (defined BEACON_SUPPORT) || (defined ENABLE_TSTAMP) */

	retval_t status;

	switch (trx_trac_status) {
    2598:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <trx_trac_status>
    259c:	83 30       	cpi	r24, 0x03	; 3
    259e:	69 f0       	breq	.+26     	; 0x25ba <tx_done_handling+0x26>
    25a0:	28 f4       	brcc	.+10     	; 0x25ac <tx_done_handling+0x18>
    25a2:	88 23       	and	r24, r24
    25a4:	91 f0       	breq	.+36     	; 0x25ca <tx_done_handling+0x36>
    25a6:	81 30       	cpi	r24, 0x01	; 1
    25a8:	31 f0       	breq	.+12     	; 0x25b6 <tx_done_handling+0x22>
    25aa:	0d c0       	rjmp	.+26     	; 0x25c6 <tx_done_handling+0x32>
    25ac:	85 30       	cpi	r24, 0x05	; 5
    25ae:	39 f0       	breq	.+14     	; 0x25be <tx_done_handling+0x2a>
    25b0:	87 30       	cpi	r24, 0x07	; 7
    25b2:	39 f0       	breq	.+14     	; 0x25c2 <tx_done_handling+0x2e>
    25b4:	08 c0       	rjmp	.+16     	; 0x25c6 <tx_done_handling+0x32>
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
		break;

	case TRAC_SUCCESS_DATA_PENDING:
		status = TAL_FRAME_PENDING;
    25b6:	87 e8       	ldi	r24, 0x87	; 135
    25b8:	09 c0       	rjmp	.+18     	; 0x25cc <tx_done_handling+0x38>
		break;

	case TRAC_CHANNEL_ACCESS_FAILURE:
		status = MAC_CHANNEL_ACCESS_FAILURE;
    25ba:	81 ee       	ldi	r24, 0xE1	; 225
		break;
    25bc:	07 c0       	rjmp	.+14     	; 0x25cc <tx_done_handling+0x38>

	case TRAC_NO_ACK:
		status = MAC_NO_ACK;
    25be:	89 ee       	ldi	r24, 0xE9	; 233
		break;
    25c0:	05 c0       	rjmp	.+10     	; 0x25cc <tx_done_handling+0x38>

	case TRAC_INVALID:
		status = FAILURE;
    25c2:	85 e8       	ldi	r24, 0x85	; 133
		break;
    25c4:	03 c0       	rjmp	.+6      	; 0x25cc <tx_done_handling+0x38>

	default:
		Assert("Unexpected tal_tx_state" == 0);
		status = FAILURE;
    25c6:	85 e8       	ldi	r24, 0x85	; 133
		break;
    25c8:	01 c0       	rjmp	.+2      	; 0x25cc <tx_done_handling+0x38>

	retval_t status;

	switch (trx_trac_status) {
	case TRAC_SUCCESS:
		status = MAC_SUCCESS;
    25ca:	80 e0       	ldi	r24, 0x00	; 0

#ifdef ENABLE_RTB
	rtb_tx_frame_done_cb(status, mac_frame_ptr);
#else
	/* Regular handling without RTB */
	tal_tx_frame_done_cb(status, mac_frame_ptr);
    25cc:	60 91 7f 05 	lds	r22, 0x057F	; 0x80057f <mac_frame_ptr>
    25d0:	70 91 80 05 	lds	r23, 0x0580	; 0x800580 <mac_frame_ptr+0x1>
    25d4:	7c c6       	rjmp	.+3320   	; 0x32ce <tal_tx_frame_done_cb>
    25d6:	08 95       	ret

000025d8 <send_frame>:
 * \param use_csma Flag indicating if CSMA is requested
 * \param tx_retries Flag indicating if transmission retries are requested
 *                   by the MAC layer
 */
void send_frame(csma_mode_t csma_mode, bool tx_retries)
{
    25d8:	1f 93       	push	r17
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	1f 92       	push	r1
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	18 2f       	mov	r17, r24
	tal_trx_status_t trx_status;

	/* Configure tx according to tx_retries */
	if (tx_retries) {
    25e6:	66 23       	and	r22, r22
    25e8:	81 f0       	breq	.+32     	; 0x260a <send_frame+0x32>
		trx_bit_write(SR_MAX_FRAME_RETRIES,
    25ea:	ec e6       	ldi	r30, 0x6C	; 108
    25ec:	f1 e0       	ldi	r31, 0x01	; 1
    25ee:	20 81       	ld	r18, Z
    25f0:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <tal_pib+0x1c>
    25f4:	30 e1       	ldi	r19, 0x10	; 16
    25f6:	93 9f       	mul	r25, r19
    25f8:	c0 01       	movw	r24, r0
    25fa:	11 24       	eor	r1, r1
    25fc:	92 2f       	mov	r25, r18
    25fe:	9f 70       	andi	r25, 0x0F	; 15
    2600:	89 2b       	or	r24, r25
    2602:	80 83       	st	Z, r24
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    2604:	12 30       	cpi	r17, 0x02	; 2
    2606:	e0 f4       	brcc	.+56     	; 0x2640 <send_frame+0x68>
    2608:	08 c0       	rjmp	.+16     	; 0x261a <send_frame+0x42>
	/* Configure tx according to tx_retries */
	if (tx_retries) {
		trx_bit_write(SR_MAX_FRAME_RETRIES,
				tal_pib.MaxFrameRetries);
	} else {
		trx_bit_write(SR_MAX_FRAME_RETRIES, 0);
    260a:	ec e6       	ldi	r30, 0x6C	; 108
    260c:	f1 e0       	ldi	r31, 0x01	; 1
    260e:	80 81       	ld	r24, Z
    2610:	8f 70       	andi	r24, 0x0F	; 15
    2612:	80 83       	st	Z, r24
	}

	/* Configure tx according to csma usage */
	if ((csma_mode == NO_CSMA_NO_IFS) || (csma_mode == NO_CSMA_WITH_IFS)) {
    2614:	12 30       	cpi	r17, 0x02	; 2
    2616:	a0 f4       	brcc	.+40     	; 0x2640 <send_frame+0x68>
    2618:	0d c0       	rjmp	.+26     	; 0x2634 <send_frame+0x5c>
		if (tx_retries) {
			trx_bit_write(SR_MAX_CSMA_RETRIES,
    261a:	ec e6       	ldi	r30, 0x6C	; 108
    261c:	f1 e0       	ldi	r31, 0x01	; 1
    261e:	80 81       	ld	r24, Z
    2620:	90 91 95 05 	lds	r25, 0x0595	; 0x800595 <tal_pib+0x14>
    2624:	99 0f       	add	r25, r25
    2626:	9e 70       	andi	r25, 0x0E	; 14
    2628:	81 7f       	andi	r24, 0xF1	; 241
    262a:	89 2b       	or	r24, r25
    262c:	80 83       	st	Z, r24
					tal_pib.MaxCSMABackoffs);
			trx_reg_write(RG_CSMA_BE, 0x00);
    262e:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <__TEXT_REGION_LENGTH__+0x7c016f>
    2632:	1a c0       	rjmp	.+52     	; 0x2668 <send_frame+0x90>
		} else {
			trx_bit_write(SR_MAX_CSMA_RETRIES, 7);
    2634:	ec e6       	ldi	r30, 0x6C	; 108
    2636:	f1 e0       	ldi	r31, 0x01	; 1
    2638:	80 81       	ld	r24, Z
    263a:	8e 60       	ori	r24, 0x0E	; 14
    263c:	80 83       	st	Z, r24
    263e:	14 c0       	rjmp	.+40     	; 0x2668 <send_frame+0x90>
		}
	} else {
		trx_reg_write(RG_CSMA_BE,
    2640:	e1 e8       	ldi	r30, 0x81	; 129
    2642:	f5 e0       	ldi	r31, 0x05	; 5
    2644:	83 8d       	ldd	r24, Z+27	; 0x1b
    2646:	20 e1       	ldi	r18, 0x10	; 16
    2648:	82 9f       	mul	r24, r18
    264a:	c0 01       	movw	r24, r0
    264c:	11 24       	eor	r1, r1
    264e:	95 89       	ldd	r25, Z+21	; 0x15
    2650:	89 2b       	or	r24, r25
    2652:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <__TEXT_REGION_LENGTH__+0x7c016f>
				((tal_pib.MaxBE << 4) | tal_pib.MinBE));
		trx_bit_write(SR_MAX_CSMA_RETRIES, tal_pib.MaxCSMABackoffs);
    2656:	ac e6       	ldi	r26, 0x6C	; 108
    2658:	b1 e0       	ldi	r27, 0x01	; 1
    265a:	8c 91       	ld	r24, X
    265c:	94 89       	ldd	r25, Z+20	; 0x14
    265e:	99 0f       	add	r25, r25
    2660:	9e 70       	andi	r25, 0x0E	; 14
    2662:	81 7f       	andi	r24, 0xF1	; 241
    2664:	89 2b       	or	r24, r25
    2666:	8c 93       	st	X, r24
	}

	do {
		trx_status = set_trx_state(CMD_TX_ARET_ON);
    2668:	89 e1       	ldi	r24, 0x19	; 25
    266a:	88 d8       	rcall	.-3824   	; 0x177c <set_trx_state>
	} while (trx_status != TX_ARET_ON);
    266c:	89 31       	cpi	r24, 0x19	; 25
    266e:	e1 f7       	brne	.-8      	; 0x2668 <send_frame+0x90>

	/* Handle interframe spacing */
	if (csma_mode == NO_CSMA_WITH_IFS) {
    2670:	11 30       	cpi	r17, 0x01	; 1
    2672:	a1 f4       	brne	.+40     	; 0x269c <send_frame+0xc4>
		if (last_frame_length > aMaxSIFSFrameSize) {
    2674:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <last_frame_length>
    2678:	83 31       	cpi	r24, 0x13	; 19
    267a:	40 f0       	brcs	.+16     	; 0x268c <send_frame+0xb4>
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    267c:	61 e0       	ldi	r22, 0x01	; 1
    267e:	73 e0       	ldi	r23, 0x03	; 3
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	7c df       	rcall	.-264    	; 0x257e <__portable_avr_delay_cycles>
					macMinLIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    2686:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <last_frame_length>
    268a:	0d c0       	rjmp	.+26     	; 0x26a6 <send_frame+0xce>
		} else {
			pal_timer_delay(TAL_CONVERT_SYMBOLS_TO_US(
    268c:	6b ea       	ldi	r22, 0xAB	; 171
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	74 df       	rcall	.-280    	; 0x257e <__portable_avr_delay_cycles>
					macMinSIFSPeriod_def)
					- IRQ_PROCESSING_DLY_US -
					PRE_TX_DURATION_US);
			last_frame_length = 0;
    2696:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <last_frame_length>
    269a:	05 c0       	rjmp	.+10     	; 0x26a6 <send_frame+0xce>
		 * If no delay is applied after switching to TX_ARET_ON,
		 * a short delay is required that allows that a pending TX_END
		 * IRQ for
		 * ACK transmission gets served.
		 */
		pal_timer_delay(TRX_IRQ_DELAY_US);
    269c:	6c e0       	ldi	r22, 0x0C	; 12
    269e:	70 e0       	ldi	r23, 0x00	; 0
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	6c df       	rcall	.-296    	; 0x257e <__portable_avr_delay_cycles>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    26a6:	8f b7       	in	r24, 0x3f	; 63
    26a8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    26aa:	f8 94       	cli
	return flags;
    26ac:	19 81       	ldd	r17, Y+1	; 0x01
	}

	ENTER_CRITICAL_REGION(); /* prevent from buffer underrun */

	/* Toggle the SLP_TR pin triggering transmission. */
	TRX_SLP_TR_HIGH();
    26ae:	e9 e3       	ldi	r30, 0x39	; 57
    26b0:	f1 e0       	ldi	r31, 0x01	; 1
    26b2:	80 81       	ld	r24, Z
    26b4:	82 60       	ori	r24, 0x02	; 2
    26b6:	80 83       	st	Z, r24
	PAL_WAIT_65_NS();
    26b8:	00 00       	nop
    26ba:	00 00       	nop
	TRX_SLP_TR_LOW();
    26bc:	80 81       	ld	r24, Z
    26be:	8d 7f       	andi	r24, 0xFD	; 253
    26c0:	80 83       	st	Z, r24
	 * is
	 * 1 octet frame length octet
	 * + n octets frame (i.e. value of frame_tx[0])
	 * - 2 octets FCS
	 */
	trx_frame_write(tal_frame_to_tx, tal_frame_to_tx[0] - 1);
    26c2:	60 91 a2 05 	lds	r22, 0x05A2	; 0x8005a2 <tal_frame_to_tx>
    26c6:	70 91 a3 05 	lds	r23, 0x05A3	; 0x8005a3 <tal_frame_to_tx+0x1>
    26ca:	fb 01       	movw	r30, r22
    26cc:	40 81       	ld	r20, Z
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	41 50       	subi	r20, 0x01	; 1
    26d2:	51 09       	sbc	r21, r1
    26d4:	80 e8       	ldi	r24, 0x80	; 128
    26d6:	91 e0       	ldi	r25, 0x01	; 1
    26d8:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <memcpy>

	tal_state = TAL_TX_AUTO;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <tal_state>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    26e2:	1f bf       	out	0x3f, r17	; 63

	LEAVE_CRITICAL_REGION();
}
    26e4:	0f 90       	pop	r0
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	1f 91       	pop	r17
    26ec:	08 95       	ret

000026ee <tal_tx_frame>:
 *                 transmission
 *         TAL_BUSY if the TAL is busy servicing the previous MAC request
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
    26ee:	fc 01       	movw	r30, r24
	if (tal_state != TAL_IDLE) {
    26f0:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <tal_state>
    26f4:	91 11       	cpse	r25, r1
    26f6:	16 c0       	rjmp	.+44     	; 0x2724 <tal_tx_frame+0x36>

	/*
	 * Store the pointer to the provided frame structure.
	 * This is needed for the callback function.
	 */
	mac_frame_ptr = tx_frame;
    26f8:	f0 93 80 05 	sts	0x0580, r31	; 0x800580 <mac_frame_ptr+0x1>
    26fc:	e0 93 7f 05 	sts	0x057F, r30	; 0x80057f <mac_frame_ptr>

	/* Set pointer to actual mpdu to be downloaded to the transceiver. */
	tal_frame_to_tx = tx_frame->mpdu;
    2700:	07 80       	ldd	r0, Z+7	; 0x07
    2702:	f0 85       	ldd	r31, Z+8	; 0x08
    2704:	e0 2d       	mov	r30, r0
    2706:	f0 93 a3 05 	sts	0x05A3, r31	; 0x8005a3 <tal_frame_to_tx+0x1>
    270a:	e0 93 a2 05 	sts	0x05A2, r30	; 0x8005a2 <tal_frame_to_tx>
	last_frame_length = tal_frame_to_tx[0] - 1;
    270e:	80 81       	ld	r24, Z
    2710:	81 50       	subi	r24, 0x01	; 1
    2712:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <last_frame_length>

	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
    2716:	ef 2b       	or	r30, r31
    2718:	39 f0       	breq	.+14     	; 0x2728 <tal_tx_frame+0x3a>
    271a:	86 2f       	mov	r24, r22
#endif  /* #if (MAC_INDIRECT_DATA_FFD == 1) */
		send_frame(csma_mode, perform_frame_retry);
	}

#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
    271c:	64 2f       	mov	r22, r20
    271e:	5c df       	rcall	.-328    	; 0x25d8 <send_frame>
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	08 95       	ret
 */
retval_t tal_tx_frame(frame_info_t *tx_frame, csma_mode_t csma_mode,
		bool perform_frame_retry)
{
	if (tal_state != TAL_IDLE) {
		return TAL_BUSY;
    2724:	86 e8       	ldi	r24, 0x86	; 134
    2726:	08 95       	ret
	/*
	 * In case the frame is too large, return immediately indicating
	 * invalid status.
	 */
	if (tal_frame_to_tx == NULL) {
		return MAC_INVALID_PARAMETER;
    2728:	88 ee       	ldi	r24, 0xE8	; 232
#else   /* No BEACON_SUPPORT */
	send_frame(csma_mode, perform_frame_retry);
#endif  /* BEACON_SUPPORT / No BEACON_SUPPORT */

	return MAC_SUCCESS;
}
    272a:	08 95       	ret

0000272c <handle_tx_end_irq>:
	/* Check if TX_END interrupt, is issued due to automatic ACK
	 * transmission. */
#if ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT))
	if ((tal_state != TAL_TX_AUTO) && (!tal_beacon_transmission))
#else
	if (tal_state != TAL_TX_AUTO)
    272c:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <tal_state>
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	c1 f4       	brne	.+48     	; 0x2764 <handle_tx_end_irq+0x38>
		}
	} else
#endif /* ((MAC_START_REQUEST_CONFIRM == 1) && (defined BEACON_SUPPORT)) */
	{
		/* Read trac status before enabling RX_AACK_ON. */
		trx_trac_status = (trx_trac_status_t)trx_bit_read(
    2734:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7c0142>
    2738:	82 95       	swap	r24
    273a:	86 95       	lsr	r24
    273c:	87 70       	andi	r24, 0x07	; 7
    273e:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <trx_trac_status>
			PIN_ACK_WAITING_END();
		} else
#endif  /* BEACON_SUPPORT */
		/* Trx has handled the entire transmission incl. CSMA */
		{
			tal_state = TAL_TX_DONE; /* Further handling is done by
    2742:	82 e0       	ldi	r24, 0x02	; 2
    2744:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <tal_state>

	/*
	 * After transmission has finished, switch receiver on again.
	 * Check if receive buffer is available.
	 */
	if (NULL == tal_rx_buffer) {
    2748:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <tal_rx_buffer>
    274c:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <tal_rx_buffer+0x1>
    2750:	89 2b       	or	r24, r25
    2752:	31 f4       	brne	.+12     	; 0x2760 <handle_tx_end_irq+0x34>
		set_trx_state(CMD_PLL_ON);
    2754:	89 e0       	ldi	r24, 0x09	; 9
    2756:	12 d8       	rcall	.-4060   	; 0x177c <set_trx_state>
		tal_rx_on_required = true;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <tal_rx_on_required>
    275e:	08 95       	ret
	} else {
		set_trx_state(CMD_RX_AACK_ON);
    2760:	86 e1       	ldi	r24, 0x16	; 22
    2762:	0c c8       	rjmp	.-4072   	; 0x177c <set_trx_state>
    2764:	08 95       	ret

00002766 <tal_ant_div_config>:
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
	if (true == div_ctrl) {
    2766:	88 23       	and	r24, r24
    2768:	29 f1       	breq	.+74     	; 0x27b4 <tal_ant_div_config+0x4e>
		/* do the configurations if diversity has to be enabled */
		trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    276a:	ed e4       	ldi	r30, 0x4D	; 77
    276c:	f1 e0       	ldi	r31, 0x01	; 1
    276e:	80 81       	ld	r24, Z
    2770:	8c 7f       	andi	r24, 0xFC	; 252
    2772:	80 83       	st	Z, r24
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_ENABLE);
    2774:	80 81       	ld	r24, Z
    2776:	88 60       	ori	r24, 0x08	; 8
    2778:	80 83       	st	Z, r24

#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_ENABLE);
    277a:	aa e4       	ldi	r26, 0x4A	; 74
    277c:	b1 e0       	ldi	r27, 0x01	; 1
    277e:	8c 91       	ld	r24, X
    2780:	80 7f       	andi	r24, 0xF0	; 240
    2782:	83 60       	ori	r24, 0x03	; 3
    2784:	8c 93       	st	X, r24
#endif /* End of ((TAL_TYPE != AT86RF212) && (TAL_TYPE!= AT86RF212B)) */
		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    2786:	80 81       	ld	r24, Z
    2788:	84 60       	ori	r24, 0x04	; 4
    278a:	80 83       	st	Z, r24
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    278c:	80 81       	ld	r24, Z
    278e:	83 70       	andi	r24, 0x03	; 3
    2790:	09 f0       	breq	.+2      	; 0x2794 <tal_ant_div_config+0x2e>
    2792:	54 c0       	rjmp	.+168    	; 0x283c <tal_ant_div_config+0xd6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    2794:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
    2798:	83 ff       	sbrs	r24, 3
    279a:	52 c0       	rjmp	.+164    	; 0x2840 <tal_ant_div_config+0xda>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    279c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
#endif /* TAL_TYPE == ATMEGA128RFA1 */

		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ANT_CTRL_0) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_ENABLE) && \
    27a0:	82 ff       	sbrs	r24, 2
    27a2:	50 c0       	rjmp	.+160    	; 0x2844 <tal_ant_div_config+0xde>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_ENABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    27a4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x7c014a>
    27a8:	8f 70       	andi	r24, 0x0F	; 15
    27aa:	83 30       	cpi	r24, 0x03	; 3
    27ac:	09 f0       	breq	.+2      	; 0x27b0 <tal_ant_div_config+0x4a>
    27ae:	4c c0       	rjmp	.+152    	; 0x2848 <tal_ant_div_config+0xe2>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	08 95       	ret
		} else {
			return_var = FAILURE;
		}
	} else {
		/* do the configurations if diversity has to be disabled */
		trx_bit_write(SR_ANT_DIV_EN, ANT_DIV_DISABLE);
    27b4:	ed e4       	ldi	r30, 0x4D	; 77
    27b6:	f1 e0       	ldi	r31, 0x01	; 1
    27b8:	80 81       	ld	r24, Z
    27ba:	87 7f       	andi	r24, 0xF7	; 247
    27bc:	80 83       	st	Z, r24
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
		trx_bit_write(SR_PDT_THRES, THRES_ANT_DIV_DISABLE);
    27be:	aa e4       	ldi	r26, 0x4A	; 74
    27c0:	b1 e0       	ldi	r27, 0x01	; 1
    27c2:	8c 91       	ld	r24, X
    27c4:	80 7f       	andi	r24, 0xF0	; 240
    27c6:	87 60       	ori	r24, 0x07	; 7
    27c8:	8c 93       	st	X, r24
#endif

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
    27ca:	80 81       	ld	r24, Z
    27cc:	84 60       	ori	r24, 0x04	; 4
    27ce:	80 83       	st	Z, r24
		if (ant_ctrl == ANT_CTRL_1) {
    27d0:	61 30       	cpi	r22, 0x01	; 1
    27d2:	31 f4       	brne	.+12     	; 0x27e0 <tal_ant_div_config+0x7a>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
    27d4:	80 81       	ld	r24, Z
    27d6:	8c 7f       	andi	r24, 0xFC	; 252
    27d8:	81 60       	ori	r24, 0x01	; 1
    27da:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    27dc:	85 e8       	ldi	r24, 0x85	; 133
    27de:	17 c0       	rjmp	.+46     	; 0x280e <tal_ant_div_config+0xa8>

		trx_bit_write(SR_ANT_EXT_SW_EN, ANT_EXT_SW_ENABLE);
		if (ant_ctrl == ANT_CTRL_1) {
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
    27e0:	62 30       	cpi	r22, 0x02	; 2
    27e2:	41 f4       	brne	.+16     	; 0x27f4 <tal_ant_div_config+0x8e>
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
    27e4:	ed e4       	ldi	r30, 0x4D	; 77
    27e6:	f1 e0       	ldi	r31, 0x01	; 1
    27e8:	80 81       	ld	r24, Z
    27ea:	8c 7f       	andi	r24, 0xFC	; 252
    27ec:	82 60       	ori	r24, 0x02	; 2
    27ee:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    27f0:	85 e8       	ldi	r24, 0x85	; 133
    27f2:	0d c0       	rjmp	.+26     	; 0x280e <tal_ant_div_config+0xa8>
			/* Enable A1/X2 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_1);
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
    27f4:	66 23       	and	r22, r22
    27f6:	11 f0       	breq	.+4      	; 0x27fc <tal_ant_div_config+0x96>
    27f8:	63 30       	cpi	r22, 0x03	; 3
    27fa:	41 f4       	brne	.+16     	; 0x280c <tal_ant_div_config+0xa6>
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
    27fc:	ed e4       	ldi	r30, 0x4D	; 77
    27fe:	f1 e0       	ldi	r31, 0x01	; 1
    2800:	80 81       	ld	r24, Z
    2802:	8c 7f       	andi	r24, 0xFC	; 252
    2804:	80 83       	st	Z, r24
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    2806:	85 e8       	ldi	r24, 0x85	; 133
		} else if (ant_ctrl == ANT_CTRL_2) {
			/* Enable A2/X3 */
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_2);
		} else if (ant_ctrl == ANT_CTRL_0 || ant_ctrl == ANT_CTRL_3) {
			trx_bit_write(SR_ANT_CTRL, ANT_CTRL_0);
			ant_ctrl = 0;
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	01 c0       	rjmp	.+2      	; 0x280e <tal_ant_div_config+0xa8>
		} else {
			return_var = MAC_INVALID_PARAMETER;
    280c:	88 ee       	ldi	r24, 0xE8	; 232

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    280e:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
    2812:	23 70       	andi	r18, 0x03	; 3
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	70 e0       	ldi	r23, 0x00	; 0
    2818:	26 17       	cp	r18, r22
    281a:	37 07       	cpc	r19, r23
    281c:	b9 f4       	brne	.+46     	; 0x284c <tal_ant_div_config+0xe6>
				(trx_bit_read(SR_ANT_DIV_EN) ==
    281e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>

#if (TAL_TYPE == ATMEGARFA1)
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
    2822:	93 fd       	sbrc	r25, 3
    2824:	15 c0       	rjmp	.+42     	; 0x2850 <tal_ant_div_config+0xea>
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
    2826:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__TEXT_REGION_LENGTH__+0x7c014d>
		CONF_REG_WRITE();
#endif /* TAL_TYPE == ATMEGA128RFA1 */
		/* check the values written in transceiver registers */
		if ((trx_bit_read(SR_ANT_CTRL) == ant_ctrl) &&
				(trx_bit_read(SR_ANT_DIV_EN) ==
				ANT_DIV_DISABLE) && \
    282a:	92 fd       	sbrc	r25, 2
    282c:	13 c0       	rjmp	.+38     	; 0x2854 <tal_ant_div_config+0xee>
				(trx_bit_read(SR_ANT_EXT_SW_EN) ==
				ANT_EXT_SW_DISABLE)) {
#if ((TAL_TYPE != AT86RF212) && (TAL_TYPE != AT86RF212B))
			if ((trx_bit_read(SR_PDT_THRES) ==
    282e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <__TEXT_REGION_LENGTH__+0x7c014a>
    2832:	9f 70       	andi	r25, 0x0F	; 15
    2834:	93 30       	cpi	r25, 0x03	; 3
    2836:	79 f4       	brne	.+30     	; 0x2856 <tal_ant_div_config+0xf0>
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    283c:	85 e8       	ldi	r24, 0x85	; 133
    283e:	08 95       	ret
    2840:	85 e8       	ldi	r24, 0x85	; 133
    2842:	08 95       	ret
    2844:	85 e8       	ldi	r24, 0x85	; 133
    2846:	08 95       	ret
 * \return The value set in the TX_PWR bits
 */
#if ((TAL_TYPE != AT86RF230B) && (TAL_TYPE != AT86RF212))
retval_t  tal_ant_div_config(bool div_ctrl, uint8_t ant_ctrl)
{
	retval_t return_var = FAILURE;
    2848:	85 e8       	ldi	r24, 0x85	; 133
    284a:	08 95       	ret
			if ((trx_bit_read(SR_PDT_THRES) ==
					THRES_ANT_DIV_ENABLE))
#endif
			return_var = MAC_SUCCESS;
		} else {
			return_var = FAILURE;
    284c:	85 e8       	ldi	r24, 0x85	; 133
    284e:	08 95       	ret
    2850:	85 e8       	ldi	r24, 0x85	; 133
    2852:	08 95       	ret
    2854:	85 e8       	ldi	r24, 0x85	; 133
		}
	}

	return return_var;
}
    2856:	08 95       	ret

00002858 <__portable_avr_delay_cycles>:
	trx_bit_write(SR_RX_PDT_DIS, RX_ENABLE);
	/* Switch receiver off again */
	set_trx_state(CMD_TRX_OFF);

	return ed_value;
}
    2858:	04 c0       	rjmp	.+8      	; 0x2862 <__portable_avr_delay_cycles+0xa>
    285a:	61 50       	subi	r22, 0x01	; 1
    285c:	71 09       	sbc	r23, r1
    285e:	81 09       	sbc	r24, r1
    2860:	91 09       	sbc	r25, r1
    2862:	61 15       	cp	r22, r1
    2864:	71 05       	cpc	r23, r1
    2866:	81 05       	cpc	r24, r1
    2868:	91 05       	cpc	r25, r1
    286a:	b9 f7       	brne	.-18     	; 0x285a <__portable_avr_delay_cycles+0x2>
    286c:	08 95       	ret

0000286e <tfa_pib_set>:
    286e:	81 11       	cpse	r24, r1
    2870:	25 c0       	rjmp	.+74     	; 0x28bc <tfa_pib_set+0x4e>
    2872:	fb 01       	movw	r30, r22
    2874:	80 81       	ld	r24, Z
    2876:	80 3d       	cpi	r24, 0xD0	; 208
    2878:	2c f0       	brlt	.+10     	; 0x2884 <tfa_pib_set+0x16>
    287a:	8f ec       	ldi	r24, 0xCF	; 207
    287c:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <tfa_pib_rx_sens>
    2880:	6f e0       	ldi	r22, 0x0F	; 15
    2882:	13 c0       	rjmp	.+38     	; 0x28aa <tfa_pib_set+0x3c>
    2884:	87 3a       	cpi	r24, 0xA7	; 167
    2886:	2c f4       	brge	.+10     	; 0x2892 <tfa_pib_set+0x24>
    2888:	86 ea       	ldi	r24, 0xA6	; 166
    288a:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <tfa_pib_rx_sens>
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	0c c0       	rjmp	.+24     	; 0x28aa <tfa_pib_set+0x3c>
    2892:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <tfa_pib_rx_sens>
    2896:	08 2e       	mov	r0, r24
    2898:	00 0c       	add	r0, r0
    289a:	99 0b       	sbc	r25, r25
    289c:	86 5a       	subi	r24, 0xA6	; 166
    289e:	9f 4f       	sbci	r25, 0xFF	; 255
    28a0:	63 e0       	ldi	r22, 0x03	; 3
    28a2:	70 e0       	ldi	r23, 0x00	; 0
    28a4:	0e 94 ed 1c 	call	0x39da	; 0x39da <__divmodhi4>
    28a8:	6f 5f       	subi	r22, 0xFF	; 255
    28aa:	e5 e5       	ldi	r30, 0x55	; 85
    28ac:	f1 e0       	ldi	r31, 0x01	; 1
    28ae:	80 81       	ld	r24, Z
    28b0:	80 7f       	andi	r24, 0xF0	; 240
    28b2:	6f 70       	andi	r22, 0x0F	; 15
    28b4:	68 2b       	or	r22, r24
    28b6:	60 83       	st	Z, r22
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	08 95       	ret
    28bc:	84 ef       	ldi	r24, 0xF4	; 244
    28be:	08 95       	ret

000028c0 <tfa_init>:
    28c0:	86 ea       	ldi	r24, 0xA6	; 166
    28c2:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <tfa_pib_rx_sens>
    28c6:	64 e7       	ldi	r22, 0x74	; 116
    28c8:	74 e0       	ldi	r23, 0x04	; 4
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	d0 df       	rcall	.-96     	; 0x286e <tfa_pib_set>
    28ce:	61 e0       	ldi	r22, 0x01	; 1
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
    28d6:	60 e1       	ldi	r22, 0x10	; 16
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	08 95       	ret

000028e2 <tfa_get_batmon_voltage>:
 * \brief Get the transceiver's supply voltage
 *
 * \return mv Milli Volt; 0 if below threshold, 0xFFFF if above threshold
 */
uint16_t tfa_get_batmon_voltage(void)
{
    28e2:	ff 92       	push	r15
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	cf 93       	push	r28
    28ea:	df 93       	push	r29
	uint8_t vth_val;
	uint8_t i;
	uint16_t mv = 1; /* 1 used as indicator flag */
	bool range;

	previous_trx_status = tal_trx_status;
    28ec:	f0 90 a0 05 	lds	r15, 0x05A0	; 0x8005a0 <tal_trx_status>
	if (tal_trx_status == TRX_SLEEP) {
    28f0:	8f e0       	ldi	r24, 0x0F	; 15
    28f2:	f8 12       	cpse	r15, r24
    28f4:	03 c0       	rjmp	.+6      	; 0x28fc <tfa_get_batmon_voltage+0x1a>
		set_trx_state(CMD_TRX_OFF);
    28f6:	88 e0       	ldi	r24, 0x08	; 8
    28f8:	0e 94 be 0b 	call	0x177c	; 0x177c <set_trx_state>

	/*
	 * Disable all trx interrupts.
	 * This needs to be done AFTER the transceiver has been woken up.
	 */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_NONE);
    28fc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

	/* Check if supply voltage is within lower range */
	trx_bit_write(SR_BATMON_HR, BATMON_LOW_RANGE);
    2900:	c1 e5       	ldi	r28, 0x51	; 81
    2902:	d1 e0       	ldi	r29, 0x01	; 1
    2904:	88 81       	ld	r24, Y
    2906:	8f 7e       	andi	r24, 0xEF	; 239
    2908:	88 83       	st	Y, r24
	trx_bit_write(SR_BATMON_VTH, 0x0F);
    290a:	88 81       	ld	r24, Y
    290c:	8f 60       	ori	r24, 0x0F	; 15
    290e:	88 83       	st	Y, r24
	pal_timer_delay(5); /* Wait until Batmon has been settled. */
    2910:	67 e0       	ldi	r22, 0x07	; 7
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	9f df       	rcall	.-194    	; 0x2858 <__portable_avr_delay_cycles>
	if (trx_bit_read(SR_BATMON_OK) == BATMON_BELOW_THRES) {
    291a:	88 81       	ld	r24, Y
    291c:	85 fd       	sbrc	r24, 5
    291e:	17 c0       	rjmp	.+46     	; 0x294e <tfa_get_batmon_voltage+0x6c>
		/* Lower range */
		/* Check if supply voltage is below lower limit */
		trx_bit_write(SR_BATMON_VTH, 0);
    2920:	88 81       	ld	r24, Y
    2922:	80 7f       	andi	r24, 0xF0	; 240
    2924:	88 83       	st	Y, r24
		pal_timer_delay(2); /* Wait until Batmon has been settled. */
    2926:	63 e0       	ldi	r22, 0x03	; 3
    2928:	70 e0       	ldi	r23, 0x00	; 0
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	94 df       	rcall	.-216    	; 0x2858 <__portable_avr_delay_cycles>
		if (trx_bit_read(SR_BATMON_OK) == BATMON_BELOW_THRES) {
    2930:	88 81       	ld	r24, Y
			/* below lower limit */
			mv = SUPPLY_VOLTAGE_BELOW_LOWER_LIMIT;
    2932:	21 e0       	ldi	r18, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	85 fb       	bst	r24, 5
    2938:	00 27       	eor	r16, r16
    293a:	00 f9       	bld	r16, 0
    293c:	10 e0       	ldi	r17, 0x00	; 0
    293e:	85 ff       	sbrs	r24, 5
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	c2 2f       	mov	r28, r18
    2944:	d9 2f       	mov	r29, r25

		range = HIGH;
	}

	/* Scan through the current range for the matching threshold. */
	if (mv == 1) {
    2946:	01 2b       	or	r16, r17
    2948:	09 f4       	brne	.+2      	; 0x294c <tfa_get_batmon_voltage+0x6a>
    294a:	41 c0       	rjmp	.+130    	; 0x29ce <tfa_get_batmon_voltage+0xec>
    294c:	12 c0       	rjmp	.+36     	; 0x2972 <tfa_get_batmon_voltage+0x90>
		}

		range = LOW;
	} else {
		/* Higher range */
		trx_bit_write(SR_BATMON_HR, BATMON_HIGH_RANGE);
    294e:	c1 e5       	ldi	r28, 0x51	; 81
    2950:	d1 e0       	ldi	r29, 0x01	; 1
    2952:	88 81       	ld	r24, Y
    2954:	80 61       	ori	r24, 0x10	; 16
    2956:	88 83       	st	Y, r24
		/* Check if supply voltage is above upper limit */
		trx_bit_write(SR_BATMON_VTH, 0x0F);
    2958:	88 81       	ld	r24, Y
    295a:	8f 60       	ori	r24, 0x0F	; 15
    295c:	88 83       	st	Y, r24
		pal_timer_delay(5); /* Wait until Batmon has been settled. */
    295e:	67 e0       	ldi	r22, 0x07	; 7
    2960:	70 e0       	ldi	r23, 0x00	; 0
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	78 df       	rcall	.-272    	; 0x2858 <__portable_avr_delay_cycles>
		if (trx_bit_read(SR_BATMON_OK) == BATMON_ABOVE_THRES) {
    2968:	88 81       	ld	r24, Y
    296a:	85 fd       	sbrc	r24, 5
    296c:	2e c0       	rjmp	.+92     	; 0x29ca <tfa_get_batmon_voltage+0xe8>
			/* above upper limit */
			mv = SUPPLY_VOLTAGE_ABOVE_UPPER_LIMIT;
		}

		range = HIGH;
    296e:	d1 e0       	ldi	r29, 0x01	; 1
    2970:	01 c0       	rjmp	.+2      	; 0x2974 <tfa_get_batmon_voltage+0x92>
		if (trx_bit_read(SR_BATMON_OK) == BATMON_BELOW_THRES) {
			/* below lower limit */
			mv = SUPPLY_VOLTAGE_BELOW_LOWER_LIMIT;
		}

		range = LOW;
    2972:	d0 e0       	ldi	r29, 0x00	; 0
    2974:	c0 e0       	ldi	r28, 0x00	; 0

	/* Scan through the current range for the matching threshold. */
	if (mv == 1) {
		vth_val = 0x0F;
		for (i = 0; i < 16; i++) {
			trx_bit_write(SR_BATMON_VTH, i);
    2976:	01 e5       	ldi	r16, 0x51	; 81
    2978:	11 e0       	ldi	r17, 0x01	; 1
    297a:	f8 01       	movw	r30, r16
    297c:	80 81       	ld	r24, Z
    297e:	80 7f       	andi	r24, 0xF0	; 240
    2980:	9c 2f       	mov	r25, r28
    2982:	9f 70       	andi	r25, 0x0F	; 15
    2984:	89 2b       	or	r24, r25
    2986:	80 83       	st	Z, r24
			pal_timer_delay(2); /* Wait until Batmon has been
    2988:	63 e0       	ldi	r22, 0x03	; 3
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	63 df       	rcall	.-314    	; 0x2858 <__portable_avr_delay_cycles>
			                     * settled. */
			if (trx_bit_read(SR_BATMON_OK) ==
    2992:	f8 01       	movw	r30, r16
    2994:	80 81       	ld	r24, Z
    2996:	85 fd       	sbrc	r24, 5
    2998:	04 c0       	rjmp	.+8      	; 0x29a2 <tfa_get_batmon_voltage+0xc0>
					BATMON_BELOW_THRES) {
				if (i > 0) {
    299a:	cc 23       	and	r28, r28
    299c:	31 f0       	breq	.+12     	; 0x29aa <tfa_get_batmon_voltage+0xc8>
					vth_val = i - 1;
    299e:	c1 50       	subi	r28, 0x01	; 1
    29a0:	04 c0       	rjmp	.+8      	; 0x29aa <tfa_get_batmon_voltage+0xc8>
	}

	/* Scan through the current range for the matching threshold. */
	if (mv == 1) {
		vth_val = 0x0F;
		for (i = 0; i < 16; i++) {
    29a2:	cf 5f       	subi	r28, 0xFF	; 255
    29a4:	c0 31       	cpi	r28, 0x10	; 16
    29a6:	49 f7       	brne	.-46     	; 0x297a <tfa_get_batmon_voltage+0x98>
		range = HIGH;
	}

	/* Scan through the current range for the matching threshold. */
	if (mv == 1) {
		vth_val = 0x0F;
    29a8:	cf e0       	ldi	r28, 0x0F	; 15

				break;
			}
		}

		if (range == HIGH) {
    29aa:	dd 23       	and	r29, r29
    29ac:	39 f0       	breq	.+14     	; 0x29bc <tfa_get_batmon_voltage+0xda>
			mv = 2550 + (75 * vth_val);
    29ae:	fb e4       	ldi	r31, 0x4B	; 75
    29b0:	cf 9f       	mul	r28, r31
    29b2:	e0 01       	movw	r28, r0
    29b4:	11 24       	eor	r1, r1
    29b6:	ca 50       	subi	r28, 0x0A	; 10
    29b8:	d6 4f       	sbci	r29, 0xF6	; 246
    29ba:	09 c0       	rjmp	.+18     	; 0x29ce <tfa_get_batmon_voltage+0xec>
		} else {
			mv = 1700 + (50 * vth_val);
    29bc:	82 e3       	ldi	r24, 0x32	; 50
    29be:	c8 9f       	mul	r28, r24
    29c0:	e0 01       	movw	r28, r0
    29c2:	11 24       	eor	r1, r1
    29c4:	cc 55       	subi	r28, 0x5C	; 92
    29c6:	d9 4f       	sbci	r29, 0xF9	; 249
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <tfa_get_batmon_voltage+0xec>
		/* Check if supply voltage is above upper limit */
		trx_bit_write(SR_BATMON_VTH, 0x0F);
		pal_timer_delay(5); /* Wait until Batmon has been settled. */
		if (trx_bit_read(SR_BATMON_OK) == BATMON_ABOVE_THRES) {
			/* above upper limit */
			mv = SUPPLY_VOLTAGE_ABOVE_UPPER_LIMIT;
    29ca:	cf ef       	ldi	r28, 0xFF	; 255
    29cc:	df ef       	ldi	r29, 0xFF	; 255
		} else {
			mv = 1700 + (50 * vth_val);
		}
	}

	trx_reg_read(RG_IRQ_STATUS);
    29ce:	ef e4       	ldi	r30, 0x4F	; 79
    29d0:	f1 e0       	ldi	r31, 0x01	; 1
    29d2:	80 81       	ld	r24, Z

	/* Clear all pending interrupts. */
	pal_trx_irq_flag_clr_rx_end();
    29d4:	88 e0       	ldi	r24, 0x08	; 8
    29d6:	80 83       	st	Z, r24
	pal_trx_irq_flag_clr_tx_end();
    29d8:	80 e4       	ldi	r24, 0x40	; 64
    29da:	80 83       	st	Z, r24
	pal_trx_irq_flag_clr_tstamp();
    29dc:	84 e0       	ldi	r24, 0x04	; 4
    29de:	80 83       	st	Z, r24

	/*
	 * Enable all trx interrupts.
	 * This needs to be done BEFORE putting the transceiver back to slee.
	 */
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_DEFAULT);
    29e0:	88 e4       	ldi	r24, 0x48	; 72
    29e2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__TEXT_REGION_LENGTH__+0x7c014e>

	if (previous_trx_status == TRX_SLEEP) {
    29e6:	ef e0       	ldi	r30, 0x0F	; 15
    29e8:	fe 12       	cpse	r15, r30
    29ea:	03 c0       	rjmp	.+6      	; 0x29f2 <tfa_get_batmon_voltage+0x110>
		set_trx_state(CMD_SLEEP);
    29ec:	8f e0       	ldi	r24, 0x0F	; 15
    29ee:	0e 94 be 0b 	call	0x177c	; 0x177c <set_trx_state>
	}

	return mv;
}
    29f2:	ce 01       	movw	r24, r28
    29f4:	df 91       	pop	r29
    29f6:	cf 91       	pop	r28
    29f8:	1f 91       	pop	r17
    29fa:	0f 91       	pop	r16
    29fc:	ff 90       	pop	r15
    29fe:	08 95       	ret

00002a00 <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
    2a00:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <tmr_ovf_callback>
    2a04:	08 95       	ret

00002a06 <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
    2a06:	0c 94 13 02 	jmp	0x426	; 0x426 <tmr_cca_callback>
    2a0a:	08 95       	ret

00002a0c <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
    2a0c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    2a10:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
    2a14:	08 95       	ret

00002a16 <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    2a16:	ef e6       	ldi	r30, 0x6F	; 111
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	8d 7f       	andi	r24, 0xFD	; 253
    2a1e:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
    2a20:	b1 9a       	sbi	0x16, 1	; 22
    2a22:	08 95       	ret

00002a24 <tmr_enable_cc_interrupt>:
    2a24:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
    2a26:	ef e6       	ldi	r30, 0x6F	; 111
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	82 60       	ori	r24, 0x02	; 2
    2a2e:	80 83       	st	Z, r24
    2a30:	08 95       	ret

00002a32 <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    2a32:	ef e6       	ldi	r30, 0x6F	; 111
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	81 60       	ori	r24, 0x01	; 1
    2a3a:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
    2a3c:	b0 9a       	sbi	0x16, 0	; 22
    2a3e:	08 95       	ret

00002a40 <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
    2a40:	80 e8       	ldi	r24, 0x80	; 128
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	82 c3       	rjmp	.+1796   	; 0x314a <tc_disable>
    2a46:	08 95       	ret

00002a48 <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
    2a48:	e9 e8       	ldi	r30, 0x89	; 137
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	20 81       	ld	r18, Z
    2a4e:	92 2b       	or	r25, r18
    2a50:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
    2a52:	e8 e8       	ldi	r30, 0x88	; 136
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	90 81       	ld	r25, Z
    2a58:	89 2b       	or	r24, r25
    2a5a:	80 83       	st	Z, r24
    2a5c:	08 95       	ret

00002a5e <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    2a5e:	cf 93       	push	r28
    2a60:	df 93       	push	r29
    2a62:	1f 92       	push	r1
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2a68:	8f b7       	in	r24, 0x3f	; 63
    2a6a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2a6c:	f8 94       	cli
	return flags;
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
    2a70:	0f 90       	pop	r0
    2a72:	df 91       	pop	r29
    2a74:	cf 91       	pop	r28
    2a76:	08 95       	ret

00002a78 <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a78:	8f bf       	out	0x3f, r24	; 63
    2a7a:	08 95       	ret

00002a7c <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
    2a7c:	cf 93       	push	r28
    2a7e:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
    2a80:	80 e8       	ldi	r24, 0x80	; 128
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	eb d2       	rcall	.+1494   	; 0x305c <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
    2a86:	60 e0       	ldi	r22, 0x00	; 0
    2a88:	75 e1       	ldi	r23, 0x15	; 21
    2a8a:	80 e8       	ldi	r24, 0x80	; 128
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	d4 d3       	rcall	.+1960   	; 0x3238 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
    2a90:	cf e6       	ldi	r28, 0x6F	; 111
    2a92:	d0 e0       	ldi	r29, 0x00	; 0
    2a94:	88 81       	ld	r24, Y
    2a96:	81 60       	ori	r24, 0x01	; 1
    2a98:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
    2a9a:	63 e0       	ldi	r22, 0x03	; 3
    2a9c:	75 e1       	ldi	r23, 0x15	; 21
    2a9e:	80 e8       	ldi	r24, 0x80	; 128
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	ea d3       	rcall	.+2004   	; 0x3278 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
    2aa4:	88 81       	ld	r24, Y
    2aa6:	8d 7f       	andi	r24, 0xFD	; 253
    2aa8:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
    2aaa:	e1 e8       	ldi	r30, 0x81	; 129
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	81 60       	ori	r24, 0x01	; 1
    2ab2:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
    2ab4:	88 e0       	ldi	r24, 0x08	; 8
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	08 95       	ret

00002abc <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
    2abc:	1f 92       	push	r1
    2abe:	0f 92       	push	r0
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	0f 92       	push	r0
    2ac4:	11 24       	eor	r1, r1
    2ac6:	0b b6       	in	r0, 0x3b	; 59
    2ac8:	0f 92       	push	r0
    2aca:	2f 93       	push	r18
    2acc:	3f 93       	push	r19
    2ace:	4f 93       	push	r20
    2ad0:	5f 93       	push	r21
    2ad2:	6f 93       	push	r22
    2ad4:	7f 93       	push	r23
    2ad6:	8f 93       	push	r24
    2ad8:	9f 93       	push	r25
    2ada:	af 93       	push	r26
    2adc:	bf 93       	push	r27
    2ade:	ef 93       	push	r30
    2ae0:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
    2ae2:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <tc_tccr1_ovf_callback>
    2ae6:	f0 91 94 04 	lds	r31, 0x0494	; 0x800494 <tc_tccr1_ovf_callback+0x1>
    2aea:	30 97       	sbiw	r30, 0x00	; 0
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
    2aee:	19 95       	eicall
	}
}
    2af0:	ff 91       	pop	r31
    2af2:	ef 91       	pop	r30
    2af4:	bf 91       	pop	r27
    2af6:	af 91       	pop	r26
    2af8:	9f 91       	pop	r25
    2afa:	8f 91       	pop	r24
    2afc:	7f 91       	pop	r23
    2afe:	6f 91       	pop	r22
    2b00:	5f 91       	pop	r21
    2b02:	4f 91       	pop	r20
    2b04:	3f 91       	pop	r19
    2b06:	2f 91       	pop	r18
    2b08:	0f 90       	pop	r0
    2b0a:	0b be       	out	0x3b, r0	; 59
    2b0c:	0f 90       	pop	r0
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	0f 90       	pop	r0
    2b12:	1f 90       	pop	r1
    2b14:	18 95       	reti

00002b16 <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
    2b16:	1f 92       	push	r1
    2b18:	0f 92       	push	r0
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	0f 92       	push	r0
    2b1e:	11 24       	eor	r1, r1
    2b20:	0b b6       	in	r0, 0x3b	; 59
    2b22:	0f 92       	push	r0
    2b24:	2f 93       	push	r18
    2b26:	3f 93       	push	r19
    2b28:	4f 93       	push	r20
    2b2a:	5f 93       	push	r21
    2b2c:	6f 93       	push	r22
    2b2e:	7f 93       	push	r23
    2b30:	8f 93       	push	r24
    2b32:	9f 93       	push	r25
    2b34:	af 93       	push	r26
    2b36:	bf 93       	push	r27
    2b38:	ef 93       	push	r30
    2b3a:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
    2b3c:	e0 91 91 04 	lds	r30, 0x0491	; 0x800491 <tc_tccr1_compa_callback>
    2b40:	f0 91 92 04 	lds	r31, 0x0492	; 0x800492 <tc_tccr1_compa_callback+0x1>
    2b44:	30 97       	sbiw	r30, 0x00	; 0
    2b46:	09 f0       	breq	.+2      	; 0x2b4a <__vector_17+0x34>
		tc_tccr1_compa_callback();
    2b48:	19 95       	eicall
	}
}
    2b4a:	ff 91       	pop	r31
    2b4c:	ef 91       	pop	r30
    2b4e:	bf 91       	pop	r27
    2b50:	af 91       	pop	r26
    2b52:	9f 91       	pop	r25
    2b54:	8f 91       	pop	r24
    2b56:	7f 91       	pop	r23
    2b58:	6f 91       	pop	r22
    2b5a:	5f 91       	pop	r21
    2b5c:	4f 91       	pop	r20
    2b5e:	3f 91       	pop	r19
    2b60:	2f 91       	pop	r18
    2b62:	0f 90       	pop	r0
    2b64:	0b be       	out	0x3b, r0	; 59
    2b66:	0f 90       	pop	r0
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	0f 90       	pop	r0
    2b6c:	1f 90       	pop	r1
    2b6e:	18 95       	reti

00002b70 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
    2b70:	1f 92       	push	r1
    2b72:	0f 92       	push	r0
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	0f 92       	push	r0
    2b78:	11 24       	eor	r1, r1
    2b7a:	0b b6       	in	r0, 0x3b	; 59
    2b7c:	0f 92       	push	r0
    2b7e:	2f 93       	push	r18
    2b80:	3f 93       	push	r19
    2b82:	4f 93       	push	r20
    2b84:	5f 93       	push	r21
    2b86:	6f 93       	push	r22
    2b88:	7f 93       	push	r23
    2b8a:	8f 93       	push	r24
    2b8c:	9f 93       	push	r25
    2b8e:	af 93       	push	r26
    2b90:	bf 93       	push	r27
    2b92:	ef 93       	push	r30
    2b94:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
    2b96:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <tc_tccr1_compb_callback>
    2b9a:	f0 91 90 04 	lds	r31, 0x0490	; 0x800490 <tc_tccr1_compb_callback+0x1>
    2b9e:	30 97       	sbiw	r30, 0x00	; 0
    2ba0:	09 f0       	breq	.+2      	; 0x2ba4 <__vector_18+0x34>
		tc_tccr1_compb_callback();
    2ba2:	19 95       	eicall
	}
}
    2ba4:	ff 91       	pop	r31
    2ba6:	ef 91       	pop	r30
    2ba8:	bf 91       	pop	r27
    2baa:	af 91       	pop	r26
    2bac:	9f 91       	pop	r25
    2bae:	8f 91       	pop	r24
    2bb0:	7f 91       	pop	r23
    2bb2:	6f 91       	pop	r22
    2bb4:	5f 91       	pop	r21
    2bb6:	4f 91       	pop	r20
    2bb8:	3f 91       	pop	r19
    2bba:	2f 91       	pop	r18
    2bbc:	0f 90       	pop	r0
    2bbe:	0b be       	out	0x3b, r0	; 59
    2bc0:	0f 90       	pop	r0
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	0f 90       	pop	r0
    2bc6:	1f 90       	pop	r1
    2bc8:	18 95       	reti

00002bca <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
    2bca:	1f 92       	push	r1
    2bcc:	0f 92       	push	r0
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	0f 92       	push	r0
    2bd2:	11 24       	eor	r1, r1
    2bd4:	0b b6       	in	r0, 0x3b	; 59
    2bd6:	0f 92       	push	r0
    2bd8:	2f 93       	push	r18
    2bda:	3f 93       	push	r19
    2bdc:	4f 93       	push	r20
    2bde:	5f 93       	push	r21
    2be0:	6f 93       	push	r22
    2be2:	7f 93       	push	r23
    2be4:	8f 93       	push	r24
    2be6:	9f 93       	push	r25
    2be8:	af 93       	push	r26
    2bea:	bf 93       	push	r27
    2bec:	ef 93       	push	r30
    2bee:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
    2bf0:	e0 91 8d 04 	lds	r30, 0x048D	; 0x80048d <tc_tccr1_compc_callback>
    2bf4:	f0 91 8e 04 	lds	r31, 0x048E	; 0x80048e <tc_tccr1_compc_callback+0x1>
    2bf8:	30 97       	sbiw	r30, 0x00	; 0
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <__vector_19+0x34>
		tc_tccr1_compc_callback();
    2bfc:	19 95       	eicall
	}
}
    2bfe:	ff 91       	pop	r31
    2c00:	ef 91       	pop	r30
    2c02:	bf 91       	pop	r27
    2c04:	af 91       	pop	r26
    2c06:	9f 91       	pop	r25
    2c08:	8f 91       	pop	r24
    2c0a:	7f 91       	pop	r23
    2c0c:	6f 91       	pop	r22
    2c0e:	5f 91       	pop	r21
    2c10:	4f 91       	pop	r20
    2c12:	3f 91       	pop	r19
    2c14:	2f 91       	pop	r18
    2c16:	0f 90       	pop	r0
    2c18:	0b be       	out	0x3b, r0	; 59
    2c1a:	0f 90       	pop	r0
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	0f 90       	pop	r0
    2c20:	1f 90       	pop	r1
    2c22:	18 95       	reti

00002c24 <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
    2c24:	1f 92       	push	r1
    2c26:	0f 92       	push	r0
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	0f 92       	push	r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	0b b6       	in	r0, 0x3b	; 59
    2c30:	0f 92       	push	r0
    2c32:	2f 93       	push	r18
    2c34:	3f 93       	push	r19
    2c36:	4f 93       	push	r20
    2c38:	5f 93       	push	r21
    2c3a:	6f 93       	push	r22
    2c3c:	7f 93       	push	r23
    2c3e:	8f 93       	push	r24
    2c40:	9f 93       	push	r25
    2c42:	af 93       	push	r26
    2c44:	bf 93       	push	r27
    2c46:	ef 93       	push	r30
    2c48:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
    2c4a:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <tc_tccr3_ovf_callback>
    2c4e:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <tc_tccr3_ovf_callback+0x1>
    2c52:	30 97       	sbiw	r30, 0x00	; 0
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <__vector_35+0x34>
		tc_tccr3_ovf_callback();
    2c56:	19 95       	eicall
	}
}
    2c58:	ff 91       	pop	r31
    2c5a:	ef 91       	pop	r30
    2c5c:	bf 91       	pop	r27
    2c5e:	af 91       	pop	r26
    2c60:	9f 91       	pop	r25
    2c62:	8f 91       	pop	r24
    2c64:	7f 91       	pop	r23
    2c66:	6f 91       	pop	r22
    2c68:	5f 91       	pop	r21
    2c6a:	4f 91       	pop	r20
    2c6c:	3f 91       	pop	r19
    2c6e:	2f 91       	pop	r18
    2c70:	0f 90       	pop	r0
    2c72:	0b be       	out	0x3b, r0	; 59
    2c74:	0f 90       	pop	r0
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	0f 90       	pop	r0
    2c7a:	1f 90       	pop	r1
    2c7c:	18 95       	reti

00002c7e <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
    2c7e:	1f 92       	push	r1
    2c80:	0f 92       	push	r0
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	0f 92       	push	r0
    2c86:	11 24       	eor	r1, r1
    2c88:	0b b6       	in	r0, 0x3b	; 59
    2c8a:	0f 92       	push	r0
    2c8c:	2f 93       	push	r18
    2c8e:	3f 93       	push	r19
    2c90:	4f 93       	push	r20
    2c92:	5f 93       	push	r21
    2c94:	6f 93       	push	r22
    2c96:	7f 93       	push	r23
    2c98:	8f 93       	push	r24
    2c9a:	9f 93       	push	r25
    2c9c:	af 93       	push	r26
    2c9e:	bf 93       	push	r27
    2ca0:	ef 93       	push	r30
    2ca2:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
    2ca4:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <tc_tccr3_compa_callback>
    2ca8:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <tc_tccr3_compa_callback+0x1>
    2cac:	30 97       	sbiw	r30, 0x00	; 0
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <__vector_32+0x34>
		tc_tccr3_compa_callback();
    2cb0:	19 95       	eicall
	}
}
    2cb2:	ff 91       	pop	r31
    2cb4:	ef 91       	pop	r30
    2cb6:	bf 91       	pop	r27
    2cb8:	af 91       	pop	r26
    2cba:	9f 91       	pop	r25
    2cbc:	8f 91       	pop	r24
    2cbe:	7f 91       	pop	r23
    2cc0:	6f 91       	pop	r22
    2cc2:	5f 91       	pop	r21
    2cc4:	4f 91       	pop	r20
    2cc6:	3f 91       	pop	r19
    2cc8:	2f 91       	pop	r18
    2cca:	0f 90       	pop	r0
    2ccc:	0b be       	out	0x3b, r0	; 59
    2cce:	0f 90       	pop	r0
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	0f 90       	pop	r0
    2cd4:	1f 90       	pop	r1
    2cd6:	18 95       	reti

00002cd8 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
    2cd8:	1f 92       	push	r1
    2cda:	0f 92       	push	r0
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	0f 92       	push	r0
    2ce0:	11 24       	eor	r1, r1
    2ce2:	0b b6       	in	r0, 0x3b	; 59
    2ce4:	0f 92       	push	r0
    2ce6:	2f 93       	push	r18
    2ce8:	3f 93       	push	r19
    2cea:	4f 93       	push	r20
    2cec:	5f 93       	push	r21
    2cee:	6f 93       	push	r22
    2cf0:	7f 93       	push	r23
    2cf2:	8f 93       	push	r24
    2cf4:	9f 93       	push	r25
    2cf6:	af 93       	push	r26
    2cf8:	bf 93       	push	r27
    2cfa:	ef 93       	push	r30
    2cfc:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
    2cfe:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <tc_tccr3_compb_callback>
    2d02:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <tc_tccr3_compb_callback+0x1>
    2d06:	30 97       	sbiw	r30, 0x00	; 0
    2d08:	09 f0       	breq	.+2      	; 0x2d0c <__vector_33+0x34>
		tc_tccr3_compb_callback();
    2d0a:	19 95       	eicall
	}
}
    2d0c:	ff 91       	pop	r31
    2d0e:	ef 91       	pop	r30
    2d10:	bf 91       	pop	r27
    2d12:	af 91       	pop	r26
    2d14:	9f 91       	pop	r25
    2d16:	8f 91       	pop	r24
    2d18:	7f 91       	pop	r23
    2d1a:	6f 91       	pop	r22
    2d1c:	5f 91       	pop	r21
    2d1e:	4f 91       	pop	r20
    2d20:	3f 91       	pop	r19
    2d22:	2f 91       	pop	r18
    2d24:	0f 90       	pop	r0
    2d26:	0b be       	out	0x3b, r0	; 59
    2d28:	0f 90       	pop	r0
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	0f 90       	pop	r0
    2d2e:	1f 90       	pop	r1
    2d30:	18 95       	reti

00002d32 <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
    2d32:	1f 92       	push	r1
    2d34:	0f 92       	push	r0
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	0f 92       	push	r0
    2d3a:	11 24       	eor	r1, r1
    2d3c:	0b b6       	in	r0, 0x3b	; 59
    2d3e:	0f 92       	push	r0
    2d40:	2f 93       	push	r18
    2d42:	3f 93       	push	r19
    2d44:	4f 93       	push	r20
    2d46:	5f 93       	push	r21
    2d48:	6f 93       	push	r22
    2d4a:	7f 93       	push	r23
    2d4c:	8f 93       	push	r24
    2d4e:	9f 93       	push	r25
    2d50:	af 93       	push	r26
    2d52:	bf 93       	push	r27
    2d54:	ef 93       	push	r30
    2d56:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
    2d58:	e0 91 85 04 	lds	r30, 0x0485	; 0x800485 <tc_tccr3_compc_callback>
    2d5c:	f0 91 86 04 	lds	r31, 0x0486	; 0x800486 <tc_tccr3_compc_callback+0x1>
    2d60:	30 97       	sbiw	r30, 0x00	; 0
    2d62:	09 f0       	breq	.+2      	; 0x2d66 <__vector_34+0x34>
		tc_tccr3_compc_callback();
    2d64:	19 95       	eicall
	}
}
    2d66:	ff 91       	pop	r31
    2d68:	ef 91       	pop	r30
    2d6a:	bf 91       	pop	r27
    2d6c:	af 91       	pop	r26
    2d6e:	9f 91       	pop	r25
    2d70:	8f 91       	pop	r24
    2d72:	7f 91       	pop	r23
    2d74:	6f 91       	pop	r22
    2d76:	5f 91       	pop	r21
    2d78:	4f 91       	pop	r20
    2d7a:	3f 91       	pop	r19
    2d7c:	2f 91       	pop	r18
    2d7e:	0f 90       	pop	r0
    2d80:	0b be       	out	0x3b, r0	; 59
    2d82:	0f 90       	pop	r0
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	0f 90       	pop	r0
    2d88:	1f 90       	pop	r1
    2d8a:	18 95       	reti

00002d8c <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
    2d8c:	1f 92       	push	r1
    2d8e:	0f 92       	push	r0
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	0f 92       	push	r0
    2d94:	11 24       	eor	r1, r1
    2d96:	0b b6       	in	r0, 0x3b	; 59
    2d98:	0f 92       	push	r0
    2d9a:	2f 93       	push	r18
    2d9c:	3f 93       	push	r19
    2d9e:	4f 93       	push	r20
    2da0:	5f 93       	push	r21
    2da2:	6f 93       	push	r22
    2da4:	7f 93       	push	r23
    2da6:	8f 93       	push	r24
    2da8:	9f 93       	push	r25
    2daa:	af 93       	push	r26
    2dac:	bf 93       	push	r27
    2dae:	ef 93       	push	r30
    2db0:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
    2db2:	e0 91 83 04 	lds	r30, 0x0483	; 0x800483 <tc_tccr4_ovf_callback>
    2db6:	f0 91 84 04 	lds	r31, 0x0484	; 0x800484 <tc_tccr4_ovf_callback+0x1>
    2dba:	30 97       	sbiw	r30, 0x00	; 0
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
    2dbe:	19 95       	eicall
	}
}
    2dc0:	ff 91       	pop	r31
    2dc2:	ef 91       	pop	r30
    2dc4:	bf 91       	pop	r27
    2dc6:	af 91       	pop	r26
    2dc8:	9f 91       	pop	r25
    2dca:	8f 91       	pop	r24
    2dcc:	7f 91       	pop	r23
    2dce:	6f 91       	pop	r22
    2dd0:	5f 91       	pop	r21
    2dd2:	4f 91       	pop	r20
    2dd4:	3f 91       	pop	r19
    2dd6:	2f 91       	pop	r18
    2dd8:	0f 90       	pop	r0
    2dda:	0b be       	out	0x3b, r0	; 59
    2ddc:	0f 90       	pop	r0
    2dde:	0f be       	out	0x3f, r0	; 63
    2de0:	0f 90       	pop	r0
    2de2:	1f 90       	pop	r1
    2de4:	18 95       	reti

00002de6 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
    2de6:	1f 92       	push	r1
    2de8:	0f 92       	push	r0
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	0f 92       	push	r0
    2dee:	11 24       	eor	r1, r1
    2df0:	0b b6       	in	r0, 0x3b	; 59
    2df2:	0f 92       	push	r0
    2df4:	2f 93       	push	r18
    2df6:	3f 93       	push	r19
    2df8:	4f 93       	push	r20
    2dfa:	5f 93       	push	r21
    2dfc:	6f 93       	push	r22
    2dfe:	7f 93       	push	r23
    2e00:	8f 93       	push	r24
    2e02:	9f 93       	push	r25
    2e04:	af 93       	push	r26
    2e06:	bf 93       	push	r27
    2e08:	ef 93       	push	r30
    2e0a:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
    2e0c:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <tc_tccr4_compa_callback>
    2e10:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <tc_tccr4_compa_callback+0x1>
    2e14:	30 97       	sbiw	r30, 0x00	; 0
    2e16:	09 f0       	breq	.+2      	; 0x2e1a <__vector_42+0x34>
		tc_tccr4_compa_callback();
    2e18:	19 95       	eicall
	}
}
    2e1a:	ff 91       	pop	r31
    2e1c:	ef 91       	pop	r30
    2e1e:	bf 91       	pop	r27
    2e20:	af 91       	pop	r26
    2e22:	9f 91       	pop	r25
    2e24:	8f 91       	pop	r24
    2e26:	7f 91       	pop	r23
    2e28:	6f 91       	pop	r22
    2e2a:	5f 91       	pop	r21
    2e2c:	4f 91       	pop	r20
    2e2e:	3f 91       	pop	r19
    2e30:	2f 91       	pop	r18
    2e32:	0f 90       	pop	r0
    2e34:	0b be       	out	0x3b, r0	; 59
    2e36:	0f 90       	pop	r0
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	0f 90       	pop	r0
    2e3c:	1f 90       	pop	r1
    2e3e:	18 95       	reti

00002e40 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
    2e40:	1f 92       	push	r1
    2e42:	0f 92       	push	r0
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	0f 92       	push	r0
    2e48:	11 24       	eor	r1, r1
    2e4a:	0b b6       	in	r0, 0x3b	; 59
    2e4c:	0f 92       	push	r0
    2e4e:	2f 93       	push	r18
    2e50:	3f 93       	push	r19
    2e52:	4f 93       	push	r20
    2e54:	5f 93       	push	r21
    2e56:	6f 93       	push	r22
    2e58:	7f 93       	push	r23
    2e5a:	8f 93       	push	r24
    2e5c:	9f 93       	push	r25
    2e5e:	af 93       	push	r26
    2e60:	bf 93       	push	r27
    2e62:	ef 93       	push	r30
    2e64:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
    2e66:	e0 91 7f 04 	lds	r30, 0x047F	; 0x80047f <tc_tccr4_compb_callback>
    2e6a:	f0 91 80 04 	lds	r31, 0x0480	; 0x800480 <tc_tccr4_compb_callback+0x1>
    2e6e:	30 97       	sbiw	r30, 0x00	; 0
    2e70:	09 f0       	breq	.+2      	; 0x2e74 <__vector_43+0x34>
		tc_tccr4_compb_callback();
    2e72:	19 95       	eicall
	}
}
    2e74:	ff 91       	pop	r31
    2e76:	ef 91       	pop	r30
    2e78:	bf 91       	pop	r27
    2e7a:	af 91       	pop	r26
    2e7c:	9f 91       	pop	r25
    2e7e:	8f 91       	pop	r24
    2e80:	7f 91       	pop	r23
    2e82:	6f 91       	pop	r22
    2e84:	5f 91       	pop	r21
    2e86:	4f 91       	pop	r20
    2e88:	3f 91       	pop	r19
    2e8a:	2f 91       	pop	r18
    2e8c:	0f 90       	pop	r0
    2e8e:	0b be       	out	0x3b, r0	; 59
    2e90:	0f 90       	pop	r0
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	0f 90       	pop	r0
    2e96:	1f 90       	pop	r1
    2e98:	18 95       	reti

00002e9a <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
    2e9a:	1f 92       	push	r1
    2e9c:	0f 92       	push	r0
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	0f 92       	push	r0
    2ea2:	11 24       	eor	r1, r1
    2ea4:	0b b6       	in	r0, 0x3b	; 59
    2ea6:	0f 92       	push	r0
    2ea8:	2f 93       	push	r18
    2eaa:	3f 93       	push	r19
    2eac:	4f 93       	push	r20
    2eae:	5f 93       	push	r21
    2eb0:	6f 93       	push	r22
    2eb2:	7f 93       	push	r23
    2eb4:	8f 93       	push	r24
    2eb6:	9f 93       	push	r25
    2eb8:	af 93       	push	r26
    2eba:	bf 93       	push	r27
    2ebc:	ef 93       	push	r30
    2ebe:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
    2ec0:	e0 91 7d 04 	lds	r30, 0x047D	; 0x80047d <tc_tccr4_compc_callback>
    2ec4:	f0 91 7e 04 	lds	r31, 0x047E	; 0x80047e <tc_tccr4_compc_callback+0x1>
    2ec8:	30 97       	sbiw	r30, 0x00	; 0
    2eca:	09 f0       	breq	.+2      	; 0x2ece <__vector_44+0x34>
		tc_tccr4_compc_callback();
    2ecc:	19 95       	eicall
	}
}
    2ece:	ff 91       	pop	r31
    2ed0:	ef 91       	pop	r30
    2ed2:	bf 91       	pop	r27
    2ed4:	af 91       	pop	r26
    2ed6:	9f 91       	pop	r25
    2ed8:	8f 91       	pop	r24
    2eda:	7f 91       	pop	r23
    2edc:	6f 91       	pop	r22
    2ede:	5f 91       	pop	r21
    2ee0:	4f 91       	pop	r20
    2ee2:	3f 91       	pop	r19
    2ee4:	2f 91       	pop	r18
    2ee6:	0f 90       	pop	r0
    2ee8:	0b be       	out	0x3b, r0	; 59
    2eea:	0f 90       	pop	r0
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	0f 90       	pop	r0
    2ef0:	1f 90       	pop	r1
    2ef2:	18 95       	reti

00002ef4 <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
    2ef4:	1f 92       	push	r1
    2ef6:	0f 92       	push	r0
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	0f 92       	push	r0
    2efc:	11 24       	eor	r1, r1
    2efe:	0b b6       	in	r0, 0x3b	; 59
    2f00:	0f 92       	push	r0
    2f02:	2f 93       	push	r18
    2f04:	3f 93       	push	r19
    2f06:	4f 93       	push	r20
    2f08:	5f 93       	push	r21
    2f0a:	6f 93       	push	r22
    2f0c:	7f 93       	push	r23
    2f0e:	8f 93       	push	r24
    2f10:	9f 93       	push	r25
    2f12:	af 93       	push	r26
    2f14:	bf 93       	push	r27
    2f16:	ef 93       	push	r30
    2f18:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
    2f1a:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <tc_tccr5_ovf_callback>
    2f1e:	f0 91 7c 04 	lds	r31, 0x047C	; 0x80047c <tc_tccr5_ovf_callback+0x1>
    2f22:	30 97       	sbiw	r30, 0x00	; 0
    2f24:	09 f0       	breq	.+2      	; 0x2f28 <__vector_50+0x34>
		tc_tccr5_ovf_callback();
    2f26:	19 95       	eicall
	}
}
    2f28:	ff 91       	pop	r31
    2f2a:	ef 91       	pop	r30
    2f2c:	bf 91       	pop	r27
    2f2e:	af 91       	pop	r26
    2f30:	9f 91       	pop	r25
    2f32:	8f 91       	pop	r24
    2f34:	7f 91       	pop	r23
    2f36:	6f 91       	pop	r22
    2f38:	5f 91       	pop	r21
    2f3a:	4f 91       	pop	r20
    2f3c:	3f 91       	pop	r19
    2f3e:	2f 91       	pop	r18
    2f40:	0f 90       	pop	r0
    2f42:	0b be       	out	0x3b, r0	; 59
    2f44:	0f 90       	pop	r0
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	0f 90       	pop	r0
    2f4a:	1f 90       	pop	r1
    2f4c:	18 95       	reti

00002f4e <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
    2f4e:	1f 92       	push	r1
    2f50:	0f 92       	push	r0
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	0f 92       	push	r0
    2f56:	11 24       	eor	r1, r1
    2f58:	0b b6       	in	r0, 0x3b	; 59
    2f5a:	0f 92       	push	r0
    2f5c:	2f 93       	push	r18
    2f5e:	3f 93       	push	r19
    2f60:	4f 93       	push	r20
    2f62:	5f 93       	push	r21
    2f64:	6f 93       	push	r22
    2f66:	7f 93       	push	r23
    2f68:	8f 93       	push	r24
    2f6a:	9f 93       	push	r25
    2f6c:	af 93       	push	r26
    2f6e:	bf 93       	push	r27
    2f70:	ef 93       	push	r30
    2f72:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
    2f74:	e0 91 79 04 	lds	r30, 0x0479	; 0x800479 <tc_tccr5_compa_callback>
    2f78:	f0 91 7a 04 	lds	r31, 0x047A	; 0x80047a <tc_tccr5_compa_callback+0x1>
    2f7c:	30 97       	sbiw	r30, 0x00	; 0
    2f7e:	09 f0       	breq	.+2      	; 0x2f82 <__vector_47+0x34>
		tc_tccr5_compa_callback();
    2f80:	19 95       	eicall
	}
}
    2f82:	ff 91       	pop	r31
    2f84:	ef 91       	pop	r30
    2f86:	bf 91       	pop	r27
    2f88:	af 91       	pop	r26
    2f8a:	9f 91       	pop	r25
    2f8c:	8f 91       	pop	r24
    2f8e:	7f 91       	pop	r23
    2f90:	6f 91       	pop	r22
    2f92:	5f 91       	pop	r21
    2f94:	4f 91       	pop	r20
    2f96:	3f 91       	pop	r19
    2f98:	2f 91       	pop	r18
    2f9a:	0f 90       	pop	r0
    2f9c:	0b be       	out	0x3b, r0	; 59
    2f9e:	0f 90       	pop	r0
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	0f 90       	pop	r0
    2fa4:	1f 90       	pop	r1
    2fa6:	18 95       	reti

00002fa8 <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
    2fa8:	1f 92       	push	r1
    2faa:	0f 92       	push	r0
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	0f 92       	push	r0
    2fb0:	11 24       	eor	r1, r1
    2fb2:	0b b6       	in	r0, 0x3b	; 59
    2fb4:	0f 92       	push	r0
    2fb6:	2f 93       	push	r18
    2fb8:	3f 93       	push	r19
    2fba:	4f 93       	push	r20
    2fbc:	5f 93       	push	r21
    2fbe:	6f 93       	push	r22
    2fc0:	7f 93       	push	r23
    2fc2:	8f 93       	push	r24
    2fc4:	9f 93       	push	r25
    2fc6:	af 93       	push	r26
    2fc8:	bf 93       	push	r27
    2fca:	ef 93       	push	r30
    2fcc:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
    2fce:	e0 91 77 04 	lds	r30, 0x0477	; 0x800477 <tc_tccr5_compb_callback>
    2fd2:	f0 91 78 04 	lds	r31, 0x0478	; 0x800478 <tc_tccr5_compb_callback+0x1>
    2fd6:	30 97       	sbiw	r30, 0x00	; 0
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <__vector_48+0x34>
		tc_tccr5_compb_callback();
    2fda:	19 95       	eicall
	}
}
    2fdc:	ff 91       	pop	r31
    2fde:	ef 91       	pop	r30
    2fe0:	bf 91       	pop	r27
    2fe2:	af 91       	pop	r26
    2fe4:	9f 91       	pop	r25
    2fe6:	8f 91       	pop	r24
    2fe8:	7f 91       	pop	r23
    2fea:	6f 91       	pop	r22
    2fec:	5f 91       	pop	r21
    2fee:	4f 91       	pop	r20
    2ff0:	3f 91       	pop	r19
    2ff2:	2f 91       	pop	r18
    2ff4:	0f 90       	pop	r0
    2ff6:	0b be       	out	0x3b, r0	; 59
    2ff8:	0f 90       	pop	r0
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	0f 90       	pop	r0
    2ffe:	1f 90       	pop	r1
    3000:	18 95       	reti

00003002 <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
    3002:	1f 92       	push	r1
    3004:	0f 92       	push	r0
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	0f 92       	push	r0
    300a:	11 24       	eor	r1, r1
    300c:	0b b6       	in	r0, 0x3b	; 59
    300e:	0f 92       	push	r0
    3010:	2f 93       	push	r18
    3012:	3f 93       	push	r19
    3014:	4f 93       	push	r20
    3016:	5f 93       	push	r21
    3018:	6f 93       	push	r22
    301a:	7f 93       	push	r23
    301c:	8f 93       	push	r24
    301e:	9f 93       	push	r25
    3020:	af 93       	push	r26
    3022:	bf 93       	push	r27
    3024:	ef 93       	push	r30
    3026:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
    3028:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <tc_tccr5_compc_callback>
    302c:	f0 91 76 04 	lds	r31, 0x0476	; 0x800476 <tc_tccr5_compc_callback+0x1>
    3030:	30 97       	sbiw	r30, 0x00	; 0
    3032:	09 f0       	breq	.+2      	; 0x3036 <__vector_49+0x34>
		tc_tccr5_compc_callback();
    3034:	19 95       	eicall
	}
}
    3036:	ff 91       	pop	r31
    3038:	ef 91       	pop	r30
    303a:	bf 91       	pop	r27
    303c:	af 91       	pop	r26
    303e:	9f 91       	pop	r25
    3040:	8f 91       	pop	r24
    3042:	7f 91       	pop	r23
    3044:	6f 91       	pop	r22
    3046:	5f 91       	pop	r21
    3048:	4f 91       	pop	r20
    304a:	3f 91       	pop	r19
    304c:	2f 91       	pop	r18
    304e:	0f 90       	pop	r0
    3050:	0b be       	out	0x3b, r0	; 59
    3052:	0f 90       	pop	r0
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	0f 90       	pop	r0
    3058:	1f 90       	pop	r1
    305a:	18 95       	reti

0000305c <tc_enable>:

void tc_enable(volatile void *tc)
{
    305c:	1f 93       	push	r17
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
    3062:	1f 92       	push	r1
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3068:	2f b7       	in	r18, 0x3f	; 63
    306a:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    306c:	f8 94       	cli
	return flags;
    306e:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    3070:	00 97       	sbiw	r24, 0x00	; 0
    3072:	09 f4       	brne	.+2      	; 0x3076 <tc_enable+0x1a>
    3074:	64 c0       	rjmp	.+200    	; 0x313e <tc_enable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    3076:	88 37       	cpi	r24, 0x78	; 120
    3078:	91 05       	cpc	r25, r1
    307a:	49 f4       	brne	.+18     	; 0x308e <tc_enable+0x32>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
    307c:	61 e0       	ldi	r22, 0x01	; 1
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
    3084:	60 e1       	ldi	r22, 0x10	; 16
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
    308c:	58 c0       	rjmp	.+176    	; 0x313e <tc_enable+0xe2>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    308e:	80 3c       	cpi	r24, 0xC0	; 192
    3090:	91 05       	cpc	r25, r1
    3092:	29 f4       	brne	.+10     	; 0x309e <tc_enable+0x42>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    3094:	62 e0       	ldi	r22, 0x02	; 2
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
    309c:	50 c0       	rjmp	.+160    	; 0x313e <tc_enable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    309e:	8c 34       	cpi	r24, 0x4C	; 76
    30a0:	91 05       	cpc	r25, r1
    30a2:	29 f4       	brne	.+10     	; 0x30ae <tc_enable+0x52>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
    30a4:	64 e0       	ldi	r22, 0x04	; 4
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
    30ac:	48 c0       	rjmp	.+144    	; 0x313e <tc_enable+0xe2>
	}
#endif

	else if (module == &TCCR1A) {
    30ae:	80 38       	cpi	r24, 0x80	; 128
    30b0:	91 05       	cpc	r25, r1
    30b2:	29 f4       	brne	.+10     	; 0x30be <tc_enable+0x62>
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    30b4:	68 e0       	ldi	r22, 0x08	; 8
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
    30bc:	40 c0       	rjmp	.+128    	; 0x313e <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    30be:	84 34       	cpi	r24, 0x44	; 68
    30c0:	91 05       	cpc	r25, r1
    30c2:	29 f4       	brne	.+10     	; 0x30ce <tc_enable+0x72>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    30c4:	60 e2       	ldi	r22, 0x20	; 32
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
    30cc:	38 c0       	rjmp	.+112    	; 0x313e <tc_enable+0xe2>
	} else if (module == &TCCR2A) {
    30ce:	80 3b       	cpi	r24, 0xB0	; 176
    30d0:	91 05       	cpc	r25, r1
    30d2:	29 f4       	brne	.+10     	; 0x30de <tc_enable+0x82>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    30d4:	60 e4       	ldi	r22, 0x40	; 64
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
    30dc:	30 c0       	rjmp	.+96     	; 0x313e <tc_enable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    30de:	88 3b       	cpi	r24, 0xB8	; 184
    30e0:	91 05       	cpc	r25, r1
    30e2:	29 f4       	brne	.+10     	; 0x30ee <tc_enable+0x92>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
    30e4:	60 e8       	ldi	r22, 0x80	; 128
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
    30ec:	28 c0       	rjmp	.+80     	; 0x313e <tc_enable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    30ee:	88 3c       	cpi	r24, 0xC8	; 200
    30f0:	91 05       	cpc	r25, r1
    30f2:	29 f4       	brne	.+10     	; 0x30fe <tc_enable+0xa2>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
    30f4:	61 e0       	ldi	r22, 0x01	; 1
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
    30fc:	20 c0       	rjmp	.+64     	; 0x313e <tc_enable+0xe2>
	} else if (module == &TCCR3A) {
    30fe:	80 39       	cpi	r24, 0x90	; 144
    3100:	91 05       	cpc	r25, r1
    3102:	29 f4       	brne	.+10     	; 0x310e <tc_enable+0xb2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
    3104:	68 e0       	ldi	r22, 0x08	; 8
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
    310c:	18 c0       	rjmp	.+48     	; 0x313e <tc_enable+0xe2>
	} else if (module == &TCCR4A) {
    310e:	80 3a       	cpi	r24, 0xA0	; 160
    3110:	91 05       	cpc	r25, r1
    3112:	29 f4       	brne	.+10     	; 0x311e <tc_enable+0xc2>
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
    3114:	60 e1       	ldi	r22, 0x10	; 16
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
    311c:	10 c0       	rjmp	.+32     	; 0x313e <tc_enable+0xe2>
	} else if (module == &TCCR5A) {
    311e:	80 32       	cpi	r24, 0x20	; 32
    3120:	21 e0       	ldi	r18, 0x01	; 1
    3122:	92 07       	cpc	r25, r18
    3124:	29 f4       	brne	.+10     	; 0x3130 <tc_enable+0xd4>
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
    3126:	60 e2       	ldi	r22, 0x20	; 32
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
    312e:	07 c0       	rjmp	.+14     	; 0x313e <tc_enable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    3130:	83 34       	cpi	r24, 0x43	; 67
    3132:	91 40       	sbci	r25, 0x01	; 1
    3134:	21 f4       	brne	.+8      	; 0x313e <tc_enable+0xe2>
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
    3136:	60 e4       	ldi	r22, 0x40	; 64
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	0e 94 66 06 	call	0xccc	; 0xccc <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    313e:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    3140:	0f 90       	pop	r0
    3142:	df 91       	pop	r29
    3144:	cf 91       	pop	r28
    3146:	1f 91       	pop	r17
    3148:	08 95       	ret

0000314a <tc_disable>:

void tc_disable(volatile void *tc)
{
    314a:	1f 93       	push	r17
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	1f 92       	push	r1
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3156:	2f b7       	in	r18, 0x3f	; 63
    3158:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    315a:	f8 94       	cli
	return flags;
    315c:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	09 f4       	brne	.+2      	; 0x3164 <tc_disable+0x1a>
    3162:	64 c0       	rjmp	.+200    	; 0x322c <tc_disable+0xe2>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    3164:	88 37       	cpi	r24, 0x78	; 120
    3166:	91 05       	cpc	r25, r1
    3168:	49 f4       	brne	.+18     	; 0x317c <tc_disable+0x32>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    316a:	61 e0       	ldi	r22, 0x01	; 1
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    3172:	60 e1       	ldi	r22, 0x10	; 16
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	0e 94 7e 06 	call	0xcfc	; 0xcfc <sysclk_disable_module>
    317a:	58 c0       	rjmp	.+176    	; 0x322c <tc_disable+0xe2>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    317c:	80 3c       	cpi	r24, 0xC0	; 192
    317e:	91 05       	cpc	r25, r1
    3180:	29 f4       	brne	.+10     	; 0x318c <tc_disable+0x42>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    3182:	62 e0       	ldi	r22, 0x02	; 2
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	0e 94 7e 06 	call	0xcfc	; 0xcfc <sysclk_disable_module>
    318a:	50 c0       	rjmp	.+160    	; 0x322c <tc_disable+0xe2>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    318c:	8c 34       	cpi	r24, 0x4C	; 76
    318e:	91 05       	cpc	r25, r1
    3190:	29 f4       	brne	.+10     	; 0x319c <tc_disable+0x52>
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    3192:	64 e0       	ldi	r22, 0x04	; 4
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	0e 94 7e 06 	call	0xcfc	; 0xcfc <sysclk_disable_module>
    319a:	48 c0       	rjmp	.+144    	; 0x322c <tc_disable+0xe2>
	}
#endif
	else if (module == &TCCR1A) {
    319c:	80 38       	cpi	r24, 0x80	; 128
    319e:	91 05       	cpc	r25, r1
    31a0:	29 f4       	brne	.+10     	; 0x31ac <tc_disable+0x62>
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    31a2:	68 e0       	ldi	r22, 0x08	; 8
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <sysclk_disable_module>
    31aa:	40 c0       	rjmp	.+128    	; 0x322c <tc_disable+0xe2>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    31ac:	84 34       	cpi	r24, 0x44	; 68
    31ae:	91 05       	cpc	r25, r1
    31b0:	29 f4       	brne	.+10     	; 0x31bc <tc_disable+0x72>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    31b2:	60 e2       	ldi	r22, 0x20	; 32
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <sysclk_disable_module>
    31ba:	38 c0       	rjmp	.+112    	; 0x322c <tc_disable+0xe2>
	} else if (module == &TCCR2A) {
    31bc:	80 3b       	cpi	r24, 0xB0	; 176
    31be:	91 05       	cpc	r25, r1
    31c0:	29 f4       	brne	.+10     	; 0x31cc <tc_disable+0x82>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    31c2:	60 e4       	ldi	r22, 0x40	; 64
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <sysclk_disable_module>
    31ca:	30 c0       	rjmp	.+96     	; 0x322c <tc_disable+0xe2>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    31cc:	88 3b       	cpi	r24, 0xB8	; 184
    31ce:	91 05       	cpc	r25, r1
    31d0:	29 f4       	brne	.+10     	; 0x31dc <tc_disable+0x92>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    31d2:	60 e8       	ldi	r22, 0x80	; 128
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <sysclk_disable_module>
    31da:	28 c0       	rjmp	.+80     	; 0x322c <tc_disable+0xe2>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    31dc:	88 3c       	cpi	r24, 0xC8	; 200
    31de:	91 05       	cpc	r25, r1
    31e0:	29 f4       	brne	.+10     	; 0x31ec <tc_disable+0xa2>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    31e2:	61 e0       	ldi	r22, 0x01	; 1
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <sysclk_disable_module>
    31ea:	20 c0       	rjmp	.+64     	; 0x322c <tc_disable+0xe2>
	} else if (module == &TCCR3A) {
    31ec:	80 39       	cpi	r24, 0x90	; 144
    31ee:	91 05       	cpc	r25, r1
    31f0:	29 f4       	brne	.+10     	; 0x31fc <tc_disable+0xb2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    31f2:	68 e0       	ldi	r22, 0x08	; 8
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <sysclk_disable_module>
    31fa:	18 c0       	rjmp	.+48     	; 0x322c <tc_disable+0xe2>
	} else if (module == &TCCR4A) {
    31fc:	80 3a       	cpi	r24, 0xA0	; 160
    31fe:	91 05       	cpc	r25, r1
    3200:	29 f4       	brne	.+10     	; 0x320c <tc_disable+0xc2>
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    3202:	60 e1       	ldi	r22, 0x10	; 16
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	0e 94 7e 06 	call	0xcfc	; 0xcfc <sysclk_disable_module>
    320a:	10 c0       	rjmp	.+32     	; 0x322c <tc_disable+0xe2>
	} else if (module == &TCCR5A) {
    320c:	80 32       	cpi	r24, 0x20	; 32
    320e:	21 e0       	ldi	r18, 0x01	; 1
    3210:	92 07       	cpc	r25, r18
    3212:	29 f4       	brne	.+10     	; 0x321e <tc_disable+0xd4>
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    3214:	60 e2       	ldi	r22, 0x20	; 32
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	0e 94 7e 06 	call	0xcfc	; 0xcfc <sysclk_disable_module>
    321c:	07 c0       	rjmp	.+14     	; 0x322c <tc_disable+0xe2>
	} else if (module == &TRX_CTRL_0) {
    321e:	83 34       	cpi	r24, 0x43	; 67
    3220:	91 40       	sbci	r25, 0x01	; 1
    3222:	21 f4       	brne	.+8      	; 0x322c <tc_disable+0xe2>
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    3224:	60 e4       	ldi	r22, 0x40	; 64
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	0e 94 7e 06 	call	0xcfc	; 0xcfc <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    322c:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    322e:	0f 90       	pop	r0
    3230:	df 91       	pop	r29
    3232:	cf 91       	pop	r28
    3234:	1f 91       	pop	r17
    3236:	08 95       	ret

00003238 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    3238:	80 38       	cpi	r24, 0x80	; 128
    323a:	91 05       	cpc	r25, r1
    323c:	29 f4       	brne	.+10     	; 0x3248 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    323e:	70 93 94 04 	sts	0x0494, r23	; 0x800494 <tc_tccr1_ovf_callback+0x1>
    3242:	60 93 93 04 	sts	0x0493, r22	; 0x800493 <tc_tccr1_ovf_callback>
    3246:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    3248:	80 39       	cpi	r24, 0x90	; 144
    324a:	91 05       	cpc	r25, r1
    324c:	29 f4       	brne	.+10     	; 0x3258 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    324e:	70 93 8c 04 	sts	0x048C, r23	; 0x80048c <tc_tccr3_ovf_callback+0x1>
    3252:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <tc_tccr3_ovf_callback>
    3256:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    3258:	80 3a       	cpi	r24, 0xA0	; 160
    325a:	91 05       	cpc	r25, r1
    325c:	29 f4       	brne	.+10     	; 0x3268 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    325e:	70 93 84 04 	sts	0x0484, r23	; 0x800484 <tc_tccr4_ovf_callback+0x1>
    3262:	60 93 83 04 	sts	0x0483, r22	; 0x800483 <tc_tccr4_ovf_callback>
    3266:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    3268:	80 32       	cpi	r24, 0x20	; 32
    326a:	91 40       	sbci	r25, 0x01	; 1
    326c:	21 f4       	brne	.+8      	; 0x3276 <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    326e:	70 93 7c 04 	sts	0x047C, r23	; 0x80047c <tc_tccr5_ovf_callback+0x1>
    3272:	60 93 7b 04 	sts	0x047B, r22	; 0x80047b <tc_tccr5_ovf_callback>
    3276:	08 95       	ret

00003278 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    3278:	80 38       	cpi	r24, 0x80	; 128
    327a:	91 05       	cpc	r25, r1
    327c:	29 f4       	brne	.+10     	; 0x3288 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    327e:	70 93 92 04 	sts	0x0492, r23	; 0x800492 <tc_tccr1_compa_callback+0x1>
    3282:	60 93 91 04 	sts	0x0491, r22	; 0x800491 <tc_tccr1_compa_callback>
    3286:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    3288:	80 39       	cpi	r24, 0x90	; 144
    328a:	91 05       	cpc	r25, r1
    328c:	29 f4       	brne	.+10     	; 0x3298 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    328e:	70 93 8a 04 	sts	0x048A, r23	; 0x80048a <tc_tccr3_compa_callback+0x1>
    3292:	60 93 89 04 	sts	0x0489, r22	; 0x800489 <tc_tccr3_compa_callback>
    3296:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    3298:	80 3a       	cpi	r24, 0xA0	; 160
    329a:	91 05       	cpc	r25, r1
    329c:	29 f4       	brne	.+10     	; 0x32a8 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    329e:	70 93 82 04 	sts	0x0482, r23	; 0x800482 <tc_tccr4_compa_callback+0x1>
    32a2:	60 93 81 04 	sts	0x0481, r22	; 0x800481 <tc_tccr4_compa_callback>
    32a6:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    32a8:	80 32       	cpi	r24, 0x20	; 32
    32aa:	91 40       	sbci	r25, 0x01	; 1
    32ac:	21 f4       	brne	.+8      	; 0x32b6 <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    32ae:	70 93 7a 04 	sts	0x047A, r23	; 0x80047a <tc_tccr5_compa_callback+0x1>
    32b2:	60 93 79 04 	sts	0x0479, r22	; 0x800479 <tc_tccr5_compa_callback>
    32b6:	08 95       	ret

000032b8 <main>:
 * \brief Main function of the application
 */
int main(void)
{	
	/* Initialize the Wireless Module */
	wireless_init();    
    32b8:	0e 94 02 06 	call	0xc04	; 0xc04 <wireless_init>
	
	/*The Modules selected in the wizard are initialized here */
	modules_init();
    32bc:	0e 94 4a 06 	call	0xc94	; 0xc94 <modules_init>
 * \brief Tasks Handled By the Stack and application are Performed here,this function is handled in a loop to perform tasks continuously 
 */
void WirelessTask(void)
{
	/* These methods are called to perform the default tasks of the MAC Stack */
	pal_task();
    32c0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <pal_task>
	tal_task();
    32c4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <tal_task>
/**
 * \brief Application task
 */
 void app_task(void)
{
	usr_wireless_app_task();
    32c8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <usr_wireless_app_task>
    32cc:	f9 cf       	rjmp	.-14     	; 0x32c0 <main+0x8>

000032ce <tal_tx_frame_done_cb>:
 * \param frame pointer to the transmitted frame
 */
void tal_tx_frame_done_cb(retval_t status, frame_info_t *frame)
{
	/*Perform application tasks when a frame is transmitted here*/
	usr_frame_transmitted_cb(status, frame);
    32ce:	0c 94 13 03 	jmp	0x626	; 0x626 <usr_frame_transmitted_cb>
    32d2:	08 95       	ret

000032d4 <tal_rx_frame_cb>:
 * \brief This method (callback) is called when a frame is received by the transceiver
 * \param frame pointer to the received frame
 *
 */
void tal_rx_frame_cb(frame_info_t *frame)
{
    32d4:	cf 93       	push	r28
    32d6:	df 93       	push	r29
    32d8:	ec 01       	movw	r28, r24
	/*Perform application tasks when a frame is received here*/
	usr_frame_received_cb(frame);
    32da:	0e 94 39 02 	call	0x472	; 0x472 <usr_frame_received_cb>
	// Free-up the buffer which was used for reception once the frame is extracted.
	bmm_buffer_free(frame->buffer_header);
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	9a 81       	ldd	r25, Y+2	; 0x02
    32e2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <bmm_buffer_free>
}
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	08 95       	ret

000032ec <__subsf3>:
    32ec:	50 58       	subi	r21, 0x80	; 128

000032ee <__addsf3>:
    32ee:	bb 27       	eor	r27, r27
    32f0:	aa 27       	eor	r26, r26
    32f2:	0e d0       	rcall	.+28     	; 0x3310 <__addsf3x>
    32f4:	e5 c0       	rjmp	.+458    	; 0x34c0 <__fp_round>
    32f6:	d6 d0       	rcall	.+428    	; 0x34a4 <__fp_pscA>
    32f8:	30 f0       	brcs	.+12     	; 0x3306 <__addsf3+0x18>
    32fa:	db d0       	rcall	.+438    	; 0x34b2 <__fp_pscB>
    32fc:	20 f0       	brcs	.+8      	; 0x3306 <__addsf3+0x18>
    32fe:	31 f4       	brne	.+12     	; 0x330c <__addsf3+0x1e>
    3300:	9f 3f       	cpi	r25, 0xFF	; 255
    3302:	11 f4       	brne	.+4      	; 0x3308 <__addsf3+0x1a>
    3304:	1e f4       	brtc	.+6      	; 0x330c <__addsf3+0x1e>
    3306:	cb c0       	rjmp	.+406    	; 0x349e <__fp_nan>
    3308:	0e f4       	brtc	.+2      	; 0x330c <__addsf3+0x1e>
    330a:	e0 95       	com	r30
    330c:	e7 fb       	bst	r30, 7
    330e:	c1 c0       	rjmp	.+386    	; 0x3492 <__fp_inf>

00003310 <__addsf3x>:
    3310:	e9 2f       	mov	r30, r25
    3312:	e7 d0       	rcall	.+462    	; 0x34e2 <__fp_split3>
    3314:	80 f3       	brcs	.-32     	; 0x32f6 <__addsf3+0x8>
    3316:	ba 17       	cp	r27, r26
    3318:	62 07       	cpc	r22, r18
    331a:	73 07       	cpc	r23, r19
    331c:	84 07       	cpc	r24, r20
    331e:	95 07       	cpc	r25, r21
    3320:	18 f0       	brcs	.+6      	; 0x3328 <__addsf3x+0x18>
    3322:	71 f4       	brne	.+28     	; 0x3340 <__addsf3x+0x30>
    3324:	9e f5       	brtc	.+102    	; 0x338c <__addsf3x+0x7c>
    3326:	ff c0       	rjmp	.+510    	; 0x3526 <__fp_zero>
    3328:	0e f4       	brtc	.+2      	; 0x332c <__addsf3x+0x1c>
    332a:	e0 95       	com	r30
    332c:	0b 2e       	mov	r0, r27
    332e:	ba 2f       	mov	r27, r26
    3330:	a0 2d       	mov	r26, r0
    3332:	0b 01       	movw	r0, r22
    3334:	b9 01       	movw	r22, r18
    3336:	90 01       	movw	r18, r0
    3338:	0c 01       	movw	r0, r24
    333a:	ca 01       	movw	r24, r20
    333c:	a0 01       	movw	r20, r0
    333e:	11 24       	eor	r1, r1
    3340:	ff 27       	eor	r31, r31
    3342:	59 1b       	sub	r21, r25
    3344:	99 f0       	breq	.+38     	; 0x336c <__addsf3x+0x5c>
    3346:	59 3f       	cpi	r21, 0xF9	; 249
    3348:	50 f4       	brcc	.+20     	; 0x335e <__addsf3x+0x4e>
    334a:	50 3e       	cpi	r21, 0xE0	; 224
    334c:	68 f1       	brcs	.+90     	; 0x33a8 <__addsf3x+0x98>
    334e:	1a 16       	cp	r1, r26
    3350:	f0 40       	sbci	r31, 0x00	; 0
    3352:	a2 2f       	mov	r26, r18
    3354:	23 2f       	mov	r18, r19
    3356:	34 2f       	mov	r19, r20
    3358:	44 27       	eor	r20, r20
    335a:	58 5f       	subi	r21, 0xF8	; 248
    335c:	f3 cf       	rjmp	.-26     	; 0x3344 <__addsf3x+0x34>
    335e:	46 95       	lsr	r20
    3360:	37 95       	ror	r19
    3362:	27 95       	ror	r18
    3364:	a7 95       	ror	r26
    3366:	f0 40       	sbci	r31, 0x00	; 0
    3368:	53 95       	inc	r21
    336a:	c9 f7       	brne	.-14     	; 0x335e <__addsf3x+0x4e>
    336c:	7e f4       	brtc	.+30     	; 0x338c <__addsf3x+0x7c>
    336e:	1f 16       	cp	r1, r31
    3370:	ba 0b       	sbc	r27, r26
    3372:	62 0b       	sbc	r22, r18
    3374:	73 0b       	sbc	r23, r19
    3376:	84 0b       	sbc	r24, r20
    3378:	ba f0       	brmi	.+46     	; 0x33a8 <__addsf3x+0x98>
    337a:	91 50       	subi	r25, 0x01	; 1
    337c:	a1 f0       	breq	.+40     	; 0x33a6 <__addsf3x+0x96>
    337e:	ff 0f       	add	r31, r31
    3380:	bb 1f       	adc	r27, r27
    3382:	66 1f       	adc	r22, r22
    3384:	77 1f       	adc	r23, r23
    3386:	88 1f       	adc	r24, r24
    3388:	c2 f7       	brpl	.-16     	; 0x337a <__addsf3x+0x6a>
    338a:	0e c0       	rjmp	.+28     	; 0x33a8 <__addsf3x+0x98>
    338c:	ba 0f       	add	r27, r26
    338e:	62 1f       	adc	r22, r18
    3390:	73 1f       	adc	r23, r19
    3392:	84 1f       	adc	r24, r20
    3394:	48 f4       	brcc	.+18     	; 0x33a8 <__addsf3x+0x98>
    3396:	87 95       	ror	r24
    3398:	77 95       	ror	r23
    339a:	67 95       	ror	r22
    339c:	b7 95       	ror	r27
    339e:	f7 95       	ror	r31
    33a0:	9e 3f       	cpi	r25, 0xFE	; 254
    33a2:	08 f0       	brcs	.+2      	; 0x33a6 <__addsf3x+0x96>
    33a4:	b3 cf       	rjmp	.-154    	; 0x330c <__addsf3+0x1e>
    33a6:	93 95       	inc	r25
    33a8:	88 0f       	add	r24, r24
    33aa:	08 f0       	brcs	.+2      	; 0x33ae <__addsf3x+0x9e>
    33ac:	99 27       	eor	r25, r25
    33ae:	ee 0f       	add	r30, r30
    33b0:	97 95       	ror	r25
    33b2:	87 95       	ror	r24
    33b4:	08 95       	ret

000033b6 <__fixsfsi>:
    33b6:	04 d0       	rcall	.+8      	; 0x33c0 <__fixunssfsi>
    33b8:	68 94       	set
    33ba:	b1 11       	cpse	r27, r1
    33bc:	b5 c0       	rjmp	.+362    	; 0x3528 <__fp_szero>
    33be:	08 95       	ret

000033c0 <__fixunssfsi>:
    33c0:	98 d0       	rcall	.+304    	; 0x34f2 <__fp_splitA>
    33c2:	88 f0       	brcs	.+34     	; 0x33e6 <__fixunssfsi+0x26>
    33c4:	9f 57       	subi	r25, 0x7F	; 127
    33c6:	90 f0       	brcs	.+36     	; 0x33ec <__fixunssfsi+0x2c>
    33c8:	b9 2f       	mov	r27, r25
    33ca:	99 27       	eor	r25, r25
    33cc:	b7 51       	subi	r27, 0x17	; 23
    33ce:	a0 f0       	brcs	.+40     	; 0x33f8 <__fixunssfsi+0x38>
    33d0:	d1 f0       	breq	.+52     	; 0x3406 <__fixunssfsi+0x46>
    33d2:	66 0f       	add	r22, r22
    33d4:	77 1f       	adc	r23, r23
    33d6:	88 1f       	adc	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	1a f0       	brmi	.+6      	; 0x33e2 <__fixunssfsi+0x22>
    33dc:	ba 95       	dec	r27
    33de:	c9 f7       	brne	.-14     	; 0x33d2 <__fixunssfsi+0x12>
    33e0:	12 c0       	rjmp	.+36     	; 0x3406 <__fixunssfsi+0x46>
    33e2:	b1 30       	cpi	r27, 0x01	; 1
    33e4:	81 f0       	breq	.+32     	; 0x3406 <__fixunssfsi+0x46>
    33e6:	9f d0       	rcall	.+318    	; 0x3526 <__fp_zero>
    33e8:	b1 e0       	ldi	r27, 0x01	; 1
    33ea:	08 95       	ret
    33ec:	9c c0       	rjmp	.+312    	; 0x3526 <__fp_zero>
    33ee:	67 2f       	mov	r22, r23
    33f0:	78 2f       	mov	r23, r24
    33f2:	88 27       	eor	r24, r24
    33f4:	b8 5f       	subi	r27, 0xF8	; 248
    33f6:	39 f0       	breq	.+14     	; 0x3406 <__fixunssfsi+0x46>
    33f8:	b9 3f       	cpi	r27, 0xF9	; 249
    33fa:	cc f3       	brlt	.-14     	; 0x33ee <__fixunssfsi+0x2e>
    33fc:	86 95       	lsr	r24
    33fe:	77 95       	ror	r23
    3400:	67 95       	ror	r22
    3402:	b3 95       	inc	r27
    3404:	d9 f7       	brne	.-10     	; 0x33fc <__fixunssfsi+0x3c>
    3406:	3e f4       	brtc	.+14     	; 0x3416 <__fixunssfsi+0x56>
    3408:	90 95       	com	r25
    340a:	80 95       	com	r24
    340c:	70 95       	com	r23
    340e:	61 95       	neg	r22
    3410:	7f 4f       	sbci	r23, 0xFF	; 255
    3412:	8f 4f       	sbci	r24, 0xFF	; 255
    3414:	9f 4f       	sbci	r25, 0xFF	; 255
    3416:	08 95       	ret

00003418 <__floatunsisf>:
    3418:	e8 94       	clt
    341a:	09 c0       	rjmp	.+18     	; 0x342e <__floatsisf+0x12>

0000341c <__floatsisf>:
    341c:	97 fb       	bst	r25, 7
    341e:	3e f4       	brtc	.+14     	; 0x342e <__floatsisf+0x12>
    3420:	90 95       	com	r25
    3422:	80 95       	com	r24
    3424:	70 95       	com	r23
    3426:	61 95       	neg	r22
    3428:	7f 4f       	sbci	r23, 0xFF	; 255
    342a:	8f 4f       	sbci	r24, 0xFF	; 255
    342c:	9f 4f       	sbci	r25, 0xFF	; 255
    342e:	99 23       	and	r25, r25
    3430:	a9 f0       	breq	.+42     	; 0x345c <__floatsisf+0x40>
    3432:	f9 2f       	mov	r31, r25
    3434:	96 e9       	ldi	r25, 0x96	; 150
    3436:	bb 27       	eor	r27, r27
    3438:	93 95       	inc	r25
    343a:	f6 95       	lsr	r31
    343c:	87 95       	ror	r24
    343e:	77 95       	ror	r23
    3440:	67 95       	ror	r22
    3442:	b7 95       	ror	r27
    3444:	f1 11       	cpse	r31, r1
    3446:	f8 cf       	rjmp	.-16     	; 0x3438 <__floatsisf+0x1c>
    3448:	fa f4       	brpl	.+62     	; 0x3488 <__floatsisf+0x6c>
    344a:	bb 0f       	add	r27, r27
    344c:	11 f4       	brne	.+4      	; 0x3452 <__floatsisf+0x36>
    344e:	60 ff       	sbrs	r22, 0
    3450:	1b c0       	rjmp	.+54     	; 0x3488 <__floatsisf+0x6c>
    3452:	6f 5f       	subi	r22, 0xFF	; 255
    3454:	7f 4f       	sbci	r23, 0xFF	; 255
    3456:	8f 4f       	sbci	r24, 0xFF	; 255
    3458:	9f 4f       	sbci	r25, 0xFF	; 255
    345a:	16 c0       	rjmp	.+44     	; 0x3488 <__floatsisf+0x6c>
    345c:	88 23       	and	r24, r24
    345e:	11 f0       	breq	.+4      	; 0x3464 <__floatsisf+0x48>
    3460:	96 e9       	ldi	r25, 0x96	; 150
    3462:	11 c0       	rjmp	.+34     	; 0x3486 <__floatsisf+0x6a>
    3464:	77 23       	and	r23, r23
    3466:	21 f0       	breq	.+8      	; 0x3470 <__floatsisf+0x54>
    3468:	9e e8       	ldi	r25, 0x8E	; 142
    346a:	87 2f       	mov	r24, r23
    346c:	76 2f       	mov	r23, r22
    346e:	05 c0       	rjmp	.+10     	; 0x347a <__floatsisf+0x5e>
    3470:	66 23       	and	r22, r22
    3472:	71 f0       	breq	.+28     	; 0x3490 <__floatsisf+0x74>
    3474:	96 e8       	ldi	r25, 0x86	; 134
    3476:	86 2f       	mov	r24, r22
    3478:	70 e0       	ldi	r23, 0x00	; 0
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	2a f0       	brmi	.+10     	; 0x3488 <__floatsisf+0x6c>
    347e:	9a 95       	dec	r25
    3480:	66 0f       	add	r22, r22
    3482:	77 1f       	adc	r23, r23
    3484:	88 1f       	adc	r24, r24
    3486:	da f7       	brpl	.-10     	; 0x347e <__floatsisf+0x62>
    3488:	88 0f       	add	r24, r24
    348a:	96 95       	lsr	r25
    348c:	87 95       	ror	r24
    348e:	97 f9       	bld	r25, 7
    3490:	08 95       	ret

00003492 <__fp_inf>:
    3492:	97 f9       	bld	r25, 7
    3494:	9f 67       	ori	r25, 0x7F	; 127
    3496:	80 e8       	ldi	r24, 0x80	; 128
    3498:	70 e0       	ldi	r23, 0x00	; 0
    349a:	60 e0       	ldi	r22, 0x00	; 0
    349c:	08 95       	ret

0000349e <__fp_nan>:
    349e:	9f ef       	ldi	r25, 0xFF	; 255
    34a0:	80 ec       	ldi	r24, 0xC0	; 192
    34a2:	08 95       	ret

000034a4 <__fp_pscA>:
    34a4:	00 24       	eor	r0, r0
    34a6:	0a 94       	dec	r0
    34a8:	16 16       	cp	r1, r22
    34aa:	17 06       	cpc	r1, r23
    34ac:	18 06       	cpc	r1, r24
    34ae:	09 06       	cpc	r0, r25
    34b0:	08 95       	ret

000034b2 <__fp_pscB>:
    34b2:	00 24       	eor	r0, r0
    34b4:	0a 94       	dec	r0
    34b6:	12 16       	cp	r1, r18
    34b8:	13 06       	cpc	r1, r19
    34ba:	14 06       	cpc	r1, r20
    34bc:	05 06       	cpc	r0, r21
    34be:	08 95       	ret

000034c0 <__fp_round>:
    34c0:	09 2e       	mov	r0, r25
    34c2:	03 94       	inc	r0
    34c4:	00 0c       	add	r0, r0
    34c6:	11 f4       	brne	.+4      	; 0x34cc <__fp_round+0xc>
    34c8:	88 23       	and	r24, r24
    34ca:	52 f0       	brmi	.+20     	; 0x34e0 <__fp_round+0x20>
    34cc:	bb 0f       	add	r27, r27
    34ce:	40 f4       	brcc	.+16     	; 0x34e0 <__fp_round+0x20>
    34d0:	bf 2b       	or	r27, r31
    34d2:	11 f4       	brne	.+4      	; 0x34d8 <__fp_round+0x18>
    34d4:	60 ff       	sbrs	r22, 0
    34d6:	04 c0       	rjmp	.+8      	; 0x34e0 <__fp_round+0x20>
    34d8:	6f 5f       	subi	r22, 0xFF	; 255
    34da:	7f 4f       	sbci	r23, 0xFF	; 255
    34dc:	8f 4f       	sbci	r24, 0xFF	; 255
    34de:	9f 4f       	sbci	r25, 0xFF	; 255
    34e0:	08 95       	ret

000034e2 <__fp_split3>:
    34e2:	57 fd       	sbrc	r21, 7
    34e4:	90 58       	subi	r25, 0x80	; 128
    34e6:	44 0f       	add	r20, r20
    34e8:	55 1f       	adc	r21, r21
    34ea:	59 f0       	breq	.+22     	; 0x3502 <__fp_splitA+0x10>
    34ec:	5f 3f       	cpi	r21, 0xFF	; 255
    34ee:	71 f0       	breq	.+28     	; 0x350c <__fp_splitA+0x1a>
    34f0:	47 95       	ror	r20

000034f2 <__fp_splitA>:
    34f2:	88 0f       	add	r24, r24
    34f4:	97 fb       	bst	r25, 7
    34f6:	99 1f       	adc	r25, r25
    34f8:	61 f0       	breq	.+24     	; 0x3512 <__fp_splitA+0x20>
    34fa:	9f 3f       	cpi	r25, 0xFF	; 255
    34fc:	79 f0       	breq	.+30     	; 0x351c <__fp_splitA+0x2a>
    34fe:	87 95       	ror	r24
    3500:	08 95       	ret
    3502:	12 16       	cp	r1, r18
    3504:	13 06       	cpc	r1, r19
    3506:	14 06       	cpc	r1, r20
    3508:	55 1f       	adc	r21, r21
    350a:	f2 cf       	rjmp	.-28     	; 0x34f0 <__fp_split3+0xe>
    350c:	46 95       	lsr	r20
    350e:	f1 df       	rcall	.-30     	; 0x34f2 <__fp_splitA>
    3510:	08 c0       	rjmp	.+16     	; 0x3522 <__fp_splitA+0x30>
    3512:	16 16       	cp	r1, r22
    3514:	17 06       	cpc	r1, r23
    3516:	18 06       	cpc	r1, r24
    3518:	99 1f       	adc	r25, r25
    351a:	f1 cf       	rjmp	.-30     	; 0x34fe <__fp_splitA+0xc>
    351c:	86 95       	lsr	r24
    351e:	71 05       	cpc	r23, r1
    3520:	61 05       	cpc	r22, r1
    3522:	08 94       	sec
    3524:	08 95       	ret

00003526 <__fp_zero>:
    3526:	e8 94       	clt

00003528 <__fp_szero>:
    3528:	bb 27       	eor	r27, r27
    352a:	66 27       	eor	r22, r22
    352c:	77 27       	eor	r23, r23
    352e:	cb 01       	movw	r24, r22
    3530:	97 f9       	bld	r25, 7
    3532:	08 95       	ret

00003534 <__mulsf3>:
    3534:	0b d0       	rcall	.+22     	; 0x354c <__mulsf3x>
    3536:	c4 cf       	rjmp	.-120    	; 0x34c0 <__fp_round>
    3538:	b5 df       	rcall	.-150    	; 0x34a4 <__fp_pscA>
    353a:	28 f0       	brcs	.+10     	; 0x3546 <__mulsf3+0x12>
    353c:	ba df       	rcall	.-140    	; 0x34b2 <__fp_pscB>
    353e:	18 f0       	brcs	.+6      	; 0x3546 <__mulsf3+0x12>
    3540:	95 23       	and	r25, r21
    3542:	09 f0       	breq	.+2      	; 0x3546 <__mulsf3+0x12>
    3544:	a6 cf       	rjmp	.-180    	; 0x3492 <__fp_inf>
    3546:	ab cf       	rjmp	.-170    	; 0x349e <__fp_nan>
    3548:	11 24       	eor	r1, r1
    354a:	ee cf       	rjmp	.-36     	; 0x3528 <__fp_szero>

0000354c <__mulsf3x>:
    354c:	ca df       	rcall	.-108    	; 0x34e2 <__fp_split3>
    354e:	a0 f3       	brcs	.-24     	; 0x3538 <__mulsf3+0x4>

00003550 <__mulsf3_pse>:
    3550:	95 9f       	mul	r25, r21
    3552:	d1 f3       	breq	.-12     	; 0x3548 <__mulsf3+0x14>
    3554:	95 0f       	add	r25, r21
    3556:	50 e0       	ldi	r21, 0x00	; 0
    3558:	55 1f       	adc	r21, r21
    355a:	62 9f       	mul	r22, r18
    355c:	f0 01       	movw	r30, r0
    355e:	72 9f       	mul	r23, r18
    3560:	bb 27       	eor	r27, r27
    3562:	f0 0d       	add	r31, r0
    3564:	b1 1d       	adc	r27, r1
    3566:	63 9f       	mul	r22, r19
    3568:	aa 27       	eor	r26, r26
    356a:	f0 0d       	add	r31, r0
    356c:	b1 1d       	adc	r27, r1
    356e:	aa 1f       	adc	r26, r26
    3570:	64 9f       	mul	r22, r20
    3572:	66 27       	eor	r22, r22
    3574:	b0 0d       	add	r27, r0
    3576:	a1 1d       	adc	r26, r1
    3578:	66 1f       	adc	r22, r22
    357a:	82 9f       	mul	r24, r18
    357c:	22 27       	eor	r18, r18
    357e:	b0 0d       	add	r27, r0
    3580:	a1 1d       	adc	r26, r1
    3582:	62 1f       	adc	r22, r18
    3584:	73 9f       	mul	r23, r19
    3586:	b0 0d       	add	r27, r0
    3588:	a1 1d       	adc	r26, r1
    358a:	62 1f       	adc	r22, r18
    358c:	83 9f       	mul	r24, r19
    358e:	a0 0d       	add	r26, r0
    3590:	61 1d       	adc	r22, r1
    3592:	22 1f       	adc	r18, r18
    3594:	74 9f       	mul	r23, r20
    3596:	33 27       	eor	r19, r19
    3598:	a0 0d       	add	r26, r0
    359a:	61 1d       	adc	r22, r1
    359c:	23 1f       	adc	r18, r19
    359e:	84 9f       	mul	r24, r20
    35a0:	60 0d       	add	r22, r0
    35a2:	21 1d       	adc	r18, r1
    35a4:	82 2f       	mov	r24, r18
    35a6:	76 2f       	mov	r23, r22
    35a8:	6a 2f       	mov	r22, r26
    35aa:	11 24       	eor	r1, r1
    35ac:	9f 57       	subi	r25, 0x7F	; 127
    35ae:	50 40       	sbci	r21, 0x00	; 0
    35b0:	8a f0       	brmi	.+34     	; 0x35d4 <__mulsf3_pse+0x84>
    35b2:	e1 f0       	breq	.+56     	; 0x35ec <__mulsf3_pse+0x9c>
    35b4:	88 23       	and	r24, r24
    35b6:	4a f0       	brmi	.+18     	; 0x35ca <__mulsf3_pse+0x7a>
    35b8:	ee 0f       	add	r30, r30
    35ba:	ff 1f       	adc	r31, r31
    35bc:	bb 1f       	adc	r27, r27
    35be:	66 1f       	adc	r22, r22
    35c0:	77 1f       	adc	r23, r23
    35c2:	88 1f       	adc	r24, r24
    35c4:	91 50       	subi	r25, 0x01	; 1
    35c6:	50 40       	sbci	r21, 0x00	; 0
    35c8:	a9 f7       	brne	.-22     	; 0x35b4 <__mulsf3_pse+0x64>
    35ca:	9e 3f       	cpi	r25, 0xFE	; 254
    35cc:	51 05       	cpc	r21, r1
    35ce:	70 f0       	brcs	.+28     	; 0x35ec <__mulsf3_pse+0x9c>
    35d0:	60 cf       	rjmp	.-320    	; 0x3492 <__fp_inf>
    35d2:	aa cf       	rjmp	.-172    	; 0x3528 <__fp_szero>
    35d4:	5f 3f       	cpi	r21, 0xFF	; 255
    35d6:	ec f3       	brlt	.-6      	; 0x35d2 <__mulsf3_pse+0x82>
    35d8:	98 3e       	cpi	r25, 0xE8	; 232
    35da:	dc f3       	brlt	.-10     	; 0x35d2 <__mulsf3_pse+0x82>
    35dc:	86 95       	lsr	r24
    35de:	77 95       	ror	r23
    35e0:	67 95       	ror	r22
    35e2:	b7 95       	ror	r27
    35e4:	f7 95       	ror	r31
    35e6:	e7 95       	ror	r30
    35e8:	9f 5f       	subi	r25, 0xFF	; 255
    35ea:	c1 f7       	brne	.-16     	; 0x35dc <__mulsf3_pse+0x8c>
    35ec:	fe 2b       	or	r31, r30
    35ee:	88 0f       	add	r24, r24
    35f0:	91 1d       	adc	r25, r1
    35f2:	96 95       	lsr	r25
    35f4:	87 95       	ror	r24
    35f6:	97 f9       	bld	r25, 7
    35f8:	08 95       	ret

000035fa <pow>:
    35fa:	fa 01       	movw	r30, r20
    35fc:	ee 0f       	add	r30, r30
    35fe:	ff 1f       	adc	r31, r31
    3600:	30 96       	adiw	r30, 0x00	; 0
    3602:	21 05       	cpc	r18, r1
    3604:	31 05       	cpc	r19, r1
    3606:	99 f1       	breq	.+102    	; 0x366e <pow+0x74>
    3608:	61 15       	cp	r22, r1
    360a:	71 05       	cpc	r23, r1
    360c:	61 f4       	brne	.+24     	; 0x3626 <pow+0x2c>
    360e:	80 38       	cpi	r24, 0x80	; 128
    3610:	bf e3       	ldi	r27, 0x3F	; 63
    3612:	9b 07       	cpc	r25, r27
    3614:	49 f1       	breq	.+82     	; 0x3668 <pow+0x6e>
    3616:	68 94       	set
    3618:	90 38       	cpi	r25, 0x80	; 128
    361a:	81 05       	cpc	r24, r1
    361c:	61 f0       	breq	.+24     	; 0x3636 <pow+0x3c>
    361e:	80 38       	cpi	r24, 0x80	; 128
    3620:	bf ef       	ldi	r27, 0xFF	; 255
    3622:	9b 07       	cpc	r25, r27
    3624:	41 f0       	breq	.+16     	; 0x3636 <pow+0x3c>
    3626:	99 23       	and	r25, r25
    3628:	42 f5       	brpl	.+80     	; 0x367a <pow+0x80>
    362a:	ff 3f       	cpi	r31, 0xFF	; 255
    362c:	e1 05       	cpc	r30, r1
    362e:	31 05       	cpc	r19, r1
    3630:	21 05       	cpc	r18, r1
    3632:	11 f1       	breq	.+68     	; 0x3678 <pow+0x7e>
    3634:	e8 94       	clt
    3636:	08 94       	sec
    3638:	e7 95       	ror	r30
    363a:	d9 01       	movw	r26, r18
    363c:	aa 23       	and	r26, r26
    363e:	29 f4       	brne	.+10     	; 0x364a <pow+0x50>
    3640:	ab 2f       	mov	r26, r27
    3642:	be 2f       	mov	r27, r30
    3644:	f8 5f       	subi	r31, 0xF8	; 248
    3646:	d0 f3       	brcs	.-12     	; 0x363c <pow+0x42>
    3648:	10 c0       	rjmp	.+32     	; 0x366a <pow+0x70>
    364a:	ff 5f       	subi	r31, 0xFF	; 255
    364c:	70 f4       	brcc	.+28     	; 0x366a <pow+0x70>
    364e:	a6 95       	lsr	r26
    3650:	e0 f7       	brcc	.-8      	; 0x364a <pow+0x50>
    3652:	f7 39       	cpi	r31, 0x97	; 151
    3654:	50 f0       	brcs	.+20     	; 0x366a <pow+0x70>
    3656:	19 f0       	breq	.+6      	; 0x365e <pow+0x64>
    3658:	ff 3a       	cpi	r31, 0xAF	; 175
    365a:	38 f4       	brcc	.+14     	; 0x366a <pow+0x70>
    365c:	9f 77       	andi	r25, 0x7F	; 127
    365e:	9f 93       	push	r25
    3660:	0c d0       	rcall	.+24     	; 0x367a <pow+0x80>
    3662:	0f 90       	pop	r0
    3664:	07 fc       	sbrc	r0, 7
    3666:	90 58       	subi	r25, 0x80	; 128
    3668:	08 95       	ret
    366a:	3e f0       	brts	.+14     	; 0x367a <pow+0x80>
    366c:	18 cf       	rjmp	.-464    	; 0x349e <__fp_nan>
    366e:	60 e0       	ldi	r22, 0x00	; 0
    3670:	70 e0       	ldi	r23, 0x00	; 0
    3672:	80 e8       	ldi	r24, 0x80	; 128
    3674:	9f e3       	ldi	r25, 0x3F	; 63
    3676:	08 95       	ret
    3678:	4f e7       	ldi	r20, 0x7F	; 127
    367a:	9f 77       	andi	r25, 0x7F	; 127
    367c:	5f 93       	push	r21
    367e:	4f 93       	push	r20
    3680:	3f 93       	push	r19
    3682:	2f 93       	push	r18
    3684:	9e d0       	rcall	.+316    	; 0x37c2 <log>
    3686:	2f 91       	pop	r18
    3688:	3f 91       	pop	r19
    368a:	4f 91       	pop	r20
    368c:	5f 91       	pop	r21
    368e:	52 df       	rcall	.-348    	; 0x3534 <__mulsf3>
    3690:	05 c0       	rjmp	.+10     	; 0x369c <exp>
    3692:	19 f4       	brne	.+6      	; 0x369a <pow+0xa0>
    3694:	0e f0       	brts	.+2      	; 0x3698 <pow+0x9e>
    3696:	fd ce       	rjmp	.-518    	; 0x3492 <__fp_inf>
    3698:	46 cf       	rjmp	.-372    	; 0x3526 <__fp_zero>
    369a:	01 cf       	rjmp	.-510    	; 0x349e <__fp_nan>

0000369c <exp>:
    369c:	2a df       	rcall	.-428    	; 0x34f2 <__fp_splitA>
    369e:	c8 f3       	brcs	.-14     	; 0x3692 <pow+0x98>
    36a0:	96 38       	cpi	r25, 0x86	; 134
    36a2:	c0 f7       	brcc	.-16     	; 0x3694 <pow+0x9a>
    36a4:	07 f8       	bld	r0, 7
    36a6:	0f 92       	push	r0
    36a8:	e8 94       	clt
    36aa:	2b e3       	ldi	r18, 0x3B	; 59
    36ac:	3a ea       	ldi	r19, 0xAA	; 170
    36ae:	48 eb       	ldi	r20, 0xB8	; 184
    36b0:	5f e7       	ldi	r21, 0x7F	; 127
    36b2:	4e df       	rcall	.-356    	; 0x3550 <__mulsf3_pse>
    36b4:	0f 92       	push	r0
    36b6:	0f 92       	push	r0
    36b8:	0f 92       	push	r0
    36ba:	4d b7       	in	r20, 0x3d	; 61
    36bc:	5e b7       	in	r21, 0x3e	; 62
    36be:	0f 92       	push	r0
    36c0:	c0 d0       	rcall	.+384    	; 0x3842 <modf>
    36c2:	e2 e6       	ldi	r30, 0x62	; 98
    36c4:	f1 e0       	ldi	r31, 0x01	; 1
    36c6:	16 d0       	rcall	.+44     	; 0x36f4 <__fp_powser>
    36c8:	4f 91       	pop	r20
    36ca:	5f 91       	pop	r21
    36cc:	ef 91       	pop	r30
    36ce:	ff 91       	pop	r31
    36d0:	e5 95       	asr	r30
    36d2:	ee 1f       	adc	r30, r30
    36d4:	ff 1f       	adc	r31, r31
    36d6:	49 f0       	breq	.+18     	; 0x36ea <exp+0x4e>
    36d8:	fe 57       	subi	r31, 0x7E	; 126
    36da:	e0 68       	ori	r30, 0x80	; 128
    36dc:	44 27       	eor	r20, r20
    36de:	ee 0f       	add	r30, r30
    36e0:	44 1f       	adc	r20, r20
    36e2:	fa 95       	dec	r31
    36e4:	e1 f7       	brne	.-8      	; 0x36de <exp+0x42>
    36e6:	41 95       	neg	r20
    36e8:	55 0b       	sbc	r21, r21
    36ea:	32 d0       	rcall	.+100    	; 0x3750 <ldexp>
    36ec:	0f 90       	pop	r0
    36ee:	07 fe       	sbrs	r0, 7
    36f0:	26 c0       	rjmp	.+76     	; 0x373e <inverse>
    36f2:	08 95       	ret

000036f4 <__fp_powser>:
    36f4:	df 93       	push	r29
    36f6:	cf 93       	push	r28
    36f8:	1f 93       	push	r17
    36fa:	0f 93       	push	r16
    36fc:	ff 92       	push	r15
    36fe:	ef 92       	push	r14
    3700:	df 92       	push	r13
    3702:	7b 01       	movw	r14, r22
    3704:	8c 01       	movw	r16, r24
    3706:	68 94       	set
    3708:	05 c0       	rjmp	.+10     	; 0x3714 <__fp_powser+0x20>
    370a:	da 2e       	mov	r13, r26
    370c:	ef 01       	movw	r28, r30
    370e:	1e df       	rcall	.-452    	; 0x354c <__mulsf3x>
    3710:	fe 01       	movw	r30, r28
    3712:	e8 94       	clt
    3714:	a5 91       	lpm	r26, Z+
    3716:	25 91       	lpm	r18, Z+
    3718:	35 91       	lpm	r19, Z+
    371a:	45 91       	lpm	r20, Z+
    371c:	55 91       	lpm	r21, Z+
    371e:	ae f3       	brts	.-22     	; 0x370a <__fp_powser+0x16>
    3720:	ef 01       	movw	r28, r30
    3722:	f6 dd       	rcall	.-1044   	; 0x3310 <__addsf3x>
    3724:	fe 01       	movw	r30, r28
    3726:	97 01       	movw	r18, r14
    3728:	a8 01       	movw	r20, r16
    372a:	da 94       	dec	r13
    372c:	79 f7       	brne	.-34     	; 0x370c <__fp_powser+0x18>
    372e:	df 90       	pop	r13
    3730:	ef 90       	pop	r14
    3732:	ff 90       	pop	r15
    3734:	0f 91       	pop	r16
    3736:	1f 91       	pop	r17
    3738:	cf 91       	pop	r28
    373a:	df 91       	pop	r29
    373c:	08 95       	ret

0000373e <inverse>:
    373e:	9b 01       	movw	r18, r22
    3740:	ac 01       	movw	r20, r24
    3742:	60 e0       	ldi	r22, 0x00	; 0
    3744:	70 e0       	ldi	r23, 0x00	; 0
    3746:	80 e8       	ldi	r24, 0x80	; 128
    3748:	9f e3       	ldi	r25, 0x3F	; 63
    374a:	ae c0       	rjmp	.+348    	; 0x38a8 <__divsf3>
    374c:	a2 ce       	rjmp	.-700    	; 0x3492 <__fp_inf>
    374e:	14 c1       	rjmp	.+552    	; 0x3978 <__fp_mpack>

00003750 <ldexp>:
    3750:	d0 de       	rcall	.-608    	; 0x34f2 <__fp_splitA>
    3752:	e8 f3       	brcs	.-6      	; 0x374e <inverse+0x10>
    3754:	99 23       	and	r25, r25
    3756:	d9 f3       	breq	.-10     	; 0x374e <inverse+0x10>
    3758:	94 0f       	add	r25, r20
    375a:	51 1d       	adc	r21, r1
    375c:	bb f3       	brvs	.-18     	; 0x374c <inverse+0xe>
    375e:	91 50       	subi	r25, 0x01	; 1
    3760:	50 40       	sbci	r21, 0x00	; 0
    3762:	94 f0       	brlt	.+36     	; 0x3788 <ldexp+0x38>
    3764:	59 f0       	breq	.+22     	; 0x377c <ldexp+0x2c>
    3766:	88 23       	and	r24, r24
    3768:	32 f0       	brmi	.+12     	; 0x3776 <ldexp+0x26>
    376a:	66 0f       	add	r22, r22
    376c:	77 1f       	adc	r23, r23
    376e:	88 1f       	adc	r24, r24
    3770:	91 50       	subi	r25, 0x01	; 1
    3772:	50 40       	sbci	r21, 0x00	; 0
    3774:	c1 f7       	brne	.-16     	; 0x3766 <ldexp+0x16>
    3776:	9e 3f       	cpi	r25, 0xFE	; 254
    3778:	51 05       	cpc	r21, r1
    377a:	44 f7       	brge	.-48     	; 0x374c <inverse+0xe>
    377c:	88 0f       	add	r24, r24
    377e:	91 1d       	adc	r25, r1
    3780:	96 95       	lsr	r25
    3782:	87 95       	ror	r24
    3784:	97 f9       	bld	r25, 7
    3786:	08 95       	ret
    3788:	5f 3f       	cpi	r21, 0xFF	; 255
    378a:	ac f0       	brlt	.+42     	; 0x37b6 <ldexp+0x66>
    378c:	98 3e       	cpi	r25, 0xE8	; 232
    378e:	9c f0       	brlt	.+38     	; 0x37b6 <ldexp+0x66>
    3790:	bb 27       	eor	r27, r27
    3792:	86 95       	lsr	r24
    3794:	77 95       	ror	r23
    3796:	67 95       	ror	r22
    3798:	b7 95       	ror	r27
    379a:	08 f4       	brcc	.+2      	; 0x379e <ldexp+0x4e>
    379c:	b1 60       	ori	r27, 0x01	; 1
    379e:	93 95       	inc	r25
    37a0:	c1 f7       	brne	.-16     	; 0x3792 <ldexp+0x42>
    37a2:	bb 0f       	add	r27, r27
    37a4:	58 f7       	brcc	.-42     	; 0x377c <ldexp+0x2c>
    37a6:	11 f4       	brne	.+4      	; 0x37ac <ldexp+0x5c>
    37a8:	60 ff       	sbrs	r22, 0
    37aa:	e8 cf       	rjmp	.-48     	; 0x377c <ldexp+0x2c>
    37ac:	6f 5f       	subi	r22, 0xFF	; 255
    37ae:	7f 4f       	sbci	r23, 0xFF	; 255
    37b0:	8f 4f       	sbci	r24, 0xFF	; 255
    37b2:	9f 4f       	sbci	r25, 0xFF	; 255
    37b4:	e3 cf       	rjmp	.-58     	; 0x377c <ldexp+0x2c>
    37b6:	b8 ce       	rjmp	.-656    	; 0x3528 <__fp_szero>
    37b8:	0e f0       	brts	.+2      	; 0x37bc <ldexp+0x6c>
    37ba:	de c0       	rjmp	.+444    	; 0x3978 <__fp_mpack>
    37bc:	70 ce       	rjmp	.-800    	; 0x349e <__fp_nan>
    37be:	68 94       	set
    37c0:	68 ce       	rjmp	.-816    	; 0x3492 <__fp_inf>

000037c2 <log>:
    37c2:	97 de       	rcall	.-722    	; 0x34f2 <__fp_splitA>
    37c4:	c8 f3       	brcs	.-14     	; 0x37b8 <ldexp+0x68>
    37c6:	99 23       	and	r25, r25
    37c8:	d1 f3       	breq	.-12     	; 0x37be <ldexp+0x6e>
    37ca:	c6 f3       	brts	.-16     	; 0x37bc <ldexp+0x6c>
    37cc:	df 93       	push	r29
    37ce:	cf 93       	push	r28
    37d0:	1f 93       	push	r17
    37d2:	0f 93       	push	r16
    37d4:	ff 92       	push	r15
    37d6:	c9 2f       	mov	r28, r25
    37d8:	dd 27       	eor	r29, r29
    37da:	88 23       	and	r24, r24
    37dc:	2a f0       	brmi	.+10     	; 0x37e8 <log+0x26>
    37de:	21 97       	sbiw	r28, 0x01	; 1
    37e0:	66 0f       	add	r22, r22
    37e2:	77 1f       	adc	r23, r23
    37e4:	88 1f       	adc	r24, r24
    37e6:	da f7       	brpl	.-10     	; 0x37de <log+0x1c>
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	40 e8       	ldi	r20, 0x80	; 128
    37ee:	5f eb       	ldi	r21, 0xBF	; 191
    37f0:	9f e3       	ldi	r25, 0x3F	; 63
    37f2:	88 39       	cpi	r24, 0x98	; 152
    37f4:	20 f0       	brcs	.+8      	; 0x37fe <log+0x3c>
    37f6:	80 3e       	cpi	r24, 0xE0	; 224
    37f8:	30 f0       	brcs	.+12     	; 0x3806 <log+0x44>
    37fa:	21 96       	adiw	r28, 0x01	; 1
    37fc:	8f 77       	andi	r24, 0x7F	; 127
    37fe:	77 dd       	rcall	.-1298   	; 0x32ee <__addsf3>
    3800:	ea e8       	ldi	r30, 0x8A	; 138
    3802:	f1 e0       	ldi	r31, 0x01	; 1
    3804:	03 c0       	rjmp	.+6      	; 0x380c <log+0x4a>
    3806:	73 dd       	rcall	.-1306   	; 0x32ee <__addsf3>
    3808:	e7 eb       	ldi	r30, 0xB7	; 183
    380a:	f1 e0       	ldi	r31, 0x01	; 1
    380c:	73 df       	rcall	.-282    	; 0x36f4 <__fp_powser>
    380e:	8b 01       	movw	r16, r22
    3810:	be 01       	movw	r22, r28
    3812:	ec 01       	movw	r28, r24
    3814:	fb 2e       	mov	r15, r27
    3816:	6f 57       	subi	r22, 0x7F	; 127
    3818:	71 09       	sbc	r23, r1
    381a:	75 95       	asr	r23
    381c:	77 1f       	adc	r23, r23
    381e:	88 0b       	sbc	r24, r24
    3820:	99 0b       	sbc	r25, r25
    3822:	fc dd       	rcall	.-1032   	; 0x341c <__floatsisf>
    3824:	28 e1       	ldi	r18, 0x18	; 24
    3826:	32 e7       	ldi	r19, 0x72	; 114
    3828:	41 e3       	ldi	r20, 0x31	; 49
    382a:	5f e3       	ldi	r21, 0x3F	; 63
    382c:	8f de       	rcall	.-738    	; 0x354c <__mulsf3x>
    382e:	af 2d       	mov	r26, r15
    3830:	98 01       	movw	r18, r16
    3832:	ae 01       	movw	r20, r28
    3834:	ff 90       	pop	r15
    3836:	0f 91       	pop	r16
    3838:	1f 91       	pop	r17
    383a:	cf 91       	pop	r28
    383c:	df 91       	pop	r29
    383e:	68 dd       	rcall	.-1328   	; 0x3310 <__addsf3x>
    3840:	3f ce       	rjmp	.-898    	; 0x34c0 <__fp_round>

00003842 <modf>:
    3842:	fa 01       	movw	r30, r20
    3844:	dc 01       	movw	r26, r24
    3846:	aa 0f       	add	r26, r26
    3848:	bb 1f       	adc	r27, r27
    384a:	9b 01       	movw	r18, r22
    384c:	ac 01       	movw	r20, r24
    384e:	bf 57       	subi	r27, 0x7F	; 127
    3850:	28 f4       	brcc	.+10     	; 0x385c <modf+0x1a>
    3852:	22 27       	eor	r18, r18
    3854:	33 27       	eor	r19, r19
    3856:	44 27       	eor	r20, r20
    3858:	50 78       	andi	r21, 0x80	; 128
    385a:	1f c0       	rjmp	.+62     	; 0x389a <modf+0x58>
    385c:	b7 51       	subi	r27, 0x17	; 23
    385e:	88 f4       	brcc	.+34     	; 0x3882 <modf+0x40>
    3860:	ab 2f       	mov	r26, r27
    3862:	00 24       	eor	r0, r0
    3864:	46 95       	lsr	r20
    3866:	37 95       	ror	r19
    3868:	27 95       	ror	r18
    386a:	01 1c       	adc	r0, r1
    386c:	a3 95       	inc	r26
    386e:	d2 f3       	brmi	.-12     	; 0x3864 <modf+0x22>
    3870:	00 20       	and	r0, r0
    3872:	69 f0       	breq	.+26     	; 0x388e <modf+0x4c>
    3874:	22 0f       	add	r18, r18
    3876:	33 1f       	adc	r19, r19
    3878:	44 1f       	adc	r20, r20
    387a:	b3 95       	inc	r27
    387c:	da f3       	brmi	.-10     	; 0x3874 <modf+0x32>
    387e:	0d d0       	rcall	.+26     	; 0x389a <modf+0x58>
    3880:	35 cd       	rjmp	.-1430   	; 0x32ec <__subsf3>
    3882:	61 30       	cpi	r22, 0x01	; 1
    3884:	71 05       	cpc	r23, r1
    3886:	a0 e8       	ldi	r26, 0x80	; 128
    3888:	8a 07       	cpc	r24, r26
    388a:	b9 46       	sbci	r27, 0x69	; 105
    388c:	30 f4       	brcc	.+12     	; 0x389a <modf+0x58>
    388e:	9b 01       	movw	r18, r22
    3890:	ac 01       	movw	r20, r24
    3892:	66 27       	eor	r22, r22
    3894:	77 27       	eor	r23, r23
    3896:	88 27       	eor	r24, r24
    3898:	90 78       	andi	r25, 0x80	; 128
    389a:	30 96       	adiw	r30, 0x00	; 0
    389c:	21 f0       	breq	.+8      	; 0x38a6 <modf+0x64>
    389e:	20 83       	st	Z, r18
    38a0:	31 83       	std	Z+1, r19	; 0x01
    38a2:	42 83       	std	Z+2, r20	; 0x02
    38a4:	53 83       	std	Z+3, r21	; 0x03
    38a6:	08 95       	ret

000038a8 <__divsf3>:
    38a8:	0c d0       	rcall	.+24     	; 0x38c2 <__divsf3x>
    38aa:	0a ce       	rjmp	.-1004   	; 0x34c0 <__fp_round>
    38ac:	02 de       	rcall	.-1020   	; 0x34b2 <__fp_pscB>
    38ae:	40 f0       	brcs	.+16     	; 0x38c0 <__divsf3+0x18>
    38b0:	f9 dd       	rcall	.-1038   	; 0x34a4 <__fp_pscA>
    38b2:	30 f0       	brcs	.+12     	; 0x38c0 <__divsf3+0x18>
    38b4:	21 f4       	brne	.+8      	; 0x38be <__divsf3+0x16>
    38b6:	5f 3f       	cpi	r21, 0xFF	; 255
    38b8:	19 f0       	breq	.+6      	; 0x38c0 <__divsf3+0x18>
    38ba:	eb cd       	rjmp	.-1066   	; 0x3492 <__fp_inf>
    38bc:	51 11       	cpse	r21, r1
    38be:	34 ce       	rjmp	.-920    	; 0x3528 <__fp_szero>
    38c0:	ee cd       	rjmp	.-1060   	; 0x349e <__fp_nan>

000038c2 <__divsf3x>:
    38c2:	0f de       	rcall	.-994    	; 0x34e2 <__fp_split3>
    38c4:	98 f3       	brcs	.-26     	; 0x38ac <__divsf3+0x4>

000038c6 <__divsf3_pse>:
    38c6:	99 23       	and	r25, r25
    38c8:	c9 f3       	breq	.-14     	; 0x38bc <__divsf3+0x14>
    38ca:	55 23       	and	r21, r21
    38cc:	b1 f3       	breq	.-20     	; 0x38ba <__divsf3+0x12>
    38ce:	95 1b       	sub	r25, r21
    38d0:	55 0b       	sbc	r21, r21
    38d2:	bb 27       	eor	r27, r27
    38d4:	aa 27       	eor	r26, r26
    38d6:	62 17       	cp	r22, r18
    38d8:	73 07       	cpc	r23, r19
    38da:	84 07       	cpc	r24, r20
    38dc:	38 f0       	brcs	.+14     	; 0x38ec <__divsf3_pse+0x26>
    38de:	9f 5f       	subi	r25, 0xFF	; 255
    38e0:	5f 4f       	sbci	r21, 0xFF	; 255
    38e2:	22 0f       	add	r18, r18
    38e4:	33 1f       	adc	r19, r19
    38e6:	44 1f       	adc	r20, r20
    38e8:	aa 1f       	adc	r26, r26
    38ea:	a9 f3       	breq	.-22     	; 0x38d6 <__divsf3_pse+0x10>
    38ec:	33 d0       	rcall	.+102    	; 0x3954 <__divsf3_pse+0x8e>
    38ee:	0e 2e       	mov	r0, r30
    38f0:	3a f0       	brmi	.+14     	; 0x3900 <__divsf3_pse+0x3a>
    38f2:	e0 e8       	ldi	r30, 0x80	; 128
    38f4:	30 d0       	rcall	.+96     	; 0x3956 <__divsf3_pse+0x90>
    38f6:	91 50       	subi	r25, 0x01	; 1
    38f8:	50 40       	sbci	r21, 0x00	; 0
    38fa:	e6 95       	lsr	r30
    38fc:	00 1c       	adc	r0, r0
    38fe:	ca f7       	brpl	.-14     	; 0x38f2 <__divsf3_pse+0x2c>
    3900:	29 d0       	rcall	.+82     	; 0x3954 <__divsf3_pse+0x8e>
    3902:	fe 2f       	mov	r31, r30
    3904:	27 d0       	rcall	.+78     	; 0x3954 <__divsf3_pse+0x8e>
    3906:	66 0f       	add	r22, r22
    3908:	77 1f       	adc	r23, r23
    390a:	88 1f       	adc	r24, r24
    390c:	bb 1f       	adc	r27, r27
    390e:	26 17       	cp	r18, r22
    3910:	37 07       	cpc	r19, r23
    3912:	48 07       	cpc	r20, r24
    3914:	ab 07       	cpc	r26, r27
    3916:	b0 e8       	ldi	r27, 0x80	; 128
    3918:	09 f0       	breq	.+2      	; 0x391c <__divsf3_pse+0x56>
    391a:	bb 0b       	sbc	r27, r27
    391c:	80 2d       	mov	r24, r0
    391e:	bf 01       	movw	r22, r30
    3920:	ff 27       	eor	r31, r31
    3922:	93 58       	subi	r25, 0x83	; 131
    3924:	5f 4f       	sbci	r21, 0xFF	; 255
    3926:	2a f0       	brmi	.+10     	; 0x3932 <__divsf3_pse+0x6c>
    3928:	9e 3f       	cpi	r25, 0xFE	; 254
    392a:	51 05       	cpc	r21, r1
    392c:	68 f0       	brcs	.+26     	; 0x3948 <__divsf3_pse+0x82>
    392e:	b1 cd       	rjmp	.-1182   	; 0x3492 <__fp_inf>
    3930:	fb cd       	rjmp	.-1034   	; 0x3528 <__fp_szero>
    3932:	5f 3f       	cpi	r21, 0xFF	; 255
    3934:	ec f3       	brlt	.-6      	; 0x3930 <__divsf3_pse+0x6a>
    3936:	98 3e       	cpi	r25, 0xE8	; 232
    3938:	dc f3       	brlt	.-10     	; 0x3930 <__divsf3_pse+0x6a>
    393a:	86 95       	lsr	r24
    393c:	77 95       	ror	r23
    393e:	67 95       	ror	r22
    3940:	b7 95       	ror	r27
    3942:	f7 95       	ror	r31
    3944:	9f 5f       	subi	r25, 0xFF	; 255
    3946:	c9 f7       	brne	.-14     	; 0x393a <__divsf3_pse+0x74>
    3948:	88 0f       	add	r24, r24
    394a:	91 1d       	adc	r25, r1
    394c:	96 95       	lsr	r25
    394e:	87 95       	ror	r24
    3950:	97 f9       	bld	r25, 7
    3952:	08 95       	ret
    3954:	e1 e0       	ldi	r30, 0x01	; 1
    3956:	66 0f       	add	r22, r22
    3958:	77 1f       	adc	r23, r23
    395a:	88 1f       	adc	r24, r24
    395c:	bb 1f       	adc	r27, r27
    395e:	62 17       	cp	r22, r18
    3960:	73 07       	cpc	r23, r19
    3962:	84 07       	cpc	r24, r20
    3964:	ba 07       	cpc	r27, r26
    3966:	20 f0       	brcs	.+8      	; 0x3970 <__divsf3_pse+0xaa>
    3968:	62 1b       	sub	r22, r18
    396a:	73 0b       	sbc	r23, r19
    396c:	84 0b       	sbc	r24, r20
    396e:	ba 0b       	sbc	r27, r26
    3970:	ee 1f       	adc	r30, r30
    3972:	88 f7       	brcc	.-30     	; 0x3956 <__divsf3_pse+0x90>
    3974:	e0 95       	com	r30
    3976:	08 95       	ret

00003978 <__fp_mpack>:
    3978:	9f 3f       	cpi	r25, 0xFF	; 255
    397a:	31 f0       	breq	.+12     	; 0x3988 <__fp_mpack_finite+0xc>

0000397c <__fp_mpack_finite>:
    397c:	91 50       	subi	r25, 0x01	; 1
    397e:	20 f4       	brcc	.+8      	; 0x3988 <__fp_mpack_finite+0xc>
    3980:	87 95       	ror	r24
    3982:	77 95       	ror	r23
    3984:	67 95       	ror	r22
    3986:	b7 95       	ror	r27
    3988:	88 0f       	add	r24, r24
    398a:	91 1d       	adc	r25, r1
    398c:	96 95       	lsr	r25
    398e:	87 95       	ror	r24
    3990:	97 f9       	bld	r25, 7
    3992:	08 95       	ret

00003994 <__mulsi3>:
    3994:	db 01       	movw	r26, r22
    3996:	8f 93       	push	r24
    3998:	9f 93       	push	r25
    399a:	49 d0       	rcall	.+146    	; 0x3a2e <__muluhisi3>
    399c:	bf 91       	pop	r27
    399e:	af 91       	pop	r26
    39a0:	a2 9f       	mul	r26, r18
    39a2:	80 0d       	add	r24, r0
    39a4:	91 1d       	adc	r25, r1
    39a6:	a3 9f       	mul	r26, r19
    39a8:	90 0d       	add	r25, r0
    39aa:	b2 9f       	mul	r27, r18
    39ac:	90 0d       	add	r25, r0
    39ae:	11 24       	eor	r1, r1
    39b0:	08 95       	ret

000039b2 <__udivmodhi4>:
    39b2:	aa 1b       	sub	r26, r26
    39b4:	bb 1b       	sub	r27, r27
    39b6:	51 e1       	ldi	r21, 0x11	; 17
    39b8:	07 c0       	rjmp	.+14     	; 0x39c8 <__udivmodhi4_ep>

000039ba <__udivmodhi4_loop>:
    39ba:	aa 1f       	adc	r26, r26
    39bc:	bb 1f       	adc	r27, r27
    39be:	a6 17       	cp	r26, r22
    39c0:	b7 07       	cpc	r27, r23
    39c2:	10 f0       	brcs	.+4      	; 0x39c8 <__udivmodhi4_ep>
    39c4:	a6 1b       	sub	r26, r22
    39c6:	b7 0b       	sbc	r27, r23

000039c8 <__udivmodhi4_ep>:
    39c8:	88 1f       	adc	r24, r24
    39ca:	99 1f       	adc	r25, r25
    39cc:	5a 95       	dec	r21
    39ce:	a9 f7       	brne	.-22     	; 0x39ba <__udivmodhi4_loop>
    39d0:	80 95       	com	r24
    39d2:	90 95       	com	r25
    39d4:	bc 01       	movw	r22, r24
    39d6:	cd 01       	movw	r24, r26
    39d8:	08 95       	ret

000039da <__divmodhi4>:
    39da:	97 fb       	bst	r25, 7
    39dc:	07 2e       	mov	r0, r23
    39de:	16 f4       	brtc	.+4      	; 0x39e4 <__divmodhi4+0xa>
    39e0:	00 94       	com	r0
    39e2:	06 d0       	rcall	.+12     	; 0x39f0 <__divmodhi4_neg1>
    39e4:	77 fd       	sbrc	r23, 7
    39e6:	08 d0       	rcall	.+16     	; 0x39f8 <__divmodhi4_neg2>
    39e8:	e4 df       	rcall	.-56     	; 0x39b2 <__udivmodhi4>
    39ea:	07 fc       	sbrc	r0, 7
    39ec:	05 d0       	rcall	.+10     	; 0x39f8 <__divmodhi4_neg2>
    39ee:	3e f4       	brtc	.+14     	; 0x39fe <__divmodhi4_exit>

000039f0 <__divmodhi4_neg1>:
    39f0:	90 95       	com	r25
    39f2:	81 95       	neg	r24
    39f4:	9f 4f       	sbci	r25, 0xFF	; 255
    39f6:	08 95       	ret

000039f8 <__divmodhi4_neg2>:
    39f8:	70 95       	com	r23
    39fa:	61 95       	neg	r22
    39fc:	7f 4f       	sbci	r23, 0xFF	; 255

000039fe <__divmodhi4_exit>:
    39fe:	08 95       	ret

00003a00 <__tablejump2__>:
    3a00:	ee 0f       	add	r30, r30
    3a02:	ff 1f       	adc	r31, r31
    3a04:	88 1f       	adc	r24, r24
    3a06:	8b bf       	out	0x3b, r24	; 59
    3a08:	07 90       	elpm	r0, Z+
    3a0a:	f6 91       	elpm	r31, Z
    3a0c:	e0 2d       	mov	r30, r0
    3a0e:	19 94       	eijmp

00003a10 <__umulhisi3>:
    3a10:	a2 9f       	mul	r26, r18
    3a12:	b0 01       	movw	r22, r0
    3a14:	b3 9f       	mul	r27, r19
    3a16:	c0 01       	movw	r24, r0
    3a18:	a3 9f       	mul	r26, r19
    3a1a:	70 0d       	add	r23, r0
    3a1c:	81 1d       	adc	r24, r1
    3a1e:	11 24       	eor	r1, r1
    3a20:	91 1d       	adc	r25, r1
    3a22:	b2 9f       	mul	r27, r18
    3a24:	70 0d       	add	r23, r0
    3a26:	81 1d       	adc	r24, r1
    3a28:	11 24       	eor	r1, r1
    3a2a:	91 1d       	adc	r25, r1
    3a2c:	08 95       	ret

00003a2e <__muluhisi3>:
    3a2e:	f0 df       	rcall	.-32     	; 0x3a10 <__umulhisi3>
    3a30:	a5 9f       	mul	r26, r21
    3a32:	90 0d       	add	r25, r0
    3a34:	b4 9f       	mul	r27, r20
    3a36:	90 0d       	add	r25, r0
    3a38:	a4 9f       	mul	r26, r20
    3a3a:	80 0d       	add	r24, r0
    3a3c:	91 1d       	adc	r25, r1
    3a3e:	11 24       	eor	r1, r1
    3a40:	08 95       	ret

00003a42 <__mulshisi3>:
    3a42:	b7 ff       	sbrs	r27, 7
    3a44:	f4 cf       	rjmp	.-24     	; 0x3a2e <__muluhisi3>

00003a46 <__mulohisi3>:
    3a46:	f3 df       	rcall	.-26     	; 0x3a2e <__muluhisi3>
    3a48:	82 1b       	sub	r24, r18
    3a4a:	93 0b       	sbc	r25, r19
    3a4c:	08 95       	ret

00003a4e <__adddi3_s8>:
    3a4e:	00 24       	eor	r0, r0
    3a50:	a7 fd       	sbrc	r26, 7
    3a52:	00 94       	com	r0
    3a54:	2a 0f       	add	r18, r26
    3a56:	30 1d       	adc	r19, r0
    3a58:	40 1d       	adc	r20, r0
    3a5a:	50 1d       	adc	r21, r0
    3a5c:	60 1d       	adc	r22, r0
    3a5e:	70 1d       	adc	r23, r0
    3a60:	80 1d       	adc	r24, r0
    3a62:	90 1d       	adc	r25, r0
    3a64:	08 95       	ret

00003a66 <__cmpdi2_s8>:
    3a66:	00 24       	eor	r0, r0
    3a68:	a7 fd       	sbrc	r26, 7
    3a6a:	00 94       	com	r0
    3a6c:	2a 17       	cp	r18, r26
    3a6e:	30 05       	cpc	r19, r0
    3a70:	40 05       	cpc	r20, r0
    3a72:	50 05       	cpc	r21, r0
    3a74:	60 05       	cpc	r22, r0
    3a76:	70 05       	cpc	r23, r0
    3a78:	80 05       	cpc	r24, r0
    3a7a:	90 05       	cpc	r25, r0
    3a7c:	08 95       	ret

00003a7e <do_rand>:
    3a7e:	8f 92       	push	r8
    3a80:	9f 92       	push	r9
    3a82:	af 92       	push	r10
    3a84:	bf 92       	push	r11
    3a86:	cf 92       	push	r12
    3a88:	df 92       	push	r13
    3a8a:	ef 92       	push	r14
    3a8c:	ff 92       	push	r15
    3a8e:	cf 93       	push	r28
    3a90:	df 93       	push	r29
    3a92:	ec 01       	movw	r28, r24
    3a94:	68 81       	ld	r22, Y
    3a96:	79 81       	ldd	r23, Y+1	; 0x01
    3a98:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a9c:	61 15       	cp	r22, r1
    3a9e:	71 05       	cpc	r23, r1
    3aa0:	81 05       	cpc	r24, r1
    3aa2:	91 05       	cpc	r25, r1
    3aa4:	21 f4       	brne	.+8      	; 0x3aae <do_rand+0x30>
    3aa6:	64 e2       	ldi	r22, 0x24	; 36
    3aa8:	79 ed       	ldi	r23, 0xD9	; 217
    3aaa:	8b e5       	ldi	r24, 0x5B	; 91
    3aac:	97 e0       	ldi	r25, 0x07	; 7
    3aae:	2d e1       	ldi	r18, 0x1D	; 29
    3ab0:	33 ef       	ldi	r19, 0xF3	; 243
    3ab2:	41 e0       	ldi	r20, 0x01	; 1
    3ab4:	50 e0       	ldi	r21, 0x00	; 0
    3ab6:	41 d0       	rcall	.+130    	; 0x3b3a <__divmodsi4>
    3ab8:	49 01       	movw	r8, r18
    3aba:	5a 01       	movw	r10, r20
    3abc:	9b 01       	movw	r18, r22
    3abe:	ac 01       	movw	r20, r24
    3ac0:	a7 ea       	ldi	r26, 0xA7	; 167
    3ac2:	b1 e4       	ldi	r27, 0x41	; 65
    3ac4:	b4 df       	rcall	.-152    	; 0x3a2e <__muluhisi3>
    3ac6:	6b 01       	movw	r12, r22
    3ac8:	7c 01       	movw	r14, r24
    3aca:	ac ee       	ldi	r26, 0xEC	; 236
    3acc:	b4 ef       	ldi	r27, 0xF4	; 244
    3ace:	a5 01       	movw	r20, r10
    3ad0:	94 01       	movw	r18, r8
    3ad2:	b9 df       	rcall	.-142    	; 0x3a46 <__mulohisi3>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	8c 0d       	add	r24, r12
    3ada:	9d 1d       	adc	r25, r13
    3adc:	ae 1d       	adc	r26, r14
    3ade:	bf 1d       	adc	r27, r15
    3ae0:	b7 ff       	sbrs	r27, 7
    3ae2:	03 c0       	rjmp	.+6      	; 0x3aea <do_rand+0x6c>
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	a1 09       	sbc	r26, r1
    3ae8:	b0 48       	sbci	r27, 0x80	; 128
    3aea:	88 83       	st	Y, r24
    3aec:	99 83       	std	Y+1, r25	; 0x01
    3aee:	aa 83       	std	Y+2, r26	; 0x02
    3af0:	bb 83       	std	Y+3, r27	; 0x03
    3af2:	9f 77       	andi	r25, 0x7F	; 127
    3af4:	df 91       	pop	r29
    3af6:	cf 91       	pop	r28
    3af8:	ff 90       	pop	r15
    3afa:	ef 90       	pop	r14
    3afc:	df 90       	pop	r13
    3afe:	cf 90       	pop	r12
    3b00:	bf 90       	pop	r11
    3b02:	af 90       	pop	r10
    3b04:	9f 90       	pop	r9
    3b06:	8f 90       	pop	r8
    3b08:	08 95       	ret

00003b0a <rand_r>:
    3b0a:	b9 cf       	rjmp	.-142    	; 0x3a7e <do_rand>

00003b0c <rand>:
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	92 e0       	ldi	r25, 0x02	; 2
    3b10:	b6 cf       	rjmp	.-148    	; 0x3a7e <do_rand>

00003b12 <srand>:
    3b12:	a0 e0       	ldi	r26, 0x00	; 0
    3b14:	b0 e0       	ldi	r27, 0x00	; 0
    3b16:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    3b1a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3b1e:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    3b22:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    3b26:	08 95       	ret

00003b28 <memcpy>:
    3b28:	fb 01       	movw	r30, r22
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	02 c0       	rjmp	.+4      	; 0x3b32 <memcpy+0xa>
    3b2e:	01 90       	ld	r0, Z+
    3b30:	0d 92       	st	X+, r0
    3b32:	41 50       	subi	r20, 0x01	; 1
    3b34:	50 40       	sbci	r21, 0x00	; 0
    3b36:	d8 f7       	brcc	.-10     	; 0x3b2e <memcpy+0x6>
    3b38:	08 95       	ret

00003b3a <__divmodsi4>:
    3b3a:	05 2e       	mov	r0, r21
    3b3c:	97 fb       	bst	r25, 7
    3b3e:	16 f4       	brtc	.+4      	; 0x3b44 <__divmodsi4+0xa>
    3b40:	00 94       	com	r0
    3b42:	0f d0       	rcall	.+30     	; 0x3b62 <__negsi2>
    3b44:	57 fd       	sbrc	r21, 7
    3b46:	05 d0       	rcall	.+10     	; 0x3b52 <__divmodsi4_neg2>
    3b48:	14 d0       	rcall	.+40     	; 0x3b72 <__udivmodsi4>
    3b4a:	07 fc       	sbrc	r0, 7
    3b4c:	02 d0       	rcall	.+4      	; 0x3b52 <__divmodsi4_neg2>
    3b4e:	46 f4       	brtc	.+16     	; 0x3b60 <__divmodsi4_exit>
    3b50:	08 c0       	rjmp	.+16     	; 0x3b62 <__negsi2>

00003b52 <__divmodsi4_neg2>:
    3b52:	50 95       	com	r21
    3b54:	40 95       	com	r20
    3b56:	30 95       	com	r19
    3b58:	21 95       	neg	r18
    3b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b5c:	4f 4f       	sbci	r20, 0xFF	; 255
    3b5e:	5f 4f       	sbci	r21, 0xFF	; 255

00003b60 <__divmodsi4_exit>:
    3b60:	08 95       	ret

00003b62 <__negsi2>:
    3b62:	90 95       	com	r25
    3b64:	80 95       	com	r24
    3b66:	70 95       	com	r23
    3b68:	61 95       	neg	r22
    3b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b70:	08 95       	ret

00003b72 <__udivmodsi4>:
    3b72:	a1 e2       	ldi	r26, 0x21	; 33
    3b74:	1a 2e       	mov	r1, r26
    3b76:	aa 1b       	sub	r26, r26
    3b78:	bb 1b       	sub	r27, r27
    3b7a:	fd 01       	movw	r30, r26
    3b7c:	0d c0       	rjmp	.+26     	; 0x3b98 <__udivmodsi4_ep>

00003b7e <__udivmodsi4_loop>:
    3b7e:	aa 1f       	adc	r26, r26
    3b80:	bb 1f       	adc	r27, r27
    3b82:	ee 1f       	adc	r30, r30
    3b84:	ff 1f       	adc	r31, r31
    3b86:	a2 17       	cp	r26, r18
    3b88:	b3 07       	cpc	r27, r19
    3b8a:	e4 07       	cpc	r30, r20
    3b8c:	f5 07       	cpc	r31, r21
    3b8e:	20 f0       	brcs	.+8      	; 0x3b98 <__udivmodsi4_ep>
    3b90:	a2 1b       	sub	r26, r18
    3b92:	b3 0b       	sbc	r27, r19
    3b94:	e4 0b       	sbc	r30, r20
    3b96:	f5 0b       	sbc	r31, r21

00003b98 <__udivmodsi4_ep>:
    3b98:	66 1f       	adc	r22, r22
    3b9a:	77 1f       	adc	r23, r23
    3b9c:	88 1f       	adc	r24, r24
    3b9e:	99 1f       	adc	r25, r25
    3ba0:	1a 94       	dec	r1
    3ba2:	69 f7       	brne	.-38     	; 0x3b7e <__udivmodsi4_loop>
    3ba4:	60 95       	com	r22
    3ba6:	70 95       	com	r23
    3ba8:	80 95       	com	r24
    3baa:	90 95       	com	r25
    3bac:	9b 01       	movw	r18, r22
    3bae:	ac 01       	movw	r20, r24
    3bb0:	bd 01       	movw	r22, r26
    3bb2:	cf 01       	movw	r24, r30
    3bb4:	08 95       	ret

00003bb6 <_exit>:
    3bb6:	f8 94       	cli

00003bb8 <__stop_program>:
    3bb8:	ff cf       	rjmp	.-2      	; 0x3bb8 <__stop_program>
